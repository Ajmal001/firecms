{"version":3,"sources":["images/test_shop_logo.png","serviceWorker.ts","../../src/util/CircularProgressCenter.tsx","../../src/util/BreadcrumbContainer.tsx","../../src/styles.ts","../../src/firebase/firestore.ts","../../src/firebase/storage.ts","../../src/util/properties.ts","../../src/collection/filters/StringNumberFilterField.tsx","../../src/collection/FilterPopup.tsx","../../src/collection/SearchBar.tsx","../../src/preview/SkeletonComponent.tsx","../../src/preview/StorageThumbnail.tsx","../../src/preview/ReferencePreview.tsx","../../src/preview/PreviewComponent.tsx","../../src/collection/CollectionTable.tsx","../../src/routes/navigation.ts","../../src/models.ts","../../src/preview/EntityPreview.tsx","../../src/collection/DeleteEntityDialog.tsx","../../src/preview/EntityDetailDialog.tsx","../../src/routes/CollectionRoute.tsx","../../src/form/fields/Select.tsx","../../src/form/fields/ArrayEnumSelect.tsx","../../src/form/fields/StorageUploadField.tsx","../../src/form/fields/TextField.tsx","../../src/form/fields/SwitchField.tsx","../../src/form/fields/DateTimeField.tsx","../../src/preview/AsyncPreviewComponent.tsx","../../src/form/fields/ReferenceField.tsx","../../src/form/fields/MapField.tsx","../../src/form/fields/ArrayDefaultField.tsx","../../src/form/fields/ArrayMapField.tsx","../../src/form/fields/DisabledField.tsx","../../src/form/index.tsx","../../src/form/validation.ts","../../src/form/EntityForm.tsx","../../src/collection/SubCollectionsView.tsx","../../src/routes/EntityFormRoute.tsx","../../src/routes/MediaRoute.tsx","../../src/CMSApp.tsx","../../src/text_search_delegate.ts","index.tsx","custom_field/CustomLargeTextField.tsx","firebase_config.ts"],"names":["module","exports","Boolean","window","location","hostname","match","CircularProgressCenter","props","display","width","height","m","React","BreadcrumbContainer","children","elevation","p","pr","pl","useStyles","makeStyles","createStyles","root","marginTop","theme","drawer","flexShrink","appBar","marginLeft","menuButton","marginRight","grow","flexGrow","toolbar","logo","padding","maxWidth","drawerPaper","content","filter","table","minWidth","tableWrapper","overflow","visuallyHidden","border","clip","margin","position","top","tree","formStyles","layout","paper","dropZone","backgroundColor","activeDrop","acceptDrop","borderColor","main","rejectDrop","uploadItem","minHeight","formPaper","marginBottom","buttons","justifyContent","button","form","useToolbarStyles","paddingLeft","paddingRight","highlight","color","lighten","dark","title","flex","searchBar","createMuiTheme","palette","background","default","primary","secondary","error","red","A400","typography","h6","fontSize","fontWeight","shape","borderRadius","fetchEntity","path","entityId","schema","console","createEntityFromSchema","docSnapshot","data","result","Object","key","property","values","sanitizeData","replaceTimestampsWithDates","firebase","k","v","Array","a","doc","id","snapshot","reference","initEntityValues","uploadFile","file","storageRef","getCollectionTableProperties","properties","getFilterableProperties","StringNumberFilterField","name","enumValues","field","setFieldValue","undefined","fieldOperation","fieldValue","useState","operation","setOperation","internalValue","setInternalValue","op","fullWidth","variant","container","item","xs","value","autoWidth","onChange","updateFilter","evt","type","defaultValue","val","parseFloat","FilterPopup","filterValues","onFilterUpdate","filterableProperties","classes","className","formField","createFilterField","mb","cleanedInitialValues","initFilterValues","popupId","size","onClick","style","bindTrigger","bindPopover","popupState","anchorOrigin","vertical","horizontal","transformOrigin","initialValues","onSubmit","filters","handleSubmit","noValidate","createFilterFields","search","fade","searchIcon","pointerEvents","alignItems","inputRoot","inputInput","transition","SearchBar","onTextSearch","searchText","setSearchText","useEffect","handler","setTimeout","clearTimeout","placeholder","event","input","endAdornment","inputProps","SkeletonComponent","small","stringProperty","mediaType","renderImageThumbnail","renderUrlVideo","Error","renderUrlComponent","renderSkeletonText","arrayProperty","tableProperties","map","index","component","renderArrayOfMaps","renderGenericArrayCell","listProperties","renderMap","StorageThumbnail","storagePath","url","setUrl","getDownloadURL","ReferencePreview","previewComponent","entity","setEntity","cancel","ref","onSnapshot","listenEntityFromRef","e","mt","PreviewComponent","renderStorageThumbnail","renderPreviewEnumChip","renderGenericArray","label","renderArrayOfStrings","refSchema","src","maxHeight","renderUrlImageThumbnail","controls","image","CollectionTable","setData","dataLoading","setDataLoading","dataLoadingError","setDataLoadingError","textSearchInProgress","setTextSearchInProgress","textSearchLoading","setTextSearchLoading","textSearchData","setTextSearchData","setFilter","order","setOrder","orderBy","setOrderBy","page","setPage","pageKeys","setPageKeys","rowsPerPage","setRowsPerPage","startAfter","cancelSubscription","onError","limit","collectionReference","colSnapshot","listenCollection","entities","lastEntity","emptyRows","tableViewFields","hasEditButton","hasDeleteButton","buildTableRowButtons","disabled","onEntityEdit","onEntityDelete","textAlign","textOverflow","hover","onEntityClick","tabIndex","align","getCellAlignment","renderTableCell","renderCustomTableCell","delegate","buttonsCell","renderTableSkeletonCell","skeletonBody","buildTableRowSkeleton","tableBody","buildTableRow","colSpan","length","body","textSearchEnabled","Paper","searchString","textSearchDelegate","ids","promises","Promise","collectionPath","spacing","justify","stickyHeader","sortable","additionalColumns","onRequestSort","isAsc","rowsPerPageOptions","count","Infinity","backIconButtonProps","nextIconButtonProps","onChangePage","onChangeRowsPerPage","parseInt","CollectionTableHead","headCells","headCell","active","sortDirection","direction","additionalColumn","CollectionTableToolbar","replacePathIdentifiers","params","basePath","replacedPath","getPlaceHolderIdForView","view","hash","getEntityPath","DATA_PATH","getRouterNewEntityPath","buildDataPath","absolutePath","removeInitialSlash","s","addInitialSlash","EntityPreview","scope","DeleteEntityDialog","onClose","open","other","loading","setLoading","openSnackBar","setOpenSnackbar","disableBackdropClick","disableEscapeKeyDown","keepMounted","onBackdropClick","dividers","autoFocus","deleteEntity","_","autoHideDuration","EntityDetailDialog","CollectionRoute","entityPlaceholderPath","history","entityClicked","setEntityClicked","deleteEntityClicked","setDeleteEntityClicked","deleteEnabled","ReactLink","to","relativePath","includeToolbar","entityPath","paginationEnabled","pagination","Select","errors","touched","includeDescription","fieldError","getIn","showError","required","labelId","newValue","ArrayEnumSelect","multiple","renderValue","selected","checked","StorageUploadField","filled","StorageUpload","multipleFilesSupported","storageMeta","initialValue","items","onClear","clearedStoragePath","useDropzone","accept","onDrop","acceptedFiles","newInternalValue","removeDuplicates","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","rootProps","rootRef","flexDirection","flexWrap","entry","renderProperty","onFileUploadComplete","uploadedPath","StorageUploadProgress","setError","progress","setProgress","openErrorAlert","setOpenErrorAlert","uploadTask","currentProgress","fullPath","upload","handleCloseErrorAlert","ml","severity","StorageItemPreview","right","TextField","isSubmitting","allowInfinity","updateValue","inputType","numValue","valueIsInfinity","labelPlacement","control","SwitchField","DateTimeField","clearable","helperText","description","AsyncPreviewComponent","builder","setResult","EntityStatus","ReferenceField","my","gutterBottom","initialFilter","ReferenceDialog","setOpen","handleClose","MapField","createFormField","mapProperties","hasError","entryKey","childProperty","ArrayDefaultField","ofProperty","hasValue","render","arrayHelpers","ArrayMapField","arrayKey","DisabledField","buildField","mapPropertyToYup","yup","validation","getYupStringSchema","getYupNumberSchema","getYupBooleanSchema","getYupObjectSchema","getYupArraySchema","getYupDateSchema","getYupGeoPointSchema","getYupReferenceSchema","objectSchema","EntityForm","status","onEntitySave","customId","setCustomId","customIdError","setCustomIdError","savingError","setSavingError","mustSetCustomId","validate","actions","validationSchema","disableGutters","formType","hasEnumValues","fieldProps","createCustomIdField","sm","createFormFields","TabPanel","subcollectionPath","selectedView","thisView","hidden","SubCollectionsView","parentCollectionPath","subcollections","firstSubcollection","setSelectedView","EntityFormRoute","breadcrumbs","hashIdentifier","setStatus","handleCloseSuccessAlert","setOpenSuccessAlert","openSuccessAlert","existingEntity","formBody","c","documentReference","merge","saveEntity","StorageTree","initialState","full_path","storage","treeArray","defaultCollapseIcon","defaultExpandIcon","onNodeToggle","nodeId","node","getTreeItem","MediaRoute","files","googleAuthProvider","AuthContext","CMSApp","navigation","includeMedia","authentication","allowSkipLogin","additionalViews","firebaseConfig","useTheme","mobileOpen","setMobileOpen","firebaseConfigInitialized","setFirebaseConfigInitialized","configError","setConfigError","authLoading","setAuthLoading","loggedUser","setLoggedUser","loginSkipped","setLoginSkipped","authProviderError","setAuthProviderError","notAllowedError","setNotAllowedError","firebaseConfigError","setFirebaseConfigError","authenticationEnabled","skipLoginButtonEnabled","authenticator","onAuthStateChanged","user","allowed","fetch","response","config","initFirebase","handleDrawerToggle","allPaths","getAllPaths","entityCollectionView","previousBreadcrumbs","pathConfigurations","viewPath","placeHolderId","pathConfiguration","entries","routeType","firstCollectionPath","shouldIncludeMedia","additionalView","exact","from","utils","DateFnsUtils","primaryTypographyProps","edge","noWrap","photoURL","onSignOut","mdUp","implementation","anchor","ModalProps","smDown","getRouterSwitch","renderMainView","googleSignIn","skipLogin","AlgoliaTextSearchDelegate","this","algoliaClient","performTextSearch","hits","hit","productSchema","dataType","includeInListView","includeAsMapPreview","price","requiredMessage","filterable","private","public","categories","of","electronics","books","furniture","clothing","food","tags","published","expires_on","publisher","external_id","available_locales","blogSchema","long_text","customField","rows","Fragment","FormControl","InputLabel","Input","multiline","target","FormHelperText","additionalProps","images","priority","draft","products","testEntitySchema","search_adjacent","difficulty","created_at","productAdditionalColumn","collection","get","then","client","localeCollection","selectable","video","algoliasearch","process","first_name","last_name","picture","large","urlMediaType","medium","thumbnail","email","phone","ReactDOM","log","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76134159.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/test_shop_logo.869a9462.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    Box,\n    CircularProgress,\n    CircularProgressProps\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nexport function CircularProgressCenter(props:CircularProgressProps) {\n    return (\n        <Box\n            display=\"flex\"\n            width={\"100%\"} height={\"100vh\"}>\n            <Box m=\"auto\">\n                <CircularProgress {...props}/>\n            </Box>\n        </Box>\n    );\n}\n","import React from \"react\";\nimport { Box, Paper } from \"@material-ui/core\";\n\ninterface BreadcrumbProps {\n    children: React.ReactChild;\n}\n\nexport const BreadcrumbContainer: React.FunctionComponent<BreadcrumbProps> = ({ children }) => {\n    return (\n        <Box display=\"flex\">\n            <Paper elevation={0}>\n                <Box p={1} pr={2} pl={2}>\n                    {children}\n                </Box>\n            </Paper>\n        </Box>\n    );\n};\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core\";\nimport { createMuiTheme, lighten } from \"@material-ui/core/styles\";\nimport { red } from \"@material-ui/core/colors\";\n\nconst drawerWidth = 240;\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\",\n            width: \"100%\",\n            marginTop: theme.spacing(3)\n        },\n        drawer: {\n            [theme.breakpoints.up(\"md\")]: {\n                width: drawerWidth,\n                flexShrink: 0\n            }\n        },\n        appBar: {\n            [theme.breakpoints.up(\"md\")]: {\n                width: `calc(100% - ${drawerWidth}px)`,\n                marginLeft: drawerWidth\n            }\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n            [theme.breakpoints.up(\"md\")]: {\n                display: \"none\"\n            }\n        },\n        grow: {\n            flexGrow: 1\n        },\n        toolbar: theme.mixins.toolbar,\n        logo: {\n            padding: theme.spacing(3),\n            maxWidth: drawerWidth\n        },\n        drawerPaper: {\n            width: drawerWidth\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n            width: `calc(100% - ${drawerWidth}px)`\n        },\n        filter: {\n            flexGrow: 1,\n            padding: theme.spacing(1)\n        },\n        table: {\n            minWidth: 750\n        },\n        tableWrapper: {\n            overflow: \"auto\"\n        },\n        visuallyHidden: {\n            border: 0,\n            clip: \"rect(0 0 0 0)\",\n            height: 1,\n            margin: -1,\n            overflow: \"hidden\",\n            padding: 0,\n            position: \"absolute\",\n            top: 20,\n            width: 1\n        },\n        tree: {\n            height: 216,\n            flexGrow: 1,\n            maxWidth: 400\n        }\n    })\n);\n\n\nexport const formStyles = makeStyles(theme => ({\n    appBar: {\n        position: \"relative\"\n    },\n    layout: {\n        width: \"auto\",\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n            width: 600,\n            marginLeft: \"auto\",\n            marginRight: \"auto\"\n        }\n    },\n    paper: {\n        padding: theme.spacing(1),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n            padding: theme.spacing(2)\n        }\n    },\n    dropZone: {\n        \"&:hover\": {\n            backgroundColor: \"#f5f5f5\"\n        }\n    },\n    activeDrop: {\n        backgroundColor: \"#f5f5f5\"\n    },\n    acceptDrop: {\n        borderColor: theme.palette.success.main\n    },\n    rejectDrop: {\n        borderColor: theme.palette.error.main\n    },\n    uploadItem: {\n        padding: theme.spacing(1),\n        minWidth: 220,\n        minHeight: 220\n    },\n    formPaper: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        padding: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {}\n    },\n    buttons: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n    form: {\n        marginTop: theme.spacing(2)\n    }\n}));\n\n\nexport const useToolbarStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            paddingLeft: theme.spacing(2),\n            paddingRight: theme.spacing(1)\n        },\n        highlight:\n            theme.palette.type === \"light\"\n                ? {\n                    color: theme.palette.secondary.main,\n                    backgroundColor: lighten(theme.palette.secondary.light, 0.85)\n                }\n                : {\n                    color: theme.palette.text.primary,\n                    backgroundColor: theme.palette.secondary.dark\n                },\n        title: {\n            flex: \"1 1 100%\"\n        },\n        searchBar: {\n            flex: \"1 1 100%\"\n        }\n    })\n);\n\nexport const theme = createMuiTheme({\n    palette: {\n        background: {\n            default: \"#f1f1f1\"\n        },\n        primary: {\n            main: \"#03238d\"\n        },\n        secondary: {\n            main: \"#8AC9BD\"\n        },\n        error: {\n            main: red.A400\n        }\n    },\n    typography: {\n        h6: {\n            fontSize: 16,\n            fontWeight: 600\n        }\n    },\n    shape: {\n        borderRadius: 2\n    }\n});\n","import * as firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport { Entity, EntitySchema, EntityValues, FilterValues } from \"../models\";\n\n/**\n * Listen to a entities in a Firestore path\n * @param path\n * @param schema\n * @param onSnapshot\n * @param filter\n * @param limit\n * @param startAfter\n * @param orderBy\n * @param order\n * @return Function to cancel subscription\n */\nexport function listenCollection<S extends EntitySchema>(\n    path: string,\n    schema: S,\n    onSnapshot: (entity: Entity<S>[]) => void,\n    onError?: (error: Error) => void,\n    filter?: FilterValues<S>,\n    limit?: number,\n    startAfter?: any[],\n    orderBy?: string,\n    order?: \"desc\" | \"asc\"\n): Function {\n\n    console.log(\"Listening collection\", path, limit, filter, startAfter, orderBy, order);\n\n    let collectionReference: firebase.firestore.Query = firebase.firestore()\n        .collection(path);\n\n    if (filter)\n        Object.entries(filter)\n            .filter(([_, entry]) => !!entry)\n            .forEach(([key, [op, value]]) => collectionReference = collectionReference.where(key, op, value));\n\n    if (orderBy && order)\n        collectionReference = collectionReference.orderBy(orderBy, order);\n\n    if (startAfter)\n        collectionReference = collectionReference\n            .startAfter(startAfter);\n\n    if (limit)\n        collectionReference = collectionReference\n            .limit(limit);\n\n    return collectionReference\n        .onSnapshot((colSnapshot) =>\n                onSnapshot(colSnapshot.docs.map((doc) => createEntityFromSchema(doc, schema))),\n            onError);\n}\n\n/**\n * Retrieve an entity given a path and a schema\n * @param path\n * @param entityId\n * @param schema\n */\nexport function fetchEntity<S extends EntitySchema>(\n    path: string,\n    entityId: string,\n    schema: S\n): Promise<Entity<S>> {\n\n    console.debug(\"fetch entity\", path, entityId);\n\n    return firebase.firestore()\n        .collection(path)\n        .doc(entityId)\n        .get()\n        .then((docSnapshot) => createEntityFromSchema(docSnapshot, schema));\n}\n\n/**\n *\n * @param path\n * @param entityId\n * @param schema\n * @param onSnapshot\n * @return Function to cancel subscription\n */\nexport function listenEntity<S extends EntitySchema>(\n    path: string,\n    entityId: string,\n    schema: S,\n    onSnapshot: (entity: Entity<S>) => void\n): Function {\n    return firebase.firestore()\n        .collection(path)\n        .doc(entityId)\n        .onSnapshot((docSnapshot) => onSnapshot(createEntityFromSchema(docSnapshot, schema)));\n}\n\n/**\n *\n * @param ref\n * @param schema\n * @param onSnapshot\n * @return Function to cancel subscription\n */\nexport function listenEntityFromRef<S extends EntitySchema>(\n    ref: firebase.firestore.DocumentReference,\n    schema: S,\n    onSnapshot: (entity: Entity<S>) => void\n): Function {\n    return ref\n        .onSnapshot((docSnapshot) => onSnapshot(createEntityFromSchema(docSnapshot, schema)));\n}\n\n/**\n * FireCMS uses Javascript dates internally instead of Firestore timestamps.\n * This makes it easier to interact with the rest of the libraries and\n * bindings.\n * @param data\n */\nfunction replaceTimestampsWithDates(data: any) {\n\n    if (typeof data === \"object\"\n        && !(data instanceof firebase.firestore.DocumentReference)\n        && !(data instanceof firebase.firestore.GeoPoint)) {\n\n        let result: any = {};\n        Object.entries(data).forEach(([k, v]) => {\n            if (v && v instanceof firebase.firestore.Timestamp) {\n                v = v.toDate();\n            } else if (Array.isArray(v)) {\n                v = v.map(a => replaceTimestampsWithDates(a));\n            } else if (v && typeof v === \"object\") {\n                v = replaceTimestampsWithDates(v);\n            }\n            result[k] = v;\n        });\n        return result;\n    } else {\n        return data;\n    }\n}\n\n/**\n * Add missing required fields, expected in the schema, to the values of an entity coming from Firestore\n * @param values\n * @param schema\n */\nfunction sanitizeData<S extends EntitySchema>(values: EntityValues<S>, schema: S) {\n    let result: any = values;\n    Object.entries(schema.properties).forEach(([key, property]) => {\n        if (values && values[key]) result[key] = values[key];\n        else if (property.validation?.required) result[key] = undefined;\n    });\n    return result;\n}\n\nfunction createEntityFromSchema<S extends EntitySchema>(doc: firebase.firestore.DocumentSnapshot, schema: S): Entity<S> {\n    const data = sanitizeData(replaceTimestampsWithDates(doc.data()) as EntityValues<S>, schema);\n    return {\n        id: doc.id,\n        snapshot: doc,\n        reference: doc.ref,\n        values: data || initEntityValues(schema)\n    };\n}\n\n/**\n * Functions used to set required fields to undefined in the initially created entity\n * @param schema\n */\nexport function initEntityValues<S extends EntitySchema>(schema: S): EntityValues<S> {\n    return Object.entries(schema.properties)\n        .filter(([key, property]) => property.validation?.required)\n        .map(([key, property]) => ({ [key]: undefined }))\n        .reduce((a: any, b: any) => ({ ...a, ...b }), {});\n}\n\n/**\n * Functions used to initialize filter object\n * @param schema\n */\nexport function initFilterValues<S extends EntitySchema>(schema: S): FilterValues<S> {\n    return Object.entries(schema.properties)\n        .filter(([key, property]) => property.filterable)\n        .map(([key, property]) => ({ [key]: undefined }))\n        .reduce((a: any, b: any) => ({ ...a, ...b }), {});\n}\n\n/**\n * Save entity to the specified path. Note that Firestore does not allow\n * undefined values.\n * @param path\n * @param entityId\n * @param data\n */\nexport function saveEntity(\n    path: string,\n    entityId: string | undefined,\n    data: { [fieldKey: string]: any }\n): Promise<string> {\n\n    console.log(\"Saving entity\", path, entityId, data);\n\n    let documentReference: firebase.firestore.DocumentReference<firebase.firestore.DocumentData>;\n    if (entityId)\n        documentReference = firebase.firestore()\n            .collection(path)\n            .doc(entityId);\n    else\n        documentReference = firebase.firestore()\n            .collection(path)\n            .doc();\n    return documentReference\n        .set(data, { merge: true })\n        .then(() => documentReference.id);\n}\n\n/**\n * Delete an entity\n * @param entity\n */\nexport function deleteEntity(\n    entity: Entity<any>\n): Promise<void> {\n    console.debug(\"Deleting entity\", entity);\n    return entity.reference.delete();\n}\n","import * as firebase from \"firebase\";\nimport \"firebase/storage\";\n\nexport function uploadFile(file: File, path?: string): firebase.storage.UploadTask {\n    const storageRef = firebase.storage().ref();\n    return storageRef.child(`${path}/${file.name}`).put(file);\n}\n\nexport function getDownloadURL(storagePath: string): Promise<string> {\n    return firebase.storage().ref(storagePath).getDownloadURL();\n}\n","import { Properties, Property } from \"../models\";\n\nexport function getCollectionTableProperties(properties: Properties): [string, Property][] {\n    return Object.entries(properties).filter(([_, property]) => property.includeInListView);\n}\n\n\nexport function getFilterableProperties(properties: Properties): [string, Property][] {\n    return Object.entries(properties).filter(([_, property]) => property.filterable);\n}\n","import { NumberProperty, StringProperty } from \"../../models\";\nimport { Field } from \"formik\";\nimport {\n    FormControl,\n    Grid,\n    Input,\n    MenuItem,\n    Select as MuiSelect,\n    Typography\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { FieldProps } from \"formik/dist/Field\";\n\ninterface TextFieldProps {\n    name: string,\n    property: StringProperty | NumberProperty,\n}\n\nexport default function StringNumberFilterField({ name, property }: TextFieldProps) {\n\n    const enumValues = property.enumValues;\n\n    return (\n        <Field\n            name={`${name}`}\n        >\n            {({\n                  field,\n                  form: { setFieldValue },\n                  ...props\n              }: FieldProps) => {\n\n                const [fieldOperation, fieldValue] = field.value ? field.value : [\"==\", undefined];\n                const [operation, setOperation] = useState<string>(fieldOperation);\n                const [internalValue, setInternalValue] = useState<string | number>(fieldValue);\n\n                function updateFilter(op: string, val: string | number) {\n                    setOperation(op);\n                    setInternalValue(internalValue);\n                    if (op && val) {\n                        setFieldValue(\n                            name,\n                            [op, val]\n                        );\n                    } else {\n                        setFieldValue(\n                            name,\n                            undefined\n                        );\n                    }\n                }\n\n                return (\n\n                    <FormControl\n                        fullWidth>\n                        <Typography variant={\"caption\"}>\n                            {property.title || name}\n                        </Typography>\n                        <Grid container>\n\n                            <Grid item xs={3}>\n                                <MuiSelect value={operation}\n                                           autoWidth\n                                           onChange={(evt: any) => {\n                                               updateFilter(evt.target.value, internalValue);\n                                           }}>\n                                    <MenuItem value={\"==\"}>==</MenuItem>\n                                    <MenuItem value={\">\"}>{\">\"}</MenuItem>\n                                    <MenuItem value={\"<\"}>{\"<\"}</MenuItem>\n                                    <MenuItem value={\">=\"}>{\">=\"}</MenuItem>\n                                    <MenuItem value={\"<=\"}>{\"<=\"}</MenuItem>\n                                </MuiSelect>\n                            </Grid>\n\n                            {!enumValues && <Grid item xs={9}>\n                                <Input\n                                    key={`filter-${name}`}\n                                    type={property.dataType === \"number\" ? \"number\" : undefined}\n                                    defaultValue={internalValue}\n                                    onChange={(evt) => {\n                                        const val = property.dataType === \"number\" ?\n                                            parseFloat(evt.target.value)\n                                            : evt.target.value;\n                                        updateFilter(operation, val);\n                                    }}\n                                />\n                            </Grid>}\n\n                            {enumValues && <Grid item xs={9}>\n                                <MuiSelect\n                                    fullWidth\n                                    key={`filter-${name}`}\n                                    value={internalValue}\n                                    onChange={(evt: any) => {\n                                        updateFilter(operation, evt.target.value);\n                                    }}>\n                                    {Object.entries(enumValues).map(([key, value]) => (\n                                        <MenuItem key={`select-${key}`}\n                                                  value={key}>{value as string}</MenuItem>\n                                    ))}\n                                </MuiSelect>\n                            </Grid>}\n\n                        </Grid>\n                    </FormControl>\n                );\n            }}\n        </Field>\n    );\n\n}\n","import { EntitySchema, FilterValues, Property } from \"../models\";\nimport PopupState, { bindPopover, bindTrigger } from \"material-ui-popup-state\";\nimport { Button, IconButton, Tooltip } from \"@material-ui/core\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport Popover from \"@material-ui/core/Popover\";\nimport Box from \"@material-ui/core/Box\";\nimport React from \"react\";\nimport { Form, Formik } from \"formik\";\nimport { initFilterValues } from \"../firebase/firestore\";\nimport { useStyles } from \"../styles\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport { getFilterableProperties } from \"../util/properties\";\nimport StringNumberFilterField from \"./filters/StringNumberFilterField\";\n\ninterface FilterPopupProps<S extends EntitySchema> {\n    schema: S;\n\n    filterValues?: FilterValues<S>;\n\n    onFilterUpdate(filterValues?: FilterValues<S>): void;\n}\n\nexport default function FilterPopup<S extends EntitySchema>({ schema, filterValues, onFilterUpdate }: FilterPopupProps<S>) {\n\n    const filterableProperties = getFilterableProperties(schema.properties);\n    const classes = useStyles();\n\n    function createFilterFields(values: any) {\n        return (\n            <Box className={classes.filter} width={220}>\n                {filterableProperties.map(\n                    ([key, property]) => {\n                        const formField = createFilterField(key, property);\n                        return (\n                            <Box key={`filter_${key}`} mb={1}>\n                                {formField}\n                            </Box>\n                        );\n                    })}\n            </Box>\n        );\n    }\n\n    const cleanedInitialValues = filterValues || initFilterValues(schema);\n\n    return (\n        <PopupState variant=\"popover\" popupId=\"collection-filter\">\n            {(popupState) => {\n\n                function setFilters(filterValues: FilterValues<S>) {\n                    const filters = { ...filterValues };\n                    console.log(\"Updating filters\", filters);\n                    Object.keys(filters).forEach(key => filters[key] === undefined && delete filters[key]);\n                    onFilterUpdate(filters);\n                    popupState.close();\n                }\n\n                return (\n                    <React.Fragment>\n                        {filterValues ?\n                            <Tooltip title=\"Clear filter\">\n                                <IconButton\n                                    size={\"small\"}\n                                    aria-label=\"filter clear\"\n                                    onClick={() => onFilterUpdate(undefined)}>\n                                    <ClearIcon fontSize={\"small\"}/>\n                                </IconButton>\n                            </Tooltip>\n                            :\n                            <Box style={{ width: 26 }}/>}\n\n                        <Tooltip title=\"Filter list\">\n                            <IconButton\n                                aria-label=\"filter list\"  {...bindTrigger(popupState)} >\n                                <FilterListIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Popover\n                            {...bindPopover(popupState)}\n                            anchorOrigin={{\n                                vertical: \"bottom\",\n                                horizontal: \"center\"\n                            }}\n                            transformOrigin={{\n                                vertical: \"top\",\n                                horizontal: \"center\"\n                            }}\n                        >\n                            <Box p={2}>\n                                <Formik\n                                    initialValues={cleanedInitialValues}\n                                    onSubmit={setFilters}\n                                >\n                                    {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting }) => {\n                                        return (\n                                            <Form\n                                                onSubmit={handleSubmit}\n                                                noValidate>\n                                                {createFilterFields(values)}\n                                                <Box display=\"flex\"\n                                                     justifyContent=\"flex-end\">\n                                                    <Box p={1}\n                                                         justifyContent=\"flex-end\">\n                                                        <Button\n                                                            size={\"small\"}\n                                                            variant=\"outlined\"\n                                                            color=\"primary\"\n                                                            type=\"submit\">Ok</Button>\n                                                    </Box>\n                                                </Box>\n                                            </Form>\n                                        );\n                                    }}\n                                </Formik>\n                            </Box>\n                        </Popover>\n                    </React.Fragment>\n                );\n            }}\n        </PopupState>\n    );\n}\n\nfunction createFilterField(key: string, property: Property): JSX.Element {\n\n    if (property.dataType === \"number\" || property.dataType === \"string\") {\n        return <StringNumberFilterField name={key} property={property}/>;\n    }\n\n    return (\n        <div>{`Currently the field ${property.dataType} is not supported`}</div>\n    );\n}\n\n","import React, { useEffect, useState } from \"react\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport {\n    createStyles,\n    fade,\n    makeStyles,\n    Theme\n} from \"@material-ui/core/styles\";\nimport { Box, IconButton } from \"@material-ui/core\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        search: {\n            position: \"relative\",\n            borderRadius: theme.shape.borderRadius,\n            backgroundColor: fade(theme.palette.common.black, 0.05),\n            \"&:hover\": {\n                backgroundColor: fade(theme.palette.common.black, 0.10)\n            },\n            marginLeft: 0,\n            width: \"100%\",\n            [theme.breakpoints.up(\"sm\")]: {\n                marginLeft: theme.spacing(1),\n                width: \"auto\"\n            }\n        },\n        searchIcon: {\n            padding: theme.spacing(0, 2),\n            height: \"100%\",\n            position: \"absolute\",\n            pointerEvents: \"none\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        },\n        inputRoot: {\n            color: \"inherit\"\n        },\n        inputInput: {\n            padding: theme.spacing(1, 1, 1, 0),\n            // vertical padding + font size from searchIcon\n            paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n            transition: theme.transitions.create(\"width\"),\n            width: \"100%\",\n            [theme.breakpoints.up(\"sm\")]: {\n                width: \"12ch\",\n                \"&:focus\": {\n                    width: \"20ch\"\n                }\n            }\n        }\n    })\n);\n\n\ninterface SearchBarProps {\n    onTextSearch: (searchString?: string) => void;\n}\n\nexport default function SearchBar({ onTextSearch }: SearchBarProps) {\n\n    const classes = useStyles();\n\n    const [searchText, setSearchText] = useState<string>(\"\");\n\n    /**\n     * Debounce on Search text update\n     */\n    useEffect(\n        () => {\n            const handler = setTimeout(() => {\n                if (searchText) {\n                    onTextSearch(searchText);\n                } else {\n                    onTextSearch(undefined);\n                }\n            }, 250);\n\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [searchText]\n    );\n\n    function clearText() {\n        setSearchText(\"\");\n        onTextSearch(undefined);\n    }\n\n    return (\n        <div className={classes.search}>\n            <div className={classes.searchIcon}>\n                <SearchIcon/>\n            </div>\n            <InputBase\n                placeholder=\"Search\"\n                value={searchText}\n                onChange={(event) => {\n                    setSearchText(event.target.value);\n                }}\n                classes={{\n                    root: classes.inputRoot,\n                    input: classes.inputInput\n                }}\n                endAdornment={searchText ?\n                    <IconButton\n                        size={\"small\"}\n                        onClick={clearText}>\n                        <ClearIcon fontSize={\"small\"}/>\n                    </IconButton> :\n                    <Box style={{ width: 26 }}/>\n                }\n                inputProps={{ \"aria-label\": \"search\" }}\n            />\n        </div>\n    );\n}\n","import {\n    ArrayProperty,\n    EnumType,\n    MapProperty,\n    Properties,\n    Property,\n    StringProperty\n} from \"../models\";\nimport React from \"react\";\nimport {\n    Grid,\n    List,\n    ListItem,\n    Table,\n    TableBody,\n    TableCell,\n    TableRow\n} from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\nexport interface SkeletonComponentProps<T> {\n    property: Property<T>,\n    small: boolean\n}\n\n\nexport default function SkeletonComponent<T>({\n                                                 property,\n                                                 small\n                                             }: SkeletonComponentProps<T>\n) {\n\n    if (!property) {\n        console.error(\"No property assigned for skeleton component\", property, small);\n    }\n\n    let content: JSX.Element | any;\n    if (property.dataType === \"string\") {\n        const stringProperty = property as StringProperty;\n        if (stringProperty.urlMediaType) {\n            content = renderUrlComponent(stringProperty, small);\n        } else if (stringProperty.storageMeta) {\n            content = renderImageThumbnail(small);\n        } else {\n            content = renderSkeletonText();\n        }\n    } else if (property.dataType === \"array\") {\n        const arrayProperty = property as ArrayProperty<any>;\n        if (arrayProperty.of.dataType === \"map\")\n            content = renderArrayOfMaps(arrayProperty.of.properties);\n        else if (arrayProperty.of.dataType === \"string\") {\n            if (arrayProperty.of.enumValues) {\n                content = renderArrayEnumTableCell();\n            } else if (arrayProperty.of.storageMeta) {\n                content = renderGenericArrayCell(arrayProperty.of);\n            } else {\n                content = renderArrayOfStrings();\n            }\n        } else {\n            content = renderGenericArrayCell(arrayProperty.of);\n        }\n    } else if (property.dataType === \"map\") {\n        content = renderMap(property as MapProperty<any>);\n    } else if (property.dataType === \"timestamp\") {\n        content = renderSkeletonText();\n    } else if (property.dataType === \"reference\") {\n        content = renderReference();\n    } else if (property.dataType === \"boolean\") {\n        content = renderSkeletonText();\n    } else {\n        content = renderSkeletonText();\n    }\n    return (content ? content : null);\n}\n\nfunction renderMap<T>(property: MapProperty<T>) {\n    let listProperties = Object.entries(property.properties).filter(\n        ([_, property]) => property.includeAsMapPreview\n    );\n    if (!listProperties.length) {\n        listProperties = Object.entries(property.properties).slice(0, 3);\n    }\n\n    return (\n        <List>\n            {listProperties.map(([key, property]) => (\n                <ListItem key={property.title + key}>\n                    <SkeletonComponent\n                        property={property}\n                        small={true}/>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nfunction renderArrayOfMaps(properties: Properties) {\n    let tableProperties = Object.entries(properties).filter(\n        ([_, property]) => property.includeAsMapPreview\n    );\n    if (!tableProperties.length) {\n        tableProperties = Object.entries(properties).slice(0, 3);\n    }\n\n    return (\n        <Table size=\"small\">\n            <TableBody>\n                {\n                    [0, 1, 2].map((value, index) => {\n                        return (\n                            <TableRow key={`table_${value}_${index}`}>\n                                {tableProperties.map(\n                                    ([key, property], index) => (\n                                        <TableCell\n                                            key={`table-cell-${key}`}\n                                            component=\"th\"\n                                        >\n                                            <SkeletonComponent\n                                                property={property}\n                                                small={true}/>\n                                        </TableCell>\n                                    )\n                                )}\n                            </TableRow>\n                        );\n                    })}\n            </TableBody>\n        </Table>\n    );\n}\n\nfunction renderArrayOfStrings() {\n    return (\n        <Grid>\n            {\n                [0, 1].map((value, index) => (\n                    renderSkeletonText()\n                ))}\n        </Grid>\n    );\n}\n\nfunction renderArrayEnumTableCell<T extends EnumType>() {\n    return (\n        <Grid>\n            {\n                [0, 1].map((value, index) =>\n                    renderSkeletonText()\n                )}\n        </Grid>\n    );\n}\n\nfunction renderGenericArrayCell<T extends EnumType>(\n    property: Property\n) {\n    return (\n        <Grid>\n\n            {\n                [0, 1].map((value, index) =>\n                    <React.Fragment>\n                        <SkeletonComponent property={property}\n                                           small={true}/>\n                    </React.Fragment>\n                )}\n        </Grid>\n    );\n}\n\nfunction renderUrlAudioComponent() {\n    return <Skeleton variant=\"rect\"\n                     width={300}\n                     height={100}/>;\n}\n\nexport function renderImageThumbnail(small: boolean) {\n    return <Skeleton variant=\"rect\"\n                     width={small ? 100 : 200}\n                     height={small ? 100 : 200}/>;\n}\n\nfunction renderUrlVideo(\n    small: boolean) {\n\n    return <Skeleton variant=\"rect\"\n                     width={small ? 300 : 500}\n                     height={small ? 200 : 250}/>;\n}\n\nfunction renderReference() {\n    return (\n        <Skeleton variant=\"rect\" width={200} height={100}/>\n    );\n}\n\n\nfunction renderUrlComponent(property: StringProperty, small: boolean = false) {\n    const mediaType = property.urlMediaType || property.storageMeta?.mediaType;\n    if (mediaType === \"image\") {\n        return renderImageThumbnail(small);\n    } else if (mediaType === \"audio\") {\n        return renderUrlAudioComponent();\n    } else if (mediaType === \"video\") {\n        return renderUrlVideo(small);\n    }\n    throw Error(\"URL component misconfigured\");\n}\n\n\nexport function renderSkeletonText() {\n    return <Skeleton variant=\"text\"/>;\n}\n\nexport function renderSkeletonIcon() {\n    return <Skeleton variant=\"rect\" width={24} height={24}/>;\n}\n\n","import { StringProperty } from \"../models\";\nimport React, { ReactElement, useEffect } from \"react\";\nimport { getDownloadURL } from \"../firebase\";\nimport { renderImageThumbnail } from \"./SkeletonComponent\";\n\ninterface StorageThumbnailProps {\n    storagePath: string | undefined;\n    property: StringProperty;\n    small: boolean;\n    renderUrlComponent: (property: StringProperty, url: any, small: boolean) => ReactElement;\n}\n\nexport default function StorageThumbnail({ storagePath, property, renderUrlComponent, small }: StorageThumbnailProps) {\n\n    const [url, setUrl] = React.useState<string>();\n\n    useEffect(() => {\n        if (storagePath)\n            getDownloadURL(storagePath).then(function(downloadURL) {\n                console.debug(\"File available at\", downloadURL);\n                setUrl(downloadURL);\n            });\n    }, [storagePath]);\n\n    return url ?\n        renderUrlComponent(property, url, small) :\n        renderImageThumbnail(small);\n}\n","import * as React from \"react\";\nimport { useEffect } from \"react\";\n\nimport { Box, List, ListItem } from \"@material-ui/core\";\nimport { Entity, EntitySchema } from \"../models\";\nimport * as firebase from \"firebase\";\nimport { listenEntityFromRef } from \"../firebase\";\nimport { PreviewComponentProps } from \"./PreviewComponentProps\";\nimport SkeletonComponent from \"./SkeletonComponent\";\nimport LinkIcon from \"@material-ui/icons/Link\";\n\nexport interface ReferencePreviewProps<S extends EntitySchema> {\n\n    reference: firebase.firestore.DocumentReference;\n\n    schema: S;\n\n    previewComponent: React.FunctionComponent<PreviewComponentProps<any>>;\n\n}\n\nexport default function ReferencePreview<S extends EntitySchema>(\n    {\n        reference,\n        schema,\n        previewComponent\n    }: ReferencePreviewProps<S>) {\n\n    if (!reference)\n        throw Error(\"Reference previews should be initialized with a value\");\n\n    const [entity, setEntity] = React.useState<Entity<S>>();\n\n    useEffect(() => {\n        const cancel = listenEntityFromRef<S>(reference, schema, (e => {\n            setEntity(e);\n        }));\n        return () => cancel();\n    }, [reference, schema]);\n\n\n    let listProperties = Object.entries(schema.properties).filter(([_, property]) => property.includeAsMapPreview);\n    if (!listProperties.length) {\n        listProperties = Object.entries(schema.properties).slice(0, 3);\n    }\n\n\n    return (\n        <Box display={\"flex\"}>\n\n            <Box mt={1.5}><LinkIcon color={\"disabled\"}/></Box>\n\n            <List>\n                {listProperties.map(([key, property]) => (\n                    <ListItem key={\"ref_prev\" + property.title + key}>\n                        {entity ?\n                            React.createElement(previewComponent, {\n                                value: entity.values[key],\n                                property: property,\n                                small: true\n                            })\n                            :\n                            <SkeletonComponent property={property}\n                                               small={true}/>\n                        }\n                    </ListItem>\n                ))}\n            </List>\n        </Box>\n    );\n\n}\n","import {\n    ArrayProperty,\n    EntitySchema,\n    EnumType,\n    EnumValues,\n    MapProperty,\n    Properties,\n    Property,\n    ReferenceProperty,\n    StringProperty\n} from \"../models\";\nimport React from \"react\";\nimport * as firebase from \"firebase\";\nimport {\n    Box,\n    CardMedia,\n    Chip,\n    Divider,\n    Grid,\n    List,\n    ListItem,\n    Table,\n    TableBody,\n    TableCell,\n    TableRow,\n    Typography\n} from \"@material-ui/core\";\nimport StorageThumbnail from \"./StorageThumbnail\";\nimport ReferencePreview from \"./ReferencePreview\";\nimport { PreviewComponentProps } from \"./PreviewComponentProps\";\n\nexport default function PreviewComponent<T>({\n                                                value,\n                                                property,\n                                                small\n                                            }: PreviewComponentProps<T>\n) {\n\n    if (!value) return null;\n\n    if (!property) {\n        console.error(\"No property assigned for preview component\", value, property, small);\n    }\n\n    let content: JSX.Element | any;\n    if (property.dataType === \"string\" && typeof value === \"string\") {\n        const stringProperty = property as StringProperty;\n        if (stringProperty.urlMediaType) {\n            content = renderUrlComponent(stringProperty, value, small);\n        } else if (stringProperty.storageMeta) {\n            content = renderStorageThumbnail(stringProperty, value as string, small);\n        } else if (stringProperty.enumValues) {\n            content = stringProperty.enumValues[value];\n        } else {\n            content = value;\n        }\n    } else if (property.dataType === \"array\" && value instanceof Array) {\n        const arrayProperty = property as ArrayProperty<any>;\n        if (arrayProperty.of.dataType === \"map\")\n            content = renderArrayOfMaps(arrayProperty.of.properties, value);\n        else if (arrayProperty.of.dataType === \"string\") {\n            if (arrayProperty.of.enumValues) {\n                content = renderArrayEnumTableCell(\n                    arrayProperty.of.enumValues,\n                    value\n                );\n            } else if (arrayProperty.of.storageMeta) {\n                content = renderGenericArray(arrayProperty.of, value);\n            } else {\n                content = renderArrayOfStrings(value);\n            }\n        } else {\n            content = renderGenericArray(arrayProperty.of, value);\n        }\n    } else if (property.dataType === \"map\" && typeof value === \"object\") {\n        content = renderMap(property as MapProperty<any>, value);\n    } else if (property.dataType === \"timestamp\" && value instanceof Date) {\n        content = value && value.toLocaleString();\n    } else if (property.dataType === \"reference\" && value instanceof firebase.firestore.DocumentReference) {\n        content = value && renderReference(value, (property as ReferenceProperty<any>).schema);\n    } else if (property.dataType === \"boolean\") {\n        content = value ? \"Yes\" : \"No\";\n    } else {\n        content = typeof value === \"object\" ? (value as unknown as object).toString() : value;\n    }\n    return (content ? content : null);\n}\n\nfunction renderMap<T>(property: MapProperty<T>, value: T) {\n    let listProperties = Object.entries(property.properties).filter(\n        ([_, property]) => property.includeAsMapPreview\n    );\n    if (!listProperties.length) {\n        listProperties = Object.entries(property.properties).slice(0, 3);\n    }\n\n    return (\n        <List>\n            {listProperties.map(([key, property]) => (\n                <ListItem key={property.title + key}>\n                    <PreviewComponent value={value[key] as any}\n                                      property={property}\n                                      small={true}/>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nfunction renderArrayOfMaps(properties: Properties, values: any[]) {\n    let tableProperties = Object.entries(properties).filter(\n        ([_, property]) => property.includeAsMapPreview\n    );\n    if (!tableProperties.length) {\n        tableProperties = Object.entries(properties).slice(0, 3);\n    }\n\n    return (\n        <Table size=\"small\">\n            <TableBody>\n                {values &&\n                values.map((value, index) => {\n                    return (\n                        <TableRow key={`table_${value}_${index}`}>\n                            {tableProperties.map(\n                                ([key, property], index) => (\n                                    <TableCell\n                                        key={`table-cell-${key}`}\n                                        component=\"th\"\n                                    >\n                                        <PreviewComponent\n                                            value={value[key] as any}\n                                            property={property}\n                                            small={true}/>\n                                    </TableCell>\n                                )\n                            )}\n                        </TableRow>\n                    );\n                })}\n            </TableBody>\n        </Table>\n    );\n}\n\nfunction renderArrayOfStrings(values: string[]) {\n    if (values && !Array.isArray(values)) {\n        return <div>{`Unexpected value: ${values}`}</div>;\n    }\n    return (\n        <Grid>\n            {values &&\n            values.map((value, index) => (\n                <Chip\n                    size=\"small\"\n                    key={value}\n                    label={\n                        <Typography variant=\"caption\" color=\"textPrimary\">\n                            {value}\n                        </Typography>\n                    }\n                />\n            ))}\n        </Grid>\n    );\n}\n\nfunction renderArrayEnumTableCell<T extends EnumType>(\n    enumValues: EnumValues<T>,\n    values: T[]\n) {\n    return (\n        <Grid>\n            {values &&\n            values.map((value, index) =>\n                renderPreviewEnumChip(enumValues, value)\n            )}\n        </Grid>\n    );\n}\n\nfunction renderGenericArray<T extends EnumType>(\n    property: Property,\n    values: T[]\n) {\n    return (\n        <Grid>\n\n            {values &&\n            values.map((value, index) =>\n                <React.Fragment>\n                    <Box m={1}>\n                        <PreviewComponent value={value}\n                                          property={property}\n                                          small={true}/>\n                    </Box>\n                    {index < values.length - 1 && <Divider/>}\n                </React.Fragment>\n            )}\n        </Grid>\n    );\n}\n\nfunction renderUrlAudioComponent(value: any) {\n    return (\n        <audio controls src={value}>\n            Your browser does not support the\n            <code>audio</code> element.\n        </audio>\n    );\n}\n\nfunction renderUrlImageThumbnail(url: string,\n                                 small: boolean) {\n    return (\n        <Box\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            width={small ? 100 : 200}\n            height={small ? 100 : 200}>\n            <img src={url}\n                 style={{\n                     maxWidth: small ? 100 : 200,\n                     maxHeight: small ? 100 : 200\n                 }}/>\n        </Box>\n    );\n}\n\nfunction renderUrlVideo(url: string,\n                        small: boolean) {\n    return (\n        <CardMedia\n            style={{ maxWidth: small ? 300 : 500 }}\n            component=\"video\"\n            controls\n            image={url}\n        />\n    );\n}\n\nfunction renderReference(\n    ref: firebase.firestore.DocumentReference,\n    refSchema: EntitySchema\n) {\n    return (\n        <ReferencePreview\n            reference={ref}\n            schema={refSchema}\n            previewComponent={PreviewComponent}\n        />\n    );\n}\n\nexport function renderUrlComponent(property: StringProperty, url: any,\n                                   small: boolean = false) {\n    const mediaType = property.urlMediaType || property.storageMeta?.mediaType;\n    if (mediaType === \"image\") {\n        return renderUrlImageThumbnail(url, small);\n    } else if (mediaType === \"audio\") {\n        return renderUrlAudioComponent(url);\n    } else if (mediaType === \"video\") {\n        return renderUrlVideo(url, small);\n    }\n    throw Error(\"URL component misconfigured\");\n}\n\nexport function renderStorageThumbnail(\n    property: StringProperty,\n    storagePath: string | undefined,\n    small: boolean\n) {\n    return (\n        <StorageThumbnail\n            storagePath={storagePath}\n            property={property}\n            small={small}\n            renderUrlComponent={renderUrlComponent}\n        />\n    );\n}\n\nexport function renderPreviewEnumChip<T extends EnumType>(\n    enumValues: EnumValues<T>,\n    value: any\n) {\n    const label = enumValues[value as T];\n    return (\n        <Chip\n            size=\"small\"\n            key={value}\n            label={\n                <Typography\n                    variant=\"caption\"\n                    color={label ? \"textPrimary\" : \"error\"}\n                >\n                    {label || value}\n                </Typography>\n            }\n        />\n    );\n}\n\n","import React, { useEffect } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useStyles, useToolbarStyles } from \"../styles\";\nimport { Box, Grid, IconButton, TableContainer } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport {\n    AdditionalColumnDelegate,\n    Entity,\n    EntitySchema,\n    FilterValues,\n    Property\n} from \"../models\";\nimport { fetchEntity, listenCollection } from \"../firebase\";\nimport FilterPopup from \"./FilterPopup\";\nimport { TextSearchDelegate } from \"../text_search_delegate\";\nimport SearchBar from \"./SearchBar\";\nimport {\n    getCollectionTableProperties,\n    getFilterableProperties\n} from \"../util/properties\";\nimport PreviewComponent from \"../preview/PreviewComponent\";\nimport SkeletonComponent, { renderSkeletonText } from \"../preview/SkeletonComponent\";\n\ninterface CollectionTableProps<S extends EntitySchema> {\n    /**\n     * Absolute collection path\n     */\n    collectionPath: string;\n\n    /**\n     * Schema of the entity displayed by this collection\n     */\n    schema: S;\n\n    /**\n     * Show the toolbar in this collection\n     */\n    includeToolbar: boolean,\n\n    /**\n     * In case this table should have some filters set\n     */\n    initialFilter?: FilterValues<S>;\n\n    /**\n     * In case this table should have some filters set\n     */\n    paginationEnabled: boolean,\n\n    /**\n     * If a text search delegate is provided, a searchbar is displayed\n     */\n    textSearchDelegate?: TextSearchDelegate,\n\n    /**\n     * You can add additional columns to the collection view by implementing\n     * an additional column delegate.\n     */\n    additionalColumns?: AdditionalColumnDelegate<S>[];\n\n    /**\n     * Should the table add an edit button\n     */\n    onEntityEdit?(collectionPath: string, entity: Entity<S>): void;\n\n    /**\n     * Callback when anywhere on the table is clicked\n     */\n    onEntityClick?(collectionPath: string, entity: Entity<S>): void;\n\n    /**\n     * Callback when the delete button of an entity is clicked\n     */\n    onEntityDelete?(collectionPath: string, entity: Entity<S>): void;\n}\n\n/**\n * This component renders a collection of entities in tabular format.\n * @param props\n * @constructor\n */\nexport default function CollectionTable<S extends EntitySchema>(props: CollectionTableProps<S>) {\n\n    const classes = useStyles();\n\n    const [data, setData] = React.useState<Entity<S>[]>([]);\n    const [dataLoading, setDataLoading] = React.useState<boolean>();\n    const [dataLoadingError, setDataLoadingError] = React.useState<Error | undefined>();\n\n    const [textSearchInProgress, setTextSearchInProgress] = React.useState<boolean>(false);\n    const [textSearchLoading, setTextSearchLoading] = React.useState<boolean>(false);\n    const [textSearchData, setTextSearchData] = React.useState<Entity<S>[]>([]);\n\n    const [filter, setFilter] = React.useState<FilterValues<S> | undefined>(props.initialFilter);\n    const [order, setOrder] = React.useState<Order>();\n    const [orderBy, setOrderBy] = React.useState<string>();\n    const [page, setPage] = React.useState<number>(0);\n    const [pageKeys, setPageKeys] = React.useState<any[]>([]);\n    const [rowsPerPage, setRowsPerPage] = React.useState<number | undefined>(props.paginationEnabled ? 10 : undefined);\n\n    useEffect(() => {\n        const startAfter = pageKeys[page];\n        setDataLoading(true);\n\n        const cancelSubscription = listenCollection<S>(\n            props.collectionPath,\n            props.schema,\n            entities => {\n                setDataLoading(false);\n                setDataLoadingError(undefined);\n                if (entities.length) {\n                    const lastEntity = entities[entities.length - 1];\n                    pageKeys[page + 1] = orderBy ? lastEntity.values[orderBy] : lastEntity.snapshot;\n                }\n                setData(entities);\n            },\n            (error) => {\n                setDataLoading(false);\n                setDataLoadingError(error);\n            },\n            filter,\n            rowsPerPage,\n            startAfter,\n            orderBy,\n            order);\n\n        return () => cancelSubscription();\n    }, [props.collectionPath, props.schema, rowsPerPage, page, order, orderBy, pageKeys, filter]);\n\n    const resetPagination = () => {\n        setPage(0);\n        setPageKeys([]);\n    };\n\n    const handleRequestSort = (event: React.MouseEvent<unknown>, property: string) => {\n        resetPagination();\n        const isDesc = orderBy === property && order === \"desc\";\n        const isAsc = orderBy === property && order === \"asc\";\n        setOrder(isDesc ? \"asc\" : (isAsc ? undefined : \"desc\"));\n        setOrderBy(isAsc ? undefined : property);\n    };\n\n    const onEntityClick = (event: React.MouseEvent<HTMLTableRowElement>, entity: Entity<S>) => {\n        if (props.onEntityClick) {\n            event.stopPropagation();\n            props.onEntityClick(props.collectionPath, entity);\n        }\n    };\n\n    const onEntityEdit = (event: React.MouseEvent<HTMLButtonElement>, entity: Entity<S>) => {\n        if (props.onEntityEdit) {\n            event.stopPropagation();\n            props.onEntityEdit(props.collectionPath, entity);\n        }\n    };\n\n    const onEntityDelete = (event: React.MouseEvent<HTMLButtonElement>, entity: Entity<S>) => {\n        if (props.onEntityDelete) {\n            event.stopPropagation();\n            props.onEntityDelete(props.collectionPath, entity);\n        }\n    };\n\n    const onFilterUpdate = (filterValues: FilterValues<S>) => {\n        setFilter(filterValues);\n    };\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const emptyRows = rowsPerPage ? data.length - rowsPerPage : 0;\n    const tableViewFields = getCollectionTableProperties(props.schema.properties);\n\n    const hasEditButton = !!props.onEntityEdit;\n    const hasDeleteButton = !!props.onEntityDelete;\n\n    const buildTableRowButtons = <S extends EntitySchema>(entity: Entity<S> | null, index: number) => (\n        <TableCell key={`row-buttons-${index}`}>\n            <Box minWidth={96}>\n                {hasEditButton && (\n                    <IconButton aria-label=\"edit\"\n                                disabled={!entity}\n                                onClick={(event) => entity && onEntityEdit(event, entity)}>\n                        <EditIcon color={\"action\"}/>\n                    </IconButton>\n                )}\n\n                {hasDeleteButton && (\n                    <IconButton aria-label=\"delete\"\n                                disabled={!entity}\n                                onClick={(event) => entity && onEntityDelete(event, entity)}>\n                        <DeleteIcon/>\n                    </IconButton>\n                )}\n            </Box>\n\n            <Box maxWidth={96}\n                 component=\"div\"\n                 textAlign=\"center\"\n                 textOverflow=\"ellipsis\"\n                 overflow=\"auto\">\n                {entity ?\n                    <Typography variant={\"caption\"}> {entity.id} </Typography>\n                    :\n                    renderSkeletonText()\n                }\n            </Box>\n\n        </TableCell>\n    );\n\n    function buildTableRow<S extends EntitySchema>(entity: Entity<S>, index: number) {\n        return (\n            <TableRow\n                key={`table_${entity.snapshot.id}_${index}`}\n                hover\n                onClick={(event) => onEntityClick(event, entity)}\n                tabIndex={-1}\n            >\n\n                {buildTableRowButtons(entity, index)}\n\n                {tableViewFields\n                    .map(([key, field], index) =>\n                        renderTableCell(index, entity.values[key], key, field))}\n\n                {props.additionalColumns && props.additionalColumns\n                    .map((delegate, index) =>\n                        renderCustomTableCell(index, delegate.builder(entity)))}\n\n            </TableRow>\n        );\n    }\n\n\n    function buildTableRowSkeleton<S extends EntitySchema>(index: number) {\n        const buttonsCell = buildTableRowButtons(null, index);\n\n        return (\n            <TableRow\n                key={`table_row_skeleton_${index}`}\n                tabIndex={-1}\n            >\n\n                {buttonsCell}\n\n                {tableViewFields\n                    .map(([key, field], index) =>\n                        renderTableSkeletonCell(index, key, field))}\n\n                {props.additionalColumns && props.additionalColumns\n                    .map((delegate, index) =>\n                        renderSkeletonText())}\n\n            </TableRow>\n        );\n    }\n\n    const skeletonBody = <TableBody>\n        {[0, 1, 2, 3, 4]\n            .map((_, index) => {\n                return buildTableRowSkeleton(index);\n            })}\n    </TableBody>;\n\n    const tableBody = <TableBody>\n        {textSearchInProgress && textSearchData\n            .map((entity, index) => {\n                return buildTableRow(entity, index);\n            })}\n\n        {!textSearchInProgress && data\n            .map((entity, index) => {\n                return buildTableRow(entity, index);\n            })}\n\n        {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n                <TableCell colSpan={tableViewFields.length}/>\n            </TableRow>\n        )}\n    </TableBody>;\n\n    const body =\n        (dataLoading || textSearchLoading) ? skeletonBody : tableBody;\n\n    const textSearchEnabled = !!props.textSearchDelegate;\n\n    async function onTextSearch(searchString?: string) {\n        if (textSearchEnabled) {\n            setTextSearchLoading(true);\n            const textSearchDelegate = props.textSearchDelegate as TextSearchDelegate;\n            if (!searchString) {\n                setTextSearchData([]);\n                setTextSearchInProgress(false);\n            } else {\n                setTextSearchInProgress(true);\n                const ids = await textSearchDelegate.performTextSearch(searchString);\n                const promises: Promise<Entity<S>>[] = ids\n                    .map((id) => fetchEntity(props.collectionPath, id, props.schema));\n                const entities = await Promise.all(promises);\n                setTextSearchData(entities);\n            }\n            setTextSearchLoading(false);\n        }\n    }\n\n    return (\n\n        <TableContainer component={Paper} elevation={1}>\n\n            {props.includeToolbar &&\n            <CollectionTableToolbar schema={props.schema}\n                                    filterValues={filter}\n                                    onTextSearch={textSearchEnabled ? onTextSearch : undefined}\n                                    collectionPath={props.collectionPath}\n                                    onFilterUpdate={onFilterUpdate}/>}\n\n            {dataLoadingError &&\n            <Box m={5}>\n                <Grid container spacing={2} justify=\"center\">\n                    <Grid container justify=\"center\">\n                        <Typography\n                            variant={\"h6\"}\n                            color={\"error\"}>{dataLoadingError.name}</Typography>\n                    </Grid>\n                    <Grid container justify=\"center\">\n                        <Typography\n                            color={\"error\"}>{dataLoadingError.message}</Typography>\n                    </Grid>\n                </Grid>\n            </Box>}\n\n            {!dataLoadingError &&\n            <div className={classes.tableWrapper}>\n                <Table stickyHeader\n                       className={classes.table}\n                       aria-labelledby=\"tableTitle\"\n                       size={\"medium\"}\n                       aria-label=\"enhanced table\"\n                >\n                    <CollectionTableHead\n                        classes={classes}\n                        schema={props.schema}\n                        order={order}\n                        orderBy={orderBy}\n                        sortable={!textSearchData.length}\n                        additionalColumns={props.additionalColumns}\n                        onRequestSort={handleRequestSort}\n                    />\n                    {body}\n                </Table>\n            </div>\n            }\n\n            {props.paginationEnabled && !textSearchInProgress && rowsPerPage &&\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={Infinity}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                backIconButtonProps={{\n                    \"aria-label\": \"previous page\"\n                }}\n                nextIconButtonProps={{\n                    \"aria-label\": \"next page\"\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n            }\n\n        </TableContainer>\n    );\n}\n\n\ntype Order = \"asc\" | \"desc\" | undefined;\n\ninterface CollectionTableHeadProps<S extends EntitySchema> {\n    classes: ReturnType<typeof useStyles>;\n    onRequestSort: (event: React.MouseEvent<unknown>, property: string) => void;\n    order?: Order;\n    orderBy?: string;\n    sortable: boolean;\n    schema: S;\n    additionalColumns?: AdditionalColumnDelegate<S>[];\n}\n\ninterface HeadCell {\n    index: number;\n    id: string;\n    label: string;\n    align: \"right\" | \"left\";\n}\n\nfunction CollectionTableHead<S extends EntitySchema>({\n                                                         classes,\n                                                         order,\n                                                         orderBy,\n                                                         sortable,\n                                                         onRequestSort,\n                                                         schema,\n                                                         additionalColumns\n                                                     }: CollectionTableHeadProps<S>) {\n\n\n    const createSortHandler = (property: string) => (event: React.MouseEvent<unknown>) => {\n        onRequestSort(event, property);\n    };\n\n    const headCells: HeadCell[] = getCollectionTableProperties(schema.properties)\n        .map(([key, field], index) => ({\n            index: index,\n            id: key,\n            align: getCellAlignment(field),\n            label: field.title || key\n        }));\n\n    return (\n        <TableHead>\n            <TableRow>\n\n                <TableCell\n                    key={\"header-id\"}\n                    align={\"center\"}\n                    padding={\"default\"}>Id</TableCell>\n\n                {headCells.map(headCell => {\n                    const active = sortable && orderBy === headCell.id;\n                    return (\n                        <TableCell\n                            key={headCell.id}\n                            align={headCell.align}\n                            padding={\"default\"}\n                            sortDirection={active ? order : false}\n                        >\n                            <TableSortLabel\n                                active={active}\n                                direction={order}\n                                onClick={createSortHandler(headCell.id)}\n                            >\n                                {headCell.label}\n                                {active ?\n                                    <span className={classes.visuallyHidden}>\n                                         {order === \"desc\" ? \"Sorted descending\" : (order === \"asc\" ? \"Sorted ascending\" : \"\")}\n                                    </span>\n                                    : null}\n                            </TableSortLabel>\n                        </TableCell>\n                    );\n                })}\n\n                {additionalColumns && additionalColumns.map((additionalColumn, index) => {\n                    return (\n                        <TableCell\n                            key={`head-additional-${index}`}\n                            align={\"left\"}\n                            padding={\"default\"}\n                        >\n                            {additionalColumn.title}\n                        </TableCell>\n                    );\n                })}\n\n            </TableRow>\n        </TableHead>\n    );\n}\n\ninterface CollectionTableToolbarProps<S extends EntitySchema> {\n    collectionPath: string;\n    schema: S;\n    filterValues?: FilterValues<S>;\n    onTextSearch?: (searchString?: string) => void;\n\n    onFilterUpdate?(filterValues: FilterValues<S>): void;\n}\n\nfunction CollectionTableToolbar<S extends EntitySchema>(props: CollectionTableToolbarProps<S>) {\n    const classes = useToolbarStyles();\n\n    const filterableProperties = getFilterableProperties(props.schema.properties);\n\n    return (\n        <Toolbar\n            className={classes.root}\n        >\n\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"space-between\"\n                alignItems=\"center\"\n            >\n\n                <Grid item>\n                    <Box className={classes.title}>\n                        <Typography variant=\"h6\">\n                            All {props.schema.name}\n                        </Typography>\n                        <Typography variant={\"caption\"}>\n                            {props.collectionPath}\n                        </Typography>\n                    </Box>\n                </Grid>\n                <Grid item>\n                    {props.onTextSearch &&\n                    <Box className={classes.searchBar}>\n                        <SearchBar\n                            onTextSearch={props.onTextSearch}/>\n                    </Box>\n                    }\n                </Grid>\n                <Grid item>\n                    {props.onFilterUpdate && filterableProperties.length > 0 &&\n                    <FilterPopup schema={props.schema}\n                                 filterValues={props.filterValues}\n                                 onFilterUpdate={props.onFilterUpdate}/>\n                    }\n                </Grid>\n            </Grid>\n\n\n        </Toolbar>\n    );\n}\n\n\nfunction renderTableCell(index: number, value: any, key: string, property: Property) {\n    return (\n        <TableCell key={`table-cell-${key}`} component=\"th\"\n                   align={getCellAlignment(property)}>\n\n            <PreviewComponent value={value}\n                              property={property}\n                              small={false}/>\n        </TableCell>\n    );\n}\n\nfunction renderTableSkeletonCell(index: number, key: string, property: Property) {\n    return (\n        <TableCell key={`table-cell-${key}`} component=\"th\"\n                   align={getCellAlignment(property)}>\n\n            <SkeletonComponent\n                property={property}\n                small={false}/>\n        </TableCell>\n    );\n}\n\nfunction renderCustomTableCell(index: number, element: React.ReactNode) {\n    return (\n        <TableCell key={`table-additional-${index}`} component=\"th\">\n            {element}\n        </TableCell>\n    );\n}\n\nfunction getCellAlignment(property: Property): \"right\" | \"left\" {\n    return property.dataType === \"number\" || property.dataType === \"timestamp\" ? \"right\" : \"left\";\n}\n\n","import { EntityCollectionView } from \"../models\";\nimport hash from \"object-hash\";\n\nconst DATA_PATH = `/c`;\n\nexport type RouteType = \"entity\" | \"collection\";\n\nexport interface PathConfiguration {\n    entityPlaceholderPath: string; // path with placeholders instead of ids\n    view: EntityCollectionView<any>;\n    entries: {\n        routeType: RouteType;\n        placeHolderId:string;\n        fullPath: string;\n    }[];\n    breadcrumbs: BreadcrumbEntry[];\n}\n\nexport interface BreadcrumbEntry {\n    entityPlaceholderPath: string; // path with placeholders instead of ids\n    view: EntityCollectionView<any>;\n    placeHolderId?: string;\n}\n\n/**\n * Generate all paths related to a list of entity views\n * @param entityCollectionView\n * @param basePath\n * @param previousBreadcrumbs\n */\nexport function getAllPaths(entityCollectionView: EntityCollectionView<any>[],\n                            basePath: string = \"\",\n                            previousBreadcrumbs: BreadcrumbEntry[] = []): PathConfiguration[] {\n\n    const pathConfigurations: PathConfiguration[] = [];\n    entityCollectionView.forEach((view) => {\n\n        const viewPath = removeInitialSlash(view.relativePath);\n        const path = removeInitialSlash(`${basePath}/${viewPath}`);\n        const placeHolderId = getPlaceHolderIdForView(path || \"\", view);\n        const entityPath = `${path}/:${placeHolderId}`;\n\n        const breadcrumbs = [\n            ...previousBreadcrumbs,\n            {\n                entityPlaceholderPath: path,\n                view\n            },\n            {\n                entityPlaceholderPath: entityPath,\n                placeHolderId,\n                view\n            }];\n\n        const pathConfiguration: PathConfiguration = {\n            entries: [\n                {\n                    routeType: \"entity\",\n                    placeHolderId,\n                    fullPath: `${path}/new`\n                },\n                {\n                    routeType: \"entity\",\n                    placeHolderId,\n                    fullPath: entityPath\n                },\n                {\n                    routeType: \"collection\",\n                    placeHolderId,\n                    fullPath: path\n                }\n            ],\n            breadcrumbs: breadcrumbs,\n            entityPlaceholderPath: path,\n            view\n        };\n\n        // The order in which this routes are added matters\n        if (view.schema.subcollections) {\n            getAllPaths(view.schema.subcollections, entityPath, breadcrumbs)\n                .forEach((pathConfiguration) => pathConfigurations.push(pathConfiguration));\n        }\n        pathConfigurations.push(pathConfiguration);\n    });\n    return pathConfigurations;\n}\n\nexport function replacePathIdentifiers(params: Record<string, string>, basePath: string) {\n    let replacedPath = basePath;\n    Object.entries(params).forEach(([key, value]) => replacedPath = replacedPath.replace(`:${key}`, value));\n    return replacedPath;\n}\n\nexport function getPlaceHolderIdForView(basePath: string, view: EntityCollectionView<any>): string {\n    return hash({ basePath, ...view }).slice(0, 10);\n}\n\nexport function getEntityPath(entityId: string, basePath: string) {\n    return `${DATA_PATH}/${basePath}/${entityId}`;\n}\n\nexport function getRouterNewEntityPath(basePath: string) {\n    return `${DATA_PATH}/${basePath}/new`;\n}\n\nexport function buildDataPath(absolutePath:string){\n    return `${DATA_PATH}/${removeInitialSlash(absolutePath)}`;\n\n}\n\nexport function removeInitialSlash(s: string) {\n    if (s.startsWith(\"/\"))\n        return s.slice(1);\n    else return s;\n}\n\nexport function addInitialSlash(s: string) {\n    if (s.startsWith(\"/\"))\n        return s;\n    else return `/${s}`;\n}\n","import firebase from \"firebase\";\nimport * as React from \"react\";\nimport { TextSearchDelegate } from \"./text_search_delegate\";\nimport { CMSFieldProps } from \"./form/form_props\";\n\n/**\n * This interface represents a view that includes a collection of entities.\n * It can be in the root level of the configuration, defining the main\n * menu navigation.\n */\nexport interface EntityCollectionView<S extends EntitySchema> {\n\n    /**\n     * Plural name of the view. E.g. 'products'\n     */\n    name: string;\n\n    /**\n     * Relative Firestore path of this view to its parent.\n     * If this view is in the root the path is equal to the absolute one.\n     * This path also determines the URL in FireCMS\n     */\n    relativePath: string;\n\n    /**\n     * Schema representing the entities of this view\n     */\n    schema: S;\n\n    /**\n     * Is pagination enabled in this view. True if not specified\n     */\n    pagination?: boolean;\n\n    /**\n     * You can add additional columns to the collection view by implementing\n     * an additional column delegate.\n     */\n    additionalColumns?: AdditionalColumnDelegate<S>[];\n\n    /**\n     * If a text search delegate is supplied, a search bar is displayed on top\n     */\n    textSearchDelegate?: TextSearchDelegate;\n\n    /**\n     * Can the elements in this collection be deleted. Defaults to true\n     */\n    deleteEnabled?: boolean;\n\n    /**\n     * Following the Firestore document and collection schema, you can add\n     * subcollections to your entity in the same way you define the root\n     * collections.\n     */\n    subcollections?: EntityCollectionView<any>[];\n}\n\n/**\n * Specification for defining an entity\n */\nexport interface EntitySchema {\n\n    /**\n     * Singular name of the entity as displayed in an Add button . E.g. Product\n     */\n    name: string;\n\n    /**\n     * Description of this entity\n     */\n    description?: string;\n\n    /**\n     * If this property is not set Firestore will create a random ID.\n     * You can set the value to true to allow the users to choose the ID.\n     * You can also pass a set of values (as an EnumValues object) to allow them\n     * to pick from only those\n     */\n    customId?: boolean | EnumValues<string>;\n\n    /**\n     * Set of properties that compose an entity\n     */\n    properties: Properties;\n\n}\n\n/**\n * New or existing status\n */\nexport enum EntityStatus { new = \"new\", existing = \"existing\"}\n\n/**\n * Representation of an entity fetched from Firestore\n */\nexport interface Entity<S extends EntitySchema> {\n    id: string;\n    snapshot: firebase.firestore.DocumentSnapshot;\n    reference: firebase.firestore.DocumentReference;\n    values: EntityValues<S>\n}\n\n/**\n * This type represents a record of key value pairs as described in an\n * entity schema.\n */\nexport type EntityValues<S extends EntitySchema> = {\n    [K in keyof S[\"properties\"]]: S[\"properties\"][K] extends Property<infer X> ? X : never\n};\n\ntype DataType =\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"map\"\n    | \"array\"\n    | \"timestamp\"\n    | \"geopoint\"\n    | \"reference\";\n\nexport type MediaType =\n    | \"image\"\n    | \"video\"\n    | \"audio\";\n\nexport type Property<T = any, ArrayT = any> =\n    T extends string ? StringProperty :\n        T extends number ? NumberProperty :\n            T extends boolean ? BooleanProperty :\n                T extends firebase.firestore.Timestamp ? TimestampProperty :\n                    T extends firebase.firestore.GeoPoint ? GeopointProperty :\n                        T extends firebase.firestore.DocumentReference ? ReferenceProperty<EntitySchema> :\n                            T extends Array<ArrayT> ? ArrayProperty<ArrayT> :\n                                MapProperty<T>;\n\n/**\n * Use this interface for adding additional columns to entity collection views.\n * If you need to do some async loading you can use AsyncPreviewComponent\n */\nexport interface AdditionalColumnDelegate<S extends EntitySchema> {\n\n    title: string;\n\n    builder: (entity:Entity<S>) => React.ReactNode;\n\n}\n\n/**\n * Interface including all common properties of a CMS property\n */\nexport interface BaseProperty<T> {\n\n    /**\n     * Firestore datatype of the property\n     */\n    dataType: DataType;\n\n    /**\n     * Property title (e.g. Product)\n     */\n    title?: string;\n\n    /**\n     * Property description\n     */\n    description?: string;\n\n    /**\n     * Rules for validating this property\n     */\n    validation?: PropertyValidationSchema,\n\n    /**\n     * Is this property displayed in the collection view\n     */\n    includeInListView?: boolean;\n\n    /**\n     * When the entity is rendered as the target of a reference or as part of a\n     * map, should this property be included.\n     * Basically, if it is rendered in second level references.\n     * e.g: One entity -> Array property -> This property\n     * If includeAsMapPreview is not specified in any property of an entity, when\n     * the given entity is rendered, the first 3 properties are displayed.\n     */\n    includeAsMapPreview?: boolean;\n\n    /**\n     * Should this property have a filter entry in the collection view.\n     * Defaults to false\n     */\n    filterable?: boolean;\n\n    /**\n     * Is this a read only property\n     */\n    disabled?: boolean;\n\n    /**\n     * If you need to render a custom field.\n     */\n    customField?: React.ComponentType<CMSFieldProps<T>>;\n\n    /**\n     * Additional props that are passed to the default field generated by\n     * FireCMS or to the customField\n     */\n    additionalProps?: any;\n}\n\nexport type EnumType = number | string ;\n\n/**\n * We use this interface to define mapping between string or number values in\n * Firestore to a label (such in a select dropdown)\n * The key in this Record is the value saved in Firetore, and the value in\n * this record is the label displayed in the UI\n */\nexport type EnumValues<T extends EnumType> = Record<T, string>; // id -> Label\n\n/**\n * Record of properties of an entity or a map property\n */\nexport type Properties = Record<string, Property>;\n\n/**\n * Rules to validate a property\n */\nexport interface PropertyValidationSchema {\n    required?: boolean;\n    requiredMessage?: string;\n}\n\nexport interface NumberProperty extends BaseProperty<number> {\n    dataType: \"number\";\n\n    /**\n     * You can use the enum values providing a map of possible\n     * exclusive values the property can take, mapped to the label that it is\n     * displayed in the dropdown.\n     */\n    enumValues?: EnumValues<number>;\n}\n\nexport interface BooleanProperty extends BaseProperty<boolean> {\n    dataType: \"boolean\";\n}\n\nexport interface TimestampProperty extends BaseProperty<firebase.firestore.Timestamp> {\n    dataType: \"timestamp\";\n}\n\n// TODO: currently this is the only unsupported field\nexport interface GeopointProperty extends BaseProperty<firebase.firestore.GeoPoint> {\n    dataType: \"geopoint\";\n}\n\nexport interface ReferenceProperty<S extends EntitySchema> extends BaseProperty<firebase.firestore.DocumentReference> {\n\n    dataType: \"reference\";\n\n    /**\n     * Absolute collection path.\n     */\n    collectionPath: string;\n\n    /**\n     * Schema of the entity this reference points to.\n     */\n    schema: S,\n\n    /**\n     * When the dialog for selecting the value of this reference, should\n     * a filter be applied to the possible entities.\n     */\n    filter?: FilterValues<S>;\n}\n\nexport interface StringProperty extends BaseProperty<string> {\n\n    dataType: \"string\";\n\n    /**\n     * You can specify a `StorageMeta` configuration. It is used to\n     * indicate that this string refers to a path in Google Cloud Storage.\n     */\n    storageMeta?: StorageMeta;\n\n    /**\n     * If the value of this property is a URL, we can use the urlMediaType\n     * to render the content\n     */\n    urlMediaType?: MediaType;\n\n    /**\n     * You can use the enum values providing a map of possible\n     * exclusive values the property can take, mapped to the label that it is\n     * displayed in the dropdown.\n     */\n    enumValues?: EnumValues<string>;\n}\n\nexport interface ArrayProperty<T> extends BaseProperty<T[]> {\n\n    dataType: \"array\";\n\n    /**\n     * The property of this array. You can specify any property.\n     */\n    of: Property<T>;\n}\n\nexport interface MapProperty<T> extends BaseProperty<T> {\n\n    dataType: \"map\";\n\n    /**\n     * Record of properties included in this map.\n     */\n    properties: Properties;\n}\n\n/**\n * Additional configuration related to Storage related fields\n */\nexport interface StorageMeta {\n\n    /**\n     * Media type of this reference, used for displaying the preview\n     */\n    mediaType: MediaType;\n\n    /**\n     * Absolute path in you bucket\n     */\n    storagePath: string;\n\n    /**\n     * File MIME types that can be uploaded to this reference\n     */\n    acceptedFiles?: StorageFileTypes[];\n}\n\n/**\n * MIME types for storage fields\n */\nexport type StorageFileTypes =\n    \"image/*\"\n    | \"video/*\"\n    | \"audio/*\"\n    | \"application/*\"\n    | \"text/*\"\n    | \"font/*\" ;\n\n/**\n * Used to define filters applied in collections\n */\nexport type FilterValues<S extends EntitySchema> = { [K in keyof Partial<S[\"properties\"]>]: [WhereFilterOp, any] };\n\n/**\n * Filter conditions in a `Query.where()` clause are specified using the\n * strings '<', '<=', '==', '>=', '>', 'array-contains', 'in', and 'array-contains-any'.\n */\nexport type WhereFilterOp =\n    | \"<\"\n    | \"<=\"\n    | \"==\"\n    | \">=\"\n    | \">\"\n    | \"array-contains\"\n    | \"in\"\n    | \"array-contains-any\";\n","import * as React from \"react\";\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableRow\n} from \"@material-ui/core\";\nimport { Entity, EntitySchema } from \"../models\";\nimport PreviewComponent from \"./PreviewComponent\";\n\nexport interface EntityPreviewProps<S extends EntitySchema> {\n\n    entity: Entity<S>;\n\n    schema: S;\n\n}\n\nexport default function EntityPreview<S extends EntitySchema>(\n    {\n        entity,\n        schema\n    }: EntityPreviewProps<S>) {\n\n    return (\n        <TableContainer >\n            <Table aria-label=\"simple table\">\n                <TableBody>\n                    <TableRow key={\"entity_prev_id\"}>\n                        <TableCell align=\"right\" component=\"th\" scope=\"row\">\n                            Id\n                        </TableCell>\n                        <TableCell>\n                            {entity.id}\n                        </TableCell>\n                    </TableRow>\n                    {Object.entries(schema.properties).map(([key, property]) => (\n                        <TableRow key={\"entity_prev\" + property.title + key}>\n                            <TableCell align=\"right\" component=\"th\" scope=\"row\">\n                                {property.title}\n                            </TableCell>\n                            <TableCell>\n                                <PreviewComponent value={entity.values[key]}\n                                                  property={property}\n                                                  small={false}/>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n\n}\n","import { Entity, EntitySchema } from \"../models\";\nimport React, { useState } from \"react\";\nimport { deleteEntity } from \"../firebase/firestore\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { DialogContent, Snackbar } from \"@material-ui/core\";\nimport EntityPreview from \"../preview/EntityPreview\";\nimport { CircularProgressCenter } from \"../util\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport MuiAlert from \"@material-ui/lab/Alert/Alert\";\n\nexport interface DeleteEntityDialogProps<S extends EntitySchema> {\n    entity?: Entity<S>,\n    schema: S\n    open: boolean;\n    onClose: () => void;\n}\n\nexport default function DeleteEntityDialog<S extends EntitySchema>(props: DeleteEntityDialogProps<S>) {\n    const { entity, schema, onClose, open, ...other } = props;\n    const [loading, setLoading] = useState(false);\n    const [openSnackBar, setOpenSnackbar] = React.useState<boolean>(false);\n\n    const handleCancel = () => {\n        onClose();\n    };\n\n    const handleOk = () => {\n        if (entity) {\n            setOpenSnackbar(true);\n            setLoading(true);\n            deleteEntity(entity).then(_ => setLoading(false));\n            onClose();\n        }\n    };\n\n    return (\n        <React.Fragment>\n\n            <Dialog\n                disableBackdropClick\n                disableEscapeKeyDown\n                maxWidth=\"md\"\n                keepMounted\n                aria-labelledby=\"confirmation-dialog-title\"\n                open={open}\n                onBackdropClick={onClose}\n                {...other}\n            >\n                <DialogTitle id=\"confirmation-dialog-title\">\n                    Would you like to delete this {schema.name}?\n                </DialogTitle>\n\n                <DialogContent dividers>\n                    {entity && <EntityPreview entity={entity} schema={schema}/>}\n                </DialogContent>\n\n                {loading && <CircularProgressCenter/>}\n\n                {!loading &&\n                <DialogActions>\n                    <Button autoFocus onClick={handleCancel}\n                            color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleOk} color=\"primary\">\n                        Ok\n                    </Button>\n                </DialogActions>}\n\n            </Dialog>\n\n            <Snackbar open={openSnackBar} autoHideDuration={3000}\n                      onClose={(_) => setOpenSnackbar(false)}>\n                <MuiAlert elevation={6} variant=\"filled\"\n                          onClose={(_) => setOpenSnackbar(false)}>\n                    Deleted\n                </MuiAlert>\n            </Snackbar>\n\n        </React.Fragment>\n    );\n}\n\n","import { Entity, EntitySchema } from \"../models\";\nimport React, { useState } from \"react\";\nimport { deleteEntity } from \"../firebase/firestore\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { DialogContent, Snackbar } from \"@material-ui/core\";\nimport EntityPreview from \"../preview/EntityPreview\";\nimport { CircularProgressCenter } from \"../util\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport MuiAlert from \"@material-ui/lab/Alert/Alert\";\n\nexport interface EntityDetailDialogProps<S extends EntitySchema> {\n    entity?: Entity<S>,\n    schema: S\n    open: boolean;\n    onClose: () => void;\n}\n\nexport default function EntityDetailDialog<S extends EntitySchema>(props: EntityDetailDialogProps<S>) {\n    const { entity, schema, onClose, open, ...other } = props;\n\n    return (\n        <React.Fragment>\n\n            <Dialog\n                disableBackdropClick\n                disableEscapeKeyDown\n                maxWidth=\"md\"\n                keepMounted\n                aria-labelledby=\"confirmation-dialog-title\"\n                onBackdropClick={onClose}\n                open={open}\n                {...other}\n            >\n                <DialogTitle id=\"confirmation-dialog-title\">\n                   {schema.name}\n                </DialogTitle>\n\n                <DialogContent dividers>\n                    {entity && <EntityPreview entity={entity} schema={schema}/>}\n                </DialogContent>\n\n                <DialogActions>\n                    <Button onClick={onClose} color=\"primary\">\n                        Ok\n                    </Button>\n                </DialogActions>\n\n            </Dialog>\n\n\n        </React.Fragment>\n    );\n}\n\n","import React from \"react\";\nimport CollectionTable from \"../collection/CollectionTable\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Entity, EntityCollectionView, EntitySchema } from \"../models\";\nimport {\n    BreadcrumbEntry,\n    getEntityPath,\n    getRouterNewEntityPath,\n    replacePathIdentifiers\n} from \"./navigation\";\nimport {\n    Box,\n    Breadcrumbs,\n    Button,\n    Grid,\n    Link,\n    Typography\n} from \"@material-ui/core\";\nimport { Link as ReactLink } from \"react-router-dom\";\nimport { BreadcrumbContainer } from \"../util/BreadcrumbContainer\";\nimport DeleteEntityDialog from \"../collection/DeleteEntityDialog\";\nimport EntityDetailDialog from \"../preview/EntityDetailDialog\";\n\ninterface CollectionRouteProps<S extends EntitySchema> {\n    view: EntityCollectionView<S>;\n    entityPlaceholderPath: string,\n    breadcrumbs: BreadcrumbEntry[]\n}\n\nexport function CollectionRoute<S extends EntitySchema>({\n                                                            view,\n                                                            entityPlaceholderPath,\n                                                            breadcrumbs,\n                                                            match,\n                                                            history\n                                                        }\n                                                            : CollectionRouteProps<S> & RouteComponentProps) {\n    let collectionPath: string;\n\n    if (match) {\n        collectionPath = replacePathIdentifiers(match.params, entityPlaceholderPath);\n    } else {\n        throw Error(\"No match prop for some reason\");\n    }\n\n    const [entityClicked, setEntityClicked] = React.useState<Entity<S> | undefined>(undefined);\n    const [deleteEntityClicked, setDeleteEntityClicked] = React.useState<Entity<S> | undefined>(undefined);\n\n    function onEntityEdit(collectionPath: string, entity: Entity<S>) {\n        const entityPath = getEntityPath(entity.id, collectionPath);\n        history.push(entityPath);\n    }\n\n    const onEntityClick = (collectionPath: string, entity: Entity<S>) => {\n        setEntityClicked(entity);\n    };\n\n    const onEntityDelete = (collectionPath: string, entity: Entity<S>) => {\n        setDeleteEntityClicked(entity);\n    };\n\n    const deleteEnabled = view.deleteEnabled === undefined || view.deleteEnabled;\n    return (\n        <React.Fragment>\n\n            <Box mb={3}>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <BreadcrumbContainer>\n                            <Breadcrumbs aria-label=\"breadcrumb\">\n                                <Link color=\"inherit\" component={ReactLink}\n                                      to=\"/\">\n                                    Home\n                                </Link>\n                                <Typography\n                                    color=\"textPrimary\">{view.schema.name}</Typography>\n                            </Breadcrumbs>\n                        </BreadcrumbContainer>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Box textAlign=\"right\">\n                            <Button\n                                component={ReactLink}\n                                to={getRouterNewEntityPath(collectionPath)}\n                                size=\"large\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                            >\n                                Add {view.schema.name}\n                            </Button>\n                        </Box>\n                    </Grid>\n                </Grid>\n            </Box>\n\n            <Box mb={3}>\n                <Typography variant=\"h5\">{view.schema.name} List</Typography>\n            </Box>\n\n            <CollectionTable collectionPath={view.relativePath}\n                             schema={view.schema}\n                             textSearchDelegate={view.textSearchDelegate}\n                             includeToolbar={true}\n                             onEntityEdit={onEntityEdit}\n                             onEntityClick={onEntityClick}\n                             onEntityDelete={deleteEnabled ? onEntityDelete : undefined}\n                             additionalColumns={view.additionalColumns}\n                             paginationEnabled={view.pagination === undefined ? true : view.pagination}/>\n\n            {entityClicked &&\n            <EntityDetailDialog entity={entityClicked}\n                                schema={view.schema}\n                                open={!!entityClicked}\n                                onClose={() => setEntityClicked(undefined)}/>}\n\n            {deleteEntityClicked &&\n            <DeleteEntityDialog entity={deleteEntityClicked}\n                                schema={view.schema}\n                                open={!!deleteEntityClicked}\n                                onClose={() => setDeleteEntityClicked(undefined)}/>}\n\n        </React.Fragment>\n    );\n}\n","import { EnumType, EnumValues } from \"../../models\";\nimport { getIn } from \"formik\";\nimport {\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    MenuItem,\n    Select as MuiSelect\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nimport { CMSFieldProps } from \"../form_props\";\n\ntype SelectProps<T extends EnumType> = CMSFieldProps<T>;\n\nexport default function Select<T extends EnumType>({\n                                                       field,\n                                                       form: { isSubmitting, errors, touched, setFieldValue },\n                                                       property,\n                                                       createFormField,\n                                                       includeDescription,\n                                                       ...props\n                                                   }: SelectProps<T>) {\n\n    const enumValues = property.enumValues as EnumValues<T>;\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    const value = field.value;\n    return (\n        <FormControl\n            fullWidth\n            required={property.validation?.required}\n            error={showError}\n        >\n            <InputLabel\n                id={`${field.name}-label`}>{property.title || field.name}</InputLabel>\n\n            <MuiSelect labelId={`${field.name}-label`}\n                       value={!!value ? value : \"\"}\n                       onChange={(evt: any) => {\n                           const newValue = evt.target.value;\n                           return setFieldValue(\n                               field.name,\n                               newValue ? newValue : null\n                           );\n                       }}\n                       {...props}>\n\n                {Object.entries(enumValues).map(([key, value]) => (\n                    <MenuItem key={`select-${key}`}\n                              value={key}>{value as string}</MenuItem>\n                ))}\n            </MuiSelect>\n\n            {includeDescription && property.description &&\n            <FormHelperText>{property.description}</FormHelperText>}\n\n            {showError && <FormHelperText\n                id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n        </FormControl>\n    );\n}\n","import { EnumType, EnumValues } from \"../../models\";\nimport { getIn } from \"formik\";\nimport {\n    Checkbox,\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    ListItemText,\n    MenuItem,\n    Select as MuiSelect\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { CMSFieldProps } from \"../form_props\";\nimport { renderPreviewEnumChip } from \"../../preview/PreviewComponent\";\n\ntype ArrayEnumSelectProps<T extends EnumType> = CMSFieldProps<T[]>;\n\nexport default function ArrayEnumSelect<T extends EnumType>({\n                                                                field,\n                                                                form: { errors, touched, setFieldValue },\n                                                                property\n                                                            }: ArrayEnumSelectProps<T>) {\n\n    if (property.of.dataType !== \"string\" && property.of.dataType !== \"number\") {\n        throw Error(\"Field misconfiguration: array field of type string or number\");\n    }\n\n    const enumValues: EnumValues<number | string> | undefined = property.of.enumValues;\n    if (!enumValues) {\n        console.error(property);\n        throw Error(\"Field misconfiguration: array field of type string or number needs to have enumValues\");\n    }\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    return <FormControl\n        fullWidth\n        required={property.validation?.required}\n        error={showError}\n    >\n        <InputLabel\n            id={`${field.name}-label`}>{property.title || field.name}\n        </InputLabel>\n        <MuiSelect multiple\n                   labelId={`${field.name}-label`}\n                   value={!!field.value ? field.value : []}\n                   onChange={(evt: any) => {\n                       return setFieldValue(\n                           `${field.name}`,\n                           evt.target.value\n                       );\n                   }}\n                   renderValue={(selected: any) => (\n                       <div>\n                           {selected.map((value: any) => {\n                               return renderPreviewEnumChip(enumValues, value);\n                           })}\n                       </div>\n                   )}>\n            {Object.keys(enumValues).map(key => {\n                return (\n                    <MenuItem key={key} value={key}>\n                        <Checkbox\n                            checked={!!field.value && field.value.indexOf(key as any) > -1}/>\n                        <ListItemText\n                            primary={enumValues[key]}/>\n                    </MenuItem>\n                );\n            })}\n        </MuiSelect>\n        <FormHelperText>{fieldError}</FormHelperText>\n    </FormControl>;\n}\n","import * as React from \"react\";\nimport { useEffect } from \"react\";\n\nimport {\n    Box,\n    FormControl,\n    FormHelperText,\n    IconButton,\n    LinearProgress,\n    Paper,\n    RootRef,\n    Snackbar,\n    Typography\n} from \"@material-ui/core\";\nimport MuiAlert from \"@material-ui/lab/Alert/Alert\";\n\nimport { uploadFile } from \"../../firebase\";\nimport firebase from \"firebase\";\nimport { formStyles } from \"../../styles\";\nimport {\n    ArrayProperty,\n    Property,\n    StorageMeta,\n    StringProperty\n} from \"../../models\";\nimport { getIn } from \"formik\";\n\nimport { CMSFieldProps } from \"../form_props\";\nimport { useDropzone } from \"react-dropzone\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport PreviewComponent from \"../../preview/PreviewComponent\";\n\ntype StorageUploadFieldProps = CMSFieldProps<string | string[]> ;\n\n/**\n * Internal representation of an item in the storage field.\n * It can have two states, having a storagePath set, which means the file has\n * been uploaded and it is rendered as a preview\n * Or have a pending file being uploaded.\n */\ninterface StorageFieldItem {\n    storagePath?: string;\n    file?: File;\n}\n\nexport default function StorageUploadField({\n                                               field,\n                                               form: { errors, touched, setFieldValue },\n                                               property,\n                                               includeDescription\n                                           }: StorageUploadFieldProps) {\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    const multipleFilesSupported = property.dataType === \"array\";\n\n    const value = multipleFilesSupported ?\n        (Array.isArray(field.value) ? field.value : []) :\n        field.value;\n\n    return (\n\n        <FormControl fullWidth\n                     required={property.validation?.required}\n                     error={showError}>\n\n            <FormHelperText filled\n                            required={property.validation?.required}>\n                {property.title || field.name}\n            </FormHelperText>\n\n            <StorageUpload value={value}\n                           property={property}\n                           onChange={(newValue) => setFieldValue(\n                               field.name,\n                               newValue\n                           )}/>\n\n            {includeDescription && property.description &&\n            <FormHelperText>{property.description}</FormHelperText>}\n\n            {showError && <FormHelperText\n                id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n        </FormControl>\n    );\n}\n\ninterface StorageUploadProps {\n    value: string | string[];\n    property: StringProperty | ArrayProperty<string>;\n    onChange: (value: string | string[] | null) => void;\n}\n\nexport function StorageUpload({\n                                  property,\n                                  value,\n                                  onChange\n                              }: StorageUploadProps) {\n\n    const multipleFilesSupported = property.dataType === \"array\";\n\n    if (multipleFilesSupported && (property as ArrayProperty<any>).of.dataType !== \"string\") {\n        throw Error(\"Storage field using array must be of data type string\");\n    }\n\n    const storageMeta: StorageMeta | undefined = property.dataType === \"string\" ? property.storageMeta :\n        property.dataType === \"array\" ? property.of.storageMeta :\n            undefined;\n\n    if (!storageMeta)\n        throw Error(\"Storage meta must be specified\");\n\n    const classes = formStyles();\n\n    const initialValue: StorageFieldItem[] = multipleFilesSupported ?\n        (value as string[]).map(v => (\n            {\n                storagePath: v\n            }\n        )) : [{\n            storagePath: value as string\n        }];\n\n    const [internalValue, setInternalValue] = React.useState<StorageFieldItem[]>(initialValue);\n\n    function removeDuplicates(items: StorageFieldItem[]) {\n        return items.filter(\n            (v, i) => {\n                return ((items.map((v) => v.storagePath).indexOf(v.storagePath) === i) || !v.storagePath)\n                    && ((items.map((v) => v.file).indexOf(v.file) === i) || !v.file);\n            }\n        );\n    }\n\n    const onDrop = (acceptedFiles: File[]) => {\n\n        let newInternalValue: StorageFieldItem[];\n        if (multipleFilesSupported) {\n            newInternalValue = [...internalValue, ...acceptedFiles.map(file => ({ file }))];\n        } else {\n            newInternalValue = [{ file: acceptedFiles[0] }];\n        }\n\n        // Remove either storage path or file duplicates\n        newInternalValue = removeDuplicates(newInternalValue);\n\n        setInternalValue(newInternalValue);\n    };\n\n    const onFileUploadComplete = (uploadedPath: string, file: File) => {\n        console.log(\"onFileUploadComplete\", uploadedPath, file);\n        let item: StorageFieldItem | undefined = internalValue.find(entry => entry.file === file || entry.storagePath === uploadedPath);\n        let newValue: StorageFieldItem[];\n        if (!item) {\n            item = {\n                storagePath: uploadedPath,\n                file: file\n            };\n            if (multipleFilesSupported)\n                newValue = [...internalValue, item];\n            else newValue = [item];\n        } else {\n            item.storagePath = uploadedPath;\n            item.file = file;\n            newValue = [...internalValue];\n        }\n        newValue = removeDuplicates(newValue);\n        setInternalValue(newValue);\n\n        const fieldValue = newValue.filter(e => !!e.storagePath).map(e => e.storagePath as string);\n\n        if (multipleFilesSupported) {\n            onChange(fieldValue);\n        }else{\n            onChange(fieldValue ? fieldValue[0] : null);\n        }\n    };\n\n    const onClear = (clearedStoragePath: string) => {\n        if (multipleFilesSupported) {\n            const newValue: StorageFieldItem[] = internalValue.filter(v => v.storagePath !== clearedStoragePath);\n            onChange(newValue.filter(v => !!v.storagePath).map(v => v.storagePath as string));\n            setInternalValue(newValue);\n        } else {\n            onChange(null);\n            setInternalValue([]);\n        }\n    };\n\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject\n    } = useDropzone({\n            accept: storageMeta.acceptedFiles,\n            onDrop: onDrop\n        }\n    );\n\n    const { ref, ...rootProps } = getRootProps();\n\n    return (\n\n\n        <RootRef rootRef={ref}>\n\n            <Paper elevation={0}\n                   {...rootProps}\n                   className={`${classes.dropZone} ${isDragActive ? classes.activeDrop : \"\"} ${isDragReject ? classes.rejectDrop : \"\"} ${isDragAccept ? classes.acceptDrop : \"\"}`}\n                   variant={\"outlined\"}>\n\n                <input {...getInputProps()} />\n\n                <Box display=\"flex\"\n                     flexDirection=\"row\"\n                     flexWrap=\"wrap\"\n                     alignItems=\"center\"\n                     minHeight={220}>\n\n                    {internalValue.map(entry => {\n                        if (entry.storagePath) {\n                            const renderProperty = multipleFilesSupported ? (property as ArrayProperty<string>).of : property;\n                            return <StorageItemPreview\n                                key={`storage_preview_${entry.storagePath}`}\n                                property={renderProperty}\n                                value={entry.storagePath}\n                                onClear={onClear}/>;\n                        } else if (entry.file) {\n                            return <StorageUploadProgress\n                                key={`storage_upload_${entry.file.name}`}\n                                file={entry.file}\n                                storagePath={storageMeta.storagePath}\n                                onFileUploadComplete={(value, file) => {\n                                    onFileUploadComplete(value, file);\n                                }}/>;\n                        }\n                        return null;\n                    })\n                    }\n\n                    <Box\n                        flexGrow={1}\n                        m={2}>\n                        <Typography color={\"textSecondary\"}\n                                    variant={\"body2\"}\n                                    align={\"center\"}>\n                            Drag 'n' drop some\n                            files here, or click to\n                            select files\n                        </Typography>\n                    </Box>\n\n                </Box>\n\n            </Paper>\n        </RootRef>\n    );\n\n}\n\n\ninterface StorageUploadItemProps {\n    storagePath: string;\n    file: File,\n    onFileUploadComplete: (value: string, file: File) => void;\n}\n\nexport function StorageUploadProgress({\n                                          storagePath,\n                                          file,\n                                          onFileUploadComplete\n                                      }: StorageUploadItemProps) {\n\n    const classes = formStyles();\n\n    const [error, setError] = React.useState<string>();\n    const [progress, setProgress] = React.useState<number>(-1);\n    const [openErrorAlert, setOpenErrorAlert] = React.useState<boolean>(false);\n\n    useEffect(() => {\n        if (file)\n            upload(file);\n    }, []);\n\n    function upload(file: File) {\n\n        setError(undefined);\n        setProgress(0);\n\n        const uploadTask = uploadFile(file, storagePath);\n        uploadTask.on(\"state_changed\", (snapshot) => {\n            const currentProgress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            setProgress(currentProgress);\n            console.debug(\"Upload is \" + currentProgress + \"% done\");\n            switch (snapshot.state) {\n                case firebase.storage.TaskState.PAUSED: // or 'paused'\n                    console.debug(\"Upload is paused\");\n                    break;\n                case firebase.storage.TaskState.RUNNING: // or 'running'\n                    console.debug(\"Upload is running\");\n                    break;\n            }\n        }, (e: any) => {\n            console.error(\"Upload error\", e);\n            setError(e.message);\n            setProgress(-1);\n            setOpenErrorAlert(true);\n        }, () => {\n            const fullPath = uploadTask.snapshot.ref.fullPath;\n            setProgress(-1);\n            onFileUploadComplete(fullPath, file);\n        });\n    }\n\n    const handleCloseErrorAlert = (event?: React.SyntheticEvent, reason?: string) => {\n        setOpenErrorAlert(false);\n    };\n\n    return (\n\n        <React.Fragment>\n\n            <Box ml={2} mt={2} mb={2}>\n                <Paper elevation={0}\n                       className={classes.uploadItem}\n                       variant={\"outlined\"}>\n\n                    {progress > -1 &&\n                    <LinearProgress variant=\"indeterminate\"\n                                    value={progress}/>}\n\n                    {error && <p>Error uploading file: {error}</p>}\n\n                </Paper>\n            </Box>\n\n\n            <Snackbar open={openErrorAlert} autoHideDuration={3000}\n                      onClose={handleCloseErrorAlert}>\n                <MuiAlert elevation={6} variant=\"filled\"\n                          onClose={handleCloseErrorAlert}\n                          severity=\"error\">\n                    {error}\n                </MuiAlert>\n            </Snackbar>\n\n        </React.Fragment>\n    );\n\n}\n\ninterface StorageItemPreviewProps {\n    property: Property;\n    value: string,\n    onClear: (value: string) => void;\n}\n\nexport function StorageItemPreview({\n                                       property,\n                                       value,\n                                       onClear\n                                   }: StorageItemPreviewProps) {\n\n    const classes = formStyles();\n    return (\n        <Box ml={2} mt={2} mb={2} position={\"relative\"}>\n\n            <Paper\n                elevation={0}\n                className={classes.uploadItem}\n                variant={\"outlined\"}>\n\n                <Box position={\"absolute\"} top={4} right={4}>\n                    <IconButton\n                        style={{ backgroundColor: \"white\" }}\n                        onClick={(event) => {\n                            event.stopPropagation();\n                            onClear(value);\n                        }}>\n                        <ClearIcon fontSize={\"small\"}/>\n                    </IconButton>\n                </Box>\n\n                {value &&\n                <PreviewComponent value={value}\n                                  property={property}\n                                  small={false}/>}\n\n            </Paper>\n\n        </Box>\n    );\n\n}\n","import { MediaType, StringProperty } from \"../../models\";\nimport { getIn } from \"formik\";\nimport {\n    Box,\n    FormControl,\n    FormControlLabel,\n    FormHelperText,\n    Input,\n    InputLabel,\n    Switch,\n    Typography\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nimport { CMSFieldProps } from \"../form_props\";\nimport PreviewComponent from \"../../preview/PreviewComponent\";\n\ninterface TextFieldProps extends CMSFieldProps<string | number> {\n    allowInfinity?: boolean\n}\n\nexport default function TextField({\n                                      field,\n                                      form: { isSubmitting, errors, touched, setFieldValue },\n                                      property,\n                                      includeDescription,\n                                      allowInfinity,\n                                      createFormField,\n                                      ...props\n                                  }: TextFieldProps) {\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    let mediaType: MediaType | undefined;\n    if (property.dataType === \"string\")\n        mediaType = (property as StringProperty).urlMediaType;\n\n    const value = field.value ? field.value : \"\";\n    const updateValue = (newValue: typeof value) => {\n\n        if (!newValue) {\n            setFieldValue(\n                field.name,\n                null\n            );\n        } else if (inputType === \"number\") {\n            const numValue = parseFloat(newValue);\n            setFieldValue(\n                field.name,\n                numValue\n            );\n        } else {\n            setFieldValue(\n                field.name,\n                newValue\n            );\n        }\n    };\n\n    const valueIsInfinity = value === Infinity;\n    const inputType = !valueIsInfinity && property.dataType === \"number\" ? \"number\" : undefined;\n    return (\n        <React.Fragment>\n\n            <FormControl\n                required={property.validation?.required}\n                error={showError}\n                disabled={isSubmitting}\n                fullWidth>\n                <InputLabel>{property.title || field.name}</InputLabel>\n                <Input\n                    type={inputType}\n                    value={valueIsInfinity ? \"Infinity\" : value}\n                    {...props}\n                    disabled={valueIsInfinity}\n                    onChange={(evt) => {\n                        updateValue(evt.target.value);\n                    }}\n                />\n\n                {allowInfinity &&\n                <FormControlLabel\n                    checked={valueIsInfinity}\n                    labelPlacement={\"start\"}\n                    control={\n                        <Switch\n                            size={\"small\"}\n                            type={\"checkbox\"}\n                            onChange={(evt) => {\n                                updateValue(\n                                    evt.target.checked ? Infinity : undefined);\n                            }}/>\n                    }\n                    disabled={property.disabled || isSubmitting}\n                    label={\n                        <Typography variant={\"caption\"}>\n                            Set value to Infinity\n                        </Typography>\n                    }\n                />\n                }\n\n                {showError && <FormHelperText\n                    id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n                {includeDescription && property.description &&\n                <FormHelperText>{property.description}</FormHelperText>}\n\n            </FormControl>\n\n            {mediaType && value &&\n            <Box m={1}>\n                <PreviewComponent value={value}\n                                  property={property}\n                                  small={false}/>\n            </Box>\n            }\n        </React.Fragment>\n    );\n\n}\n","import {\n    FormControl,\n    FormControlLabel,\n    FormHelperText,\n    Switch\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nimport { CMSFieldProps } from \"../form_props\";\nimport { getIn } from \"formik\";\n\ntype SwitchFieldProps = CMSFieldProps<boolean>;\n\nexport default function SwitchField({\n                                        field,\n                                        form: { isSubmitting, errors, touched, setFieldValue },\n                                        property,\n                                        includeDescription,\n                                        createFormField,\n                                        ...props\n                                    }: SwitchFieldProps) {\n\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    return (\n        <React.Fragment>\n            <FormControlLabel\n                checked={field.value}\n                control={\n                    <Switch\n                        {...props}\n                        type={\"checkbox\"}\n                        onChange={(evt) => {\n                            setFieldValue(\n                                field.name,\n                                evt.target.checked\n                            );\n                        }}/>\n                }\n                disabled={property.disabled || isSubmitting}\n                label={property.title || field.name}\n            />\n\n            {includeDescription && property.description &&\n            <FormHelperText>{property.description}</FormHelperText>}\n\n            {showError && <FormHelperText\n                id=\"component-error-text\">{fieldError}</FormHelperText>}\n        </React.Fragment>\n    );\n}\n\n","import { getIn } from \"formik\";\nimport React from \"react\";\nimport { DateTimePicker } from \"@material-ui/pickers\";\n\nimport { CMSFieldProps } from \"../form_props\";\nimport firebase from \"firebase\";\n\ntype DateTimeFieldProps = CMSFieldProps<firebase.firestore.Timestamp> ;\n\nexport default function DateTimeField({\n                                          field,\n                                          form: { isSubmitting, errors, touched, setFieldValue },\n                                          property,\n                                          createFormField,\n                                          includeDescription,\n                                          ...props\n                                      }: DateTimeFieldProps) {\n\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    const value = field.value;\n\n    return (\n        <DateTimePicker\n            fullWidth\n            clearable\n            value={value}\n            label={property.title || field.name}\n            error={showError}\n            disabled={property.disabled !== undefined ? property.disabled : isSubmitting}\n            helperText={showError ? fieldError : property.description}\n            onChange={(dateValue) => setFieldValue(\n                field.name,\n                dateValue\n            )}\n            {...props}\n        />\n    );\n}\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { EntitySchema } from \"../models\";\nimport { CircularProgressCenter } from \"../util\";\n\nexport interface AsyncPreviewComponentProps<S extends EntitySchema> {\n\n    builder: Promise<React.ReactNode>;\n\n}\n\n/**\n * Utility component used to render the result of an async execution.\n * It shows a loading indicator while at it.\n *\n * @param buildComponent that needs to do some async\n * @constructor\n */\nexport default function AsyncPreviewComponent<S extends EntitySchema>(\n    {\n        builder\n    }: AsyncPreviewComponentProps<S>): JSX.Element {\n\n    const [loading, setLoading] = useState<boolean>(true);\n    const [result, setResult] = useState<React.ReactNode>(null);\n\n    useEffect(() => {\n        builder\n            .then((res) => {\n                setLoading(false);\n                setResult(res);\n            })\n            .catch(error => {\n                setLoading(false);\n                console.error(error);\n            });\n    }, [builder]);\n\n    if (loading)\n        return <CircularProgressCenter/>;\n\n    return <React.Fragment>{result}</React.Fragment>;\n\n}\n","import { Entity, EntitySchema, FilterValues } from \"../../models\";\nimport { getIn } from \"formik\";\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogTitle,\n    FormControl,\n    FormHelperText,\n    Grid,\n    IconButton,\n    Paper,\n    Tooltip,\n    Typography\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { formStyles } from \"../../styles\";\nimport ReferencePreview from \"../../preview/ReferencePreview\";\nimport ClearIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\nimport CollectionTable from \"../../collection/CollectionTable\";\nimport { CMSFieldProps } from \"../form_props\";\nimport firebase from \"firebase\";\nimport { PreviewComponent } from \"../../preview\";\n\ntype ReferenceFieldProps<S extends EntitySchema> = CMSFieldProps<firebase.firestore.DocumentReference> ;\n\nexport default function ReferenceField<S extends EntitySchema>({\n                                                                   field,\n                                                                   form: { isSubmitting, errors, touched, setFieldValue },\n                                                                   property,\n                                                                   includeDescription\n                                                               }: ReferenceFieldProps<S>) {\n\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    const value = field.value;\n\n    const handleEntityClick = (entity: Entity<S>) => {\n        const ref = entity ? entity.reference : null;\n        setFieldValue(field.name, ref);\n    };\n\n    const classes = formStyles();\n    const title = property.title || field.name;\n    return (\n        <FormControl error={showError} fullWidth>\n            <Paper elevation={0} className={classes.paper}\n                   variant={\"outlined\"}>\n                <Box my={1}>\n                    <Typography variant=\"caption\"\n                                display=\"block\"\n                                gutterBottom>\n                        {title}\n                    </Typography>\n                </Box>\n                <ReferenceDialog value={value}\n                                 title={title}\n                                 collectionPath={property.collectionPath}\n                                 schema={property.schema}\n                                 initialFilter={property.filter}\n                                 onEntityClick={handleEntityClick}/>\n            </Paper>\n\n            {includeDescription && property.description &&\n            <Box>\n                <FormHelperText>{property.description}</FormHelperText>\n            </Box>}\n\n            {showError && <FormHelperText\n                id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n        </FormControl>\n    );\n}\n\n\nexport interface ReferenceDialogProps<S extends EntitySchema> {\n\n    value: any;\n\n    title: string,\n\n    /**\n     * Absolute collection path\n     */\n    collectionPath: string,\n\n    /**\n     * In case this table should have some filters set\n     */\n    initialFilter?: FilterValues<S>;\n\n    schema: S;\n\n    onEntityClick(entity?: Entity<S>): void;\n}\n\nexport function ReferenceDialog<S extends EntitySchema>(\n    {\n        onEntityClick,\n        value,\n        title,\n        schema,\n        initialFilter,\n        collectionPath\n    }: ReferenceDialogProps<S>) {\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleEntityClick = (collectionPath: string, entity: Entity<S>) => {\n        setOpen(false);\n        onEntityClick(entity);\n    };\n\n    const clearValue = () => {\n        setOpen(false);\n        onEntityClick(undefined);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <React.Fragment>\n            <Grid\n                justify=\"space-between\"\n                container\n                spacing={2}>\n                <Grid item>\n                    {value &&\n                    <ReferencePreview\n                        reference={value}\n                        schema={schema}\n                        previewComponent={PreviewComponent}/>}\n                    {!value &&\n                    <Box>No value set</Box>}\n                </Grid>\n                <Box display=\"inline\">\n                    {value &&\n                    <Tooltip title=\"Clear\">\n                        <IconButton\n                            aria-label=\"clear\"\n                            onClick={clearValue}>\n                            <ClearIcon/>\n                        </IconButton>\n                    </Tooltip>}\n                    <Button variant=\"outlined\"\n                            color=\"primary\"\n                            onClick={handleClickOpen}>\n                        {value ? \"Edit\" : \"Set\"}\n                    </Button>\n                </Box>\n            </Grid>\n\n            <Dialog\n                onClose={handleClose}\n                maxWidth={\"xl\"}\n                open={open}>\n                <DialogTitle>Select {title}</DialogTitle>\n                <CollectionTable collectionPath={collectionPath}\n                                 schema={schema}\n                                 includeToolbar={false}\n                                 onEntityClick={handleEntityClick}\n                                 paginationEnabled={false}\n                                 initialFilter={initialFilter}\n                />\n                <DialogActions>\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n        </React.Fragment>\n    );\n\n}\n\n","import { EntitySchema } from \"../../models\";\nimport {\n    Box,\n    FormControl,\n    FormHelperText,\n    Grid,\n    Paper\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { formStyles } from \"../../styles\";\n\nimport { CMSFieldProps } from \"../form_props\";\n\ntype MapFieldProps<S extends EntitySchema> = CMSFieldProps<object>;\n\nexport default function MapField<S extends EntitySchema>({\n                                                             field,\n                                                             form: { isSubmitting, errors, touched, setFieldValue },\n                                                             property,\n                                                             includeDescription,\n                                                             createFormField,\n                                                             ...props\n                                                         }: MapFieldProps<S>) {\n\n    const classes = formStyles();\n\n    const mapProperties = property.properties;\n    const hasError = touched && property.validation?.required && !field.value;\n\n    return (\n        <FormControl fullWidth error={hasError}>\n\n            <FormHelperText filled\n                            required={property.validation?.required}>\n                {property.title || field.name}\n            </FormHelperText>\n\n            <Paper elevation={0} variant={\"outlined\"} className={classes.paper}>\n                <Box m={1}>\n                    <Grid container spacing={1}>\n                        {Object.entries(mapProperties).map(([entryKey, childProperty], index) => {\n                                const fieldValue = field.value ? field.value[entryKey] : null;\n                                return <Grid item xs={12}\n                                             key={`map-${field.name}-${index}`}>\n                                    {createFormField(`${field.name}[${entryKey}]`,\n                                        childProperty,\n                                        includeDescription)}\n                                </Grid>;\n                            }\n                        )}\n                    </Grid>\n                </Box>\n            </Paper>\n\n            {includeDescription && property.description &&\n            <FormHelperText>{property.description}</FormHelperText>\n            }\n\n        </FormControl>\n    );\n}\n","import { Property } from \"../../models\";\nimport { FieldArray, getIn } from \"formik\";\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    IconButton,\n    Paper\n} from \"@material-ui/core\";\nimport { Add, Remove } from \"@material-ui/icons\";\nimport { formStyles } from \"../../styles\";\nimport { CMSFieldProps } from \"../form_props\";\nimport React from \"react\";\n\ntype ArrayDefaultFieldProps<T> = CMSFieldProps<T[]>;\n\nexport default function ArrayDefaultField<T>({\n                                                 field,\n                                                 form: { errors, touched },\n                                                 property,\n                                                 createFormField,\n                                                 includeDescription\n                                             }: ArrayDefaultFieldProps<T>) {\n\n    const classes = formStyles();\n\n    const ofProperty: Property = property.of;\n\n    const hasValue = field.value && field.value.length > 0;\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    return <FieldArray\n        name={field.name}\n        render={arrayHelpers =>\n            (\n\n                <FormControl fullWidth error={showError}>\n\n                    <FormHelperText filled\n                                    required={property.validation?.required}>\n                        {property.title || field.name}\n                    </FormHelperText>\n\n                    <Paper variant={\"outlined\"}\n                           className={classes.paper}>\n                        {hasValue ? (\n                            <React.Fragment>\n                                {field.value.map((entryValue: any, index: number) => {\n                                    const errorElement = errors && errors[index];\n                                    const touchedElement = touched && touched[index];\n                                    return (\n                                        <Box key={`field_${index}`}\n                                             mb={1}\n                                             display={\"flex\"}>\n                                            <Box flexGrow={1}\n                                                 key={`field_${field.name}_entryValue`}>\n                                                {createFormField(`${field.name}[${index}]`, ofProperty, includeDescription)}\n                                            </Box>\n                                            <Box>\n                                                <IconButton\n                                                    aria-label=\"remove\"\n                                                    onClick={() => arrayHelpers.remove(index)}>\n                                                    <Remove/>\n                                                </IconButton>\n                                            </Box>\n                                            <Box>\n                                                <IconButton\n                                                    aria-label=\"insert\"\n                                                    onClick={() => arrayHelpers.insert(index + 1, undefined)}>\n                                                    <Add/>\n                                                </IconButton>\n                                            </Box>\n                                        </Box>\n                                    );\n                                })}\n                            </React.Fragment>\n                        ) : (\n                            <Box margin={2}>\n                                <Button\n                                    onClick={() => arrayHelpers.push(null)}>\n                                    {/* show this when user has removed all entries from the list */}\n                                    Add\n                                </Button>\n                            </Box>\n                        )}\n                    </Paper>\n\n                    {includeDescription && property.description &&\n                    <Box>\n                        <FormHelperText>{property.description}</FormHelperText>\n                    </Box>}\n\n                    {showError && <FormHelperText\n                        id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n                </FormControl>\n            )}\n    />;\n}\n","import { MapProperty, Properties } from \"../../models\";\nimport { FieldArray, getIn } from \"formik\";\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    IconButton,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableRow\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { Add, Remove } from \"@material-ui/icons\";\nimport { formStyles } from \"../../styles\";\nimport { CMSFieldProps } from \"../form_props\";\n\ntype ArrayMapFieldProps<T> = CMSFieldProps<T[]>;\n\nexport default function ArrayMapField<T>({\n                                             field,\n                                             form: { errors, touched },\n                                             property,\n                                             createFormField,\n                                             includeDescription\n                                         }: ArrayMapFieldProps<T>) {\n\n    if (property.of.dataType !== \"map\") {\n        console.error(property);\n        throw Error(\"Field misconfiguration: this array field should have type map\");\n    }\n\n    const classes = formStyles();\n    const mapProperty: MapProperty<T> = property.of as MapProperty<T>;\n    const properties: Properties = mapProperty.properties;\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    return <FieldArray\n        name={field.name}\n        render={arrayHelpers => {\n\n            const hasValue = field.value && field.value.length > 0;\n            const error = touched && property.validation?.required && !field.value;\n\n            return (\n\n                <FormControl fullWidth error={error}>\n\n                    <FormHelperText filled\n                                    required={property.validation?.required}>\n                        {property.title || field.name}\n                    </FormHelperText>\n\n                    <Paper elevation={0} className={classes.paper}>\n\n                        {hasValue ? (\n                            <Table>\n                                <TableBody>\n                                    {field.value.map((entryValue: any, index: number) => (\n                                        <TableRow key={`field_${index}`}>\n                                            {Object.entries(properties).map(([arrayKey, childProperty]) => {\n                                                return (\n                                                    <TableCell\n                                                        key={`field_${arrayKey}`}>\n                                                        {createFormField(`${field.name}[${index}].${arrayKey}`,\n                                                            childProperty,\n                                                            includeDescription)}\n                                                    </TableCell>\n                                                );\n                                            })}\n                                            <TableCell size={\"small\"}\n                                                       padding={\"none\"}>\n                                                <IconButton aria-label=\"remove\"\n                                                            onClick={() => arrayHelpers.remove(index)}>\n                                                    <Remove/>\n                                                </IconButton>\n                                            </TableCell>\n                                            <TableCell size={\"small\"}\n                                                       padding={\"none\"}>\n                                                <IconButton aria-label=\"insert\"\n                                                            onClick={() => arrayHelpers.insert(index + 1, {})}>\n                                                    <Add/>\n                                                </IconButton>\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        ) : (\n                            <Box margin={2}>\n                                <Button onClick={() => arrayHelpers.push(null)}>\n                                    {/* show this when user has removed all entries from the list */}\n                                    Add\n                                </Button>\n                            </Box>\n                        )}\n                    </Paper>\n\n                    {includeDescription && property.description &&\n                    <Box>\n                        <FormHelperText>{property.description}</FormHelperText>\n                    </Box>}\n\n                    {showError && <FormHelperText\n                        id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n                </FormControl>\n            );\n        }}\n    />;\n\n}\n","import { EntitySchema } from \"../../models\";\nimport { Box, FormControl, FormHelperText, Paper } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formStyles } from \"../../styles\";\nimport { CMSFieldProps } from \"../form_props\";\nimport PreviewComponent from \"../../preview/PreviewComponent\";\n\ntype DisabledFieldProps = CMSFieldProps<any> ;\n\nexport default function DisabledField<S extends EntitySchema>({ field, property, includeDescription }: DisabledFieldProps) {\n\n    const classes = formStyles();\n\n    return (\n\n        <FormControl fullWidth disabled={true}>\n\n            <FormHelperText filled\n                            required={property.validation?.required}>\n                {property.title || field.name}\n            </FormHelperText>\n\n            <Paper elevation={0} className={classes.paper} variant={\"outlined\"}>\n                {field.value &&\n                <PreviewComponent value={field.value}\n                                  property={property}\n                                  small={false}/>}\n                {!field.value && <Box m={1}>No value set</Box>}\n            </Paper>\n\n            {includeDescription && property.description &&\n            <FormHelperText>{property.description}</FormHelperText>\n            }\n\n        </FormControl>\n    );\n}\n","import React from \"react\";\nimport {\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select as MuiSelect,\n    TextField as MuiTextField\n} from \"@material-ui/core\";\nimport { EntitySchema, EntityStatus, Property } from \"../models\";\n\nimport { ErrorMessage, Field, FieldProps } from \"formik\";\n\nimport Select from \"./fields/Select\";\nimport ArrayEnumSelect from \"./fields/ArrayEnumSelect\";\nimport StorageUploadField from \"./fields/StorageUploadField\";\nimport TextField from \"./fields/TextField\";\nimport SwitchField from \"./fields/SwitchField\";\nimport DateTimeField from \"./fields/DateTimeField\";\nimport ReferenceField from \"./fields/ReferenceField\";\nimport MapField from \"./fields/MapField\";\nimport ArrayDefaultField from \"./fields/ArrayDefaultField\";\nimport ArrayMapField from \"./fields/ArrayMapField\";\nimport DisabledField from \"./fields/DisabledField\";\nimport { CMSFieldProps } from \"./form_props\";\n\n\nexport function createFormField(name: string,\n                                property: Property,\n                                includeDescription: boolean): JSX.Element {\n\n    if (property.disabled) {\n        return buildField(name, property, includeDescription, DisabledField);\n    }\n\n    let component: React.ComponentType<CMSFieldProps<any>> | undefined;\n\n    if (property.customField) {\n        component = property.customField;\n    } else if (property.dataType === \"array\") {\n        if ((property.of.dataType === \"string\" || property.of.dataType === \"number\") && property.of.enumValues) {\n            component = ArrayEnumSelect;\n        } else if (property.of.dataType === \"string\" && property.of.storageMeta) {\n            component = StorageUploadField;\n        } else if (property.of.dataType === \"map\") {\n            component = ArrayMapField;\n        } else {\n            component = ArrayDefaultField;\n        }\n    } else if (property.dataType === \"map\") {\n        component = MapField;\n    } else if (property.dataType === \"reference\") {\n        component = ReferenceField;\n    } else if (property.dataType === \"timestamp\") {\n        component = DateTimeField;\n    } else if (property.dataType === \"boolean\") {\n        component = SwitchField;\n    } else if (property.dataType === \"number\") {\n        if (property.enumValues) {\n            component = Select;\n        } else {\n            component = TextField;\n        }\n    } else if (property.dataType === \"string\") {\n        if (property.storageMeta) {\n            component = StorageUploadField;\n        } else if (property.enumValues) {\n            component = Select;\n        } else {\n            component = TextField;\n        }\n    }\n    if (component)\n        return buildField(name, property, includeDescription, component, property.additionalProps);\n\n    return (\n        <div>{`Currently the field ${property.dataType} is not supported`}</div>\n    );\n}\n\nfunction buildField<P extends Property<T>, T = any>(name: string,\n                                                    property: P,\n                                                    includeDescription: boolean,\n                                                    component: React.ComponentType<CMSFieldProps<T>>,\n                                                    additionalProps?: any) {\n    return <Field\n        required={property.validation?.required}\n        name={`${name}`}\n    >\n        {(fieldProps: FieldProps<T>) =>\n            React.createElement(component, {\n                ...fieldProps,\n                ...additionalProps,\n                includeDescription,\n                property,\n                createFormField\n            })}\n\n    </Field>;\n}\n\n\nexport function createCustomIdField(schema: EntitySchema, formType: EntityStatus, onChange: Function, error: boolean, id: string | undefined) {\n\n    const disabled = formType !== EntityStatus.new || !schema.customId;\n\n    const hasEnumValues = typeof schema.customId === \"object\";\n\n    const fieldProps: any = {\n        label: (formType === EntityStatus.new && disabled) ? \"Id is set automatically\" : \"Id\",\n        disabled: disabled,\n        name: \"id\",\n        type: null,\n        value: id,\n        variant: \"outlined\"\n    };\n\n    return (\n        <FormControl fullWidth error={error} {...fieldProps}>\n\n            {hasEnumValues && schema.customId &&\n            <React.Fragment>\n                <InputLabel id={`id-label`}>{fieldProps.label}</InputLabel>\n                <MuiSelect\n                    labelId={`id-label`}\n                    error={error}\n                    {...fieldProps}\n                    onChange={(event: any) => onChange(event.target.value)}>\n                    {Object.entries(schema.customId).map(([key, label]) =>\n                        <MenuItem\n                            value={key}>{`${key} - ${label}`}</MenuItem>)}\n                </MuiSelect>\n            </React.Fragment>}\n\n            {!hasEnumValues &&\n            <MuiTextField {...fieldProps}\n                          error={error}\n                          onChange={(event) => onChange(event.target.value)}/>}\n\n            <ErrorMessage name={\"id\"}\n                          component=\"div\">{(s) => \"You need to specify an ID\"}</ErrorMessage>\n\n        </FormControl>\n    );\n}\n\nexport {\n    ArrayDefaultField,\n    ArrayEnumSelect,\n    ArrayMapField,\n    DateTimeField,\n    DisabledField,\n    MapField,\n    ReferenceField,\n    Select,\n    StorageUploadField,\n    SwitchField,\n    TextField\n};\n","import {\n    ArrayProperty,\n    BooleanProperty,\n    EntitySchema,\n    GeopointProperty,\n    NumberProperty,\n    Properties,\n    Property,\n    ReferenceProperty,\n    StringProperty,\n    TimestampProperty\n} from \"../models\";\nimport * as yup from \"yup\";\nimport {\n    ArraySchema,\n    BooleanSchema,\n    DateSchema,\n    NumberSchema,\n    ObjectSchema,\n    Schema,\n    StringSchema\n} from \"yup\";\n\n\nfunction mapPropertyToYup(property: Property): Schema<any> {\n    if (property.dataType === \"string\") {\n        return getYupStringSchema(property);\n    } else if (property.dataType === \"number\") {\n        return getYupNumberSchema(property);\n    } else if (property.dataType === \"boolean\") {\n        return getYupBooleanSchema(property);\n    } else if (property.dataType === \"map\") {\n        return getYupObjectSchema(property.properties);\n    } else if (property.dataType === \"array\") {\n        return getYupArraySchema(property);\n    } else if (property.dataType === \"timestamp\") {\n        return getYupDateSchema(property);\n    } else if (property.dataType === \"geopoint\") {\n        return getYupGeoPointSchema(property);\n    } else if (property.dataType === \"reference\") {\n        return getYupReferenceSchema(property);\n    }\n    throw Error(\"Unsupported data type in yup mapping\");\n}\n\nexport function getYupObjectSchema(properties: Properties): ObjectSchema<any> {\n    const objectSchema: any = {};\n    Object.entries(properties).forEach(([key, property]: [string, Property]) => {\n        objectSchema[key] = mapPropertyToYup(property);\n    });\n    return yup.object().shape(objectSchema);\n}\n\nfunction getYupStringSchema(property: StringProperty): StringSchema {\n    let schema: StringSchema<any> = yup.string();\n    const validation = property.validation;\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage)\n            .nullable(false);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    if (property.enumValues) {\n        schema = schema.oneOf(Object.keys(property.enumValues));\n    }\n    return schema;\n}\n\nfunction getYupNumberSchema(property: NumberProperty): NumberSchema {\n    const validation = property.validation;\n    let schema: NumberSchema<any> = yup.number()\n        .typeError(validation?.requiredMessage ? validation?.requiredMessage : \"Must be a number\");\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage).nullable(false);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupGeoPointSchema(property: GeopointProperty): ObjectSchema {\n    let schema: ObjectSchema<any> = yup.object();\n    const validation = property.validation;\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage)\n            .nullable(false);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupDateSchema(property: TimestampProperty): DateSchema {\n    let schema: DateSchema<any> = yup.date();\n    const validation = property.validation;\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage)\n            .nullable(false);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupReferenceSchema<S extends EntitySchema>(property: ReferenceProperty<S>): ObjectSchema {\n    let schema: ObjectSchema<any> = yup.object();\n    const validation = property.validation;\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage)\n            .nullable(false);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupBooleanSchema(property: BooleanProperty): BooleanSchema {\n    let schema: BooleanSchema<any> = yup.boolean();\n    const validation = property.validation;\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage)\n            .nullable(false);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupArraySchema<T>(property: ArrayProperty<T>): ArraySchema<T> {\n    let schema: ArraySchema<T> = yup.array().of(mapPropertyToYup(property.of));\n    const validation = property.validation;\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage)\n            .nullable(false);\n    }\n    return schema;\n}\n","import React from \"react\";\nimport { Box, Button, Container, Grid, Paper } from \"@material-ui/core\";\nimport { Entity, EntitySchema, EntityStatus, EntityValues } from \"../models\";\nimport { Form, Formik, FormikHelpers } from \"formik\";\nimport { formStyles } from \"../styles\";\nimport { createCustomIdField, createFormField } from \"./index\";\nimport { initEntityValues } from \"../firebase/firestore\";\nimport { getYupObjectSchema } from \"./validation\";\n\ninterface EntityFormProps<S extends EntitySchema> {\n\n    /**\n     * New or existing status\n     */\n    status: EntityStatus;\n\n    /**\n     * Path of the collection this entity is located\n     */\n    collectionPath: string;\n\n    /**\n     * Schema of the entity this form represents\n     */\n    schema: S;\n\n    /**\n     * The updated entity is passed from the parent component when the underlying data\n     * has changed in Firestore\n     */\n    entity?: Entity<S>;\n\n    /**\n     * The updated entity is passed from the parent component when the underlying data\n     * has changed in Firestore\n     */\n    updatedEntity?: Entity<S>;\n\n    /**\n     * The callback function called when Save is clicked and validation is correct\n     */\n    onEntitySave(collectionPath: string, id: string | undefined, values: any): Promise<void>;\n\n}\n\nexport default function EntityForm<S extends EntitySchema>({\n                                                               status,\n                                                               collectionPath,\n                                                               schema,\n                                                               entity,\n                                                               onEntitySave\n                                                           }: EntityFormProps<S>) {\n    const classes = formStyles();\n\n\n    const [customId, setCustomId] = React.useState<string | undefined>(undefined);\n    const [customIdError, setCustomIdError] = React.useState<boolean>(false);\n    const [savingError, setSavingError] = React.useState<any>();\n\n    const mustSetCustomId: boolean = status === EntityStatus.new && !!schema.customId;\n\n    let initialValues: EntityValues<S>;\n\n    if (status === EntityStatus.new) {\n        initialValues = initEntityValues(schema);\n    } else if (status === EntityStatus.existing && entity) {\n        initialValues = entity.values;\n    } else {\n        throw new Error(\"Form configured wrong\");\n    }\n\n    function createFormFields(schema: EntitySchema) {\n        return <React.Fragment>\n            {Object.entries(schema.properties).map(([key, property]) => {\n\n                const formField = createFormField(key, property, true);\n\n                if (property.dataType === \"array\" && property.of.dataType === \"map\") {\n                    return <Grid item xs={12}\n                                 key={`field_${schema.name}_${key}`}>\n                        {formField}\n                    </Grid>;\n                }\n\n                if (property.dataType === \"array\" && property.of.dataType === \"string\" && property.of.storageMeta) {\n                    return <Grid item xs={12}\n                                 key={`field_${schema.name}_${key}`}>\n                        {formField}\n                    </Grid>;\n                }\n\n                if (property.dataType === \"string\" && property.storageMeta) {\n                    return <Grid item xs={12}\n                                 key={`field_${schema.name}_${key}`}>\n                        {formField}\n                    </Grid>;\n                }\n\n                return <Grid item xs={12} sm={6}\n                             key={`field_${schema.name}_${key}`}>\n                    {formField}\n                </Grid>;\n            })}\n        </React.Fragment>;\n    }\n\n    function saveValues(values: EntityValues<S>, actions: FormikHelpers<EntityValues<S>>) {\n\n        if (mustSetCustomId && !customId) {\n            console.error(\"Missing custom Id\");\n            setCustomIdError(true);\n            actions.setSubmitting(false);\n            return;\n        }\n        setSavingError(null);\n        setCustomIdError(false);\n\n        let id: string | undefined;\n        if (status === EntityStatus.existing) {\n            if (!entity?.id) throw Error(\"Form misconfigured when saving, no id for existing entity\");\n            id = entity.id;\n        } else if (status === EntityStatus.new) {\n            if (schema.customId) {\n                if (!customId) throw Error(\"Form misconfigured when saving, customId should be set\");\n                id = customId;\n            }\n        } else {\n            throw Error(\"New FormType added, check EntityForm\");\n        }\n\n        onEntitySave(collectionPath, id, values)\n            .catch(e => {\n                console.error(e);\n                setSavingError(e);\n            })\n            .finally(() => {\n                actions.setSubmitting(false);\n            });\n\n    }\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            validate={(values => console.debug(\"validate\", values))}\n            onSubmit={saveValues}\n            validationSchema={getYupObjectSchema(schema.properties)}\n        >\n            {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting }) => {\n                return (\n                    <Paper elevation={1}>\n                        <Container maxWidth={\"md\"}\n                                   className={classes.formPaper}\n                                   disableGutters={true}>\n\n                            <Box margin={1}>\n                                {createCustomIdField(schema, status, setCustomId, customIdError, entity?.id)}\n                            </Box>\n\n                            <Form className={classes.form}\n                                  onSubmit={handleSubmit}\n                                  noValidate>\n\n                                <Box padding={1}>\n                                    <Grid container spacing={3}>\n                                        {createFormFields(schema)}\n                                    </Grid>\n                                </Box>\n\n                                {savingError &&\n                                <Box textAlign=\"right\">\n                                    {savingError}\n                                </Box>}\n                                <Box textAlign=\"right\">\n                                    {status === EntityStatus.existing &&\n                                    <Button\n                                        variant=\"text\"\n                                        color=\"primary\"\n                                        disabled={isSubmitting}\n                                        className={classes.button}\n                                        type=\"reset\"\n                                    >\n                                        Discard\n                                    </Button>}\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        type=\"submit\"\n                                        disabled={isSubmitting}\n\n                                        className={classes.button}\n                                    >\n                                        Save\n                                    </Button>\n                                </Box>\n                            </Form>\n\n                        </Container>\n                    </Paper>\n                );\n            }}\n        </Formik>\n    );\n}\n","import React from \"react\";\nimport { AppBar, Box, Button, Grid, Paper, Tab, Tabs } from \"@material-ui/core\";\nimport { Entity, EntityCollectionView, EntitySchema } from \"../models\";\nimport CollectionTable from \"./CollectionTable\";\nimport { Link as ReactLink } from \"react-router-dom\";\nimport { getRouterNewEntityPath } from \"../routes/navigation\";\nimport DeleteEntityDialog from \"./DeleteEntityDialog\";\n\n\ninterface SubCollectionViewProps<S extends EntitySchema> {\n\n    parentCollectionPath: string;\n    subcollections: EntityCollectionView<any>[];\n    entity?: Entity<S>;\n\n    onEntityClick?(collectionPath: string, entity: Entity<any>): void;\n}\n\ninterface TabPanelProps<S extends EntitySchema> {\n    subcollectionPath: string | undefined;\n    thisView: EntityCollectionView<S>;\n    selectedView: EntityCollectionView<S>;\n\n    onEntityClick?(collectionPath: string, entity: Entity<S>): void;\n}\n\nfunction TabPanel<S extends EntitySchema>({ subcollectionPath, selectedView, thisView, onEntityClick, ...props }: TabPanelProps<S>) {\n\n    const [deleteEntityClicked, setDeleteEntityClicked] = React.useState<Entity<S> | undefined>(undefined);\n\n    const onEntityDelete = (collectionPath: string, entity: Entity<S>) => {\n        setDeleteEntityClicked(entity);\n    };\n\n    const deleteEnabled = thisView.deleteEnabled !== undefined || thisView.deleteEnabled;\n\n    return <Grid\n        hidden={selectedView !== thisView}>\n\n        {subcollectionPath ?\n            <CollectionTable collectionPath={subcollectionPath}\n                             onEntityDelete={deleteEnabled ? onEntityDelete : undefined}\n                             schema={thisView.schema}\n                             onEntityEdit={onEntityClick}\n                             includeToolbar={false}\n                             paginationEnabled={false}\n                             additionalColumns={thisView.additionalColumns}\n            />\n            :\n            <Grid container>\n                <Box m={3}>You need to save your entity before adding additional\n                    collections</Box>\n            </Grid>}\n\n        <DeleteEntityDialog entity={deleteEntityClicked}\n                            schema={thisView.schema}\n                            open={!!deleteEntityClicked}\n                            onClose={() => setDeleteEntityClicked(undefined)}/>\n    </Grid>;\n}\n\nexport default function SubCollectionsView<S extends EntitySchema>(\n    {\n        parentCollectionPath,\n        subcollections,\n        entity,\n        onEntityClick\n    }: SubCollectionViewProps<S>) {\n\n    if (!subcollections) {\n        throw Error(\"Subcollection view must use a schema with subcollection entries\");\n    }\n\n    const firstSubcollection = Object.values(subcollections)[0];\n    const [selectedView, setSelectedView] = React.useState<EntityCollectionView<any>>(firstSubcollection);\n\n    function _onViewClicked(view: EntityCollectionView<any>) {\n        setSelectedView(view);\n    }\n\n    let subcollectionPath: string | undefined = undefined;\n    if (entity)\n        subcollectionPath = `${parentCollectionPath}/${entity.id}/${selectedView.relativePath}`;\n\n    return (\n        <Paper elevation={0}>\n            <AppBar position=\"static\" color={\"transparent\"} elevation={0}>\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"space-between\"\n                    alignItems=\"flex-end\"\n                >\n                    <Tabs value={selectedView}\n                          onChange={(e, value) => _onViewClicked(value)}>\n                        {Object.entries(subcollections).map(([key, view]) => (\n                            <Tab label={view.name} value={view}\n                                 key={`wrapped-tab-${key}`}/>\n                        ))}\n                    </Tabs>\n                    <Box m={1} textAlign=\"right\">\n                        {subcollectionPath && <Button\n                            component={ReactLink}\n                            to={getRouterNewEntityPath(subcollectionPath)}\n                            size=\"medium\"\n                            variant=\"outlined\"\n                            color=\"primary\"\n                        >\n                            Add {selectedView.schema.name}\n                        </Button>}\n                    </Box>\n                </Grid>\n            </AppBar>\n            {Object.entries(subcollections).map(([key, view]) => (\n                <TabPanel key={`wrapped-tab-content-${key}`}\n                          selectedView={selectedView}\n                          thisView={view}\n                          onEntityClick={onEntityClick}\n                          subcollectionPath={subcollectionPath}/>\n            ))}\n        </Paper>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport EntityForm from \"../form/EntityForm\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Link as ReactLink } from \"react-router-dom\";\nimport {\n    Entity,\n    EntityCollectionView,\n    EntitySchema,\n    EntityStatus\n} from \"../models\";\nimport { fetchEntity, saveEntity } from \"../firebase\";\nimport {\n    Box,\n    Breadcrumbs,\n    Link,\n    Snackbar,\n    Typography\n} from \"@material-ui/core\";\nimport {\n    BreadcrumbEntry,\n    buildDataPath,\n    getEntityPath,\n    getPlaceHolderIdForView,\n    replacePathIdentifiers\n} from \"./navigation\";\nimport { BreadcrumbContainer, CircularProgressCenter } from \"../util\";\nimport SubCollectionsView from \"../collection/SubCollectionsView\";\nimport MuiAlert from \"@material-ui/lab/Alert/Alert\";\n\ninterface EntityRouteProps<S extends EntitySchema> {\n    view: EntityCollectionView<S>;\n    entityPlaceholderPath: string,\n    breadcrumbs: BreadcrumbEntry[]\n}\n\ntype EntityParamsProps = Record<string, string>;\n\n\nexport function EntityFormRoute<S extends EntitySchema>({\n                                                            view,\n                                                            entityPlaceholderPath,\n                                                            breadcrumbs,\n                                                            match,\n                                                            history,\n                                                            ...props\n                                                        }: EntityRouteProps<S> & RouteComponentProps<EntityParamsProps>) {\n    let entityId: string | undefined;\n    let collectionPath: string;\n    let params: Record<string, string>;\n\n    const hashIdentifier = getPlaceHolderIdForView(entityPlaceholderPath, view);\n    params = match.params;\n    collectionPath = replacePathIdentifiers(params, entityPlaceholderPath);\n    entityId = params[hashIdentifier];\n\n    const [entity, setEntity] = useState<Entity<S>>();\n    const [status, setStatus] = useState<EntityStatus | undefined>();\n    const [loading, setLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        if (entityId) {\n            fetchEntity<S>(collectionPath, entityId, view.schema)\n                .then((e) => {\n                    setStatus(EntityStatus.existing);\n                    setEntity(e);\n                })\n                .finally(() => setLoading(false));\n        } else {\n            setStatus(EntityStatus.new);\n            setLoading(false);\n        }\n    }, [collectionPath, entityId, view]);\n\n    const backListener = history.listen(location => {\n        // console.log(\"new location\", location);\n        // if (location.action === \"POP\") {\n        //     // Do your stuff\n        // }\n    });\n\n    const handleCloseSuccessAlert = (event?: React.SyntheticEvent, reason?: string) => {\n        setOpenSuccessAlert(false);\n    };\n\n    const handleCloseErrorAlert = (event?: React.SyntheticEvent, reason?: string) => {\n        setOpenErrorAlert(undefined);\n    };\n\n    const [openSuccessAlert, setOpenSuccessAlert] = React.useState<boolean>(false);\n    const [openErrorAlert, setOpenErrorAlert] = React.useState<Error | undefined>(undefined);\n\n    function onSubcollectionEntityClick(collectionPath: string, entity: Entity<S>) {\n        const entityPath = getEntityPath(entity.id, collectionPath);\n        history.push(entityPath);\n    }\n\n    function onEntitySave(collectionPath: string, id: string | undefined, values: any): Promise<void> {\n        return saveEntity(collectionPath, id, values)\n            .then((id) => {\n                setOpenSuccessAlert(true);\n\n                if (status === EntityStatus.new) {\n                    setLoading(true);\n                    setEntity(undefined);\n                    setStatus(undefined);\n                    history.replace(getEntityPath(id, collectionPath));\n                }\n                // history.goBack();\n            })\n            .catch((e) => {\n                setOpenErrorAlert(e);\n                console.error(\"Error saving entity\", collectionPath, entityId, values);\n                console.error(e);\n            });\n    }\n\n    const existingEntity = status === EntityStatus.existing;\n\n    const formBody = <React.Fragment>\n        <Box mb={3}>\n            <BreadcrumbContainer>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link key={`breadcrumb-home`} color=\"inherit\"\n                          component={ReactLink}\n                          to=\"/\">\n                        Home\n                    </Link>\n                    {breadcrumbs.map(entry =>\n                        (entry.placeHolderId && !params[entry.placeHolderId]) ?\n                            null :\n                            <Link\n                                key={`breadcrumb-${entry.entityPlaceholderPath}`}\n                                color=\"inherit\"\n                                component={ReactLink}\n                                to={buildDataPath(replacePathIdentifiers(params, entry.entityPlaceholderPath))}>\n                                {entry.placeHolderId ? params[entry.placeHolderId] : entry.view.name}\n                            </Link>)\n                        .filter(c => !!c)}\n                    <Typography\n                        color=\"textPrimary\">{existingEntity ? \"Edit\" : `Add New`}</Typography>\n                </Breadcrumbs>\n            </BreadcrumbContainer>\n        </Box>\n        <Box mb={3}>\n            <Typography variant=\"h5\">\n                {existingEntity ? \"Edit\" : `Add New`} {view.schema.name}\n            </Typography>\n        </Box>\n\n        <EntityForm\n            status={status as EntityStatus}\n            collectionPath={collectionPath}\n            schema={view.schema}\n            onEntitySave={onEntitySave}\n            entity={entity}/>\n\n        {view.subcollections &&\n        <SubCollectionsView parentCollectionPath={collectionPath}\n                            subcollections={view.subcollections}\n                            entity={entity}\n                            onEntityClick={onSubcollectionEntityClick}/>\n        }\n\n    </React.Fragment>;\n\n    return (\n        <React.Fragment>\n            {loading ?\n                <CircularProgressCenter/>\n                :\n                formBody\n            }\n\n            <Snackbar open={openSuccessAlert} autoHideDuration={3000}\n                      onClose={handleCloseSuccessAlert}>\n                <MuiAlert elevation={6} variant=\"filled\"\n                          onClose={handleCloseSuccessAlert} severity=\"success\">\n                    The item has been saved correctly\n                </MuiAlert>\n            </Snackbar>\n            <Snackbar open={!!openErrorAlert} autoHideDuration={3000}\n                      onClose={handleCloseErrorAlert}>\n                <MuiAlert elevation={6} variant=\"filled\"\n                          onClose={handleCloseErrorAlert}\n                          severity=\"error\">\n                    <Box>Error saving</Box>\n                    <Box>{openErrorAlert?.message}</Box>\n                </MuiAlert>\n            </Snackbar>\n        </React.Fragment>\n    );\n}\n","import React, { useState } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { formStyles, useStyles } from \"../styles\";\nimport { Button, Grid, Paper } from \"@material-ui/core\";\nimport * as firebase from \"firebase\";\nimport TreeView from \"@material-ui/lab/TreeView\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\n\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { uploadFile } from \"../firebase\";\n\ninterface MediaRouteProps {\n}\n\ninterface Node {\n    full_path: string;\n    name: string;\n    children: Node[],\n    ref: firebase.storage.Reference\n}\n\nfunction StorageTree() {\n\n    const classes = useStyles();\n    let storage = firebase.storage();\n\n    let initialState: Node = {\n        full_path: \"\",\n        name: \"Root\",\n        children: [],\n        ref: storage.ref()\n    };\n\n    const [treeArray, setTreeArray] = useState<Record<string, Node>>({ \"\": initialState });\n\n    const onNodeToggle = (event: React.ChangeEvent<{}>, nodeIds: string[]) => {\n\n    };\n    const onNodeToggle2 = (nodeId: string, expanded: boolean) => {\n        let reference = storage.ref(nodeId);\n        if (expanded) {\n            reference.list().then((listResult) => {\n                const newTreeArray = { ...treeArray };\n                listResult.prefixes.forEach((prefix) => {\n                    const newNode = {\n                        full_path: prefix.fullPath,\n                        children: [],\n                        ref: prefix,\n                        name: prefix.name\n                    };\n                    newTreeArray[nodeId].children.push(newNode);\n                    newTreeArray[prefix.fullPath] = newNode;\n                });\n                setTreeArray(newTreeArray);\n            });\n        } else {\n            const newTreeArray = { ...treeArray };\n            newTreeArray[nodeId].children = [];\n            setTreeArray(newTreeArray);\n        }\n    };\n\n    function getTreeItem(node: Node) {\n        return <TreeItem nodeId={node.full_path} label={node.name}>\n            {node.children.map((childNode) => getTreeItem(childNode))}\n        </TreeItem>;\n    }\n\n    return (<TreeView\n        className={classes.tree}\n        defaultCollapseIcon={<ExpandMoreIcon/>}\n        defaultExpandIcon={<ChevronRightIcon/>}\n        onNodeToggle={onNodeToggle}\n    >\n        {getTreeItem(treeArray[\"\"])}\n    </TreeView>);\n}\n\nexport function MediaRoute({ ...props }: MediaRouteProps & Partial<RouteComponentProps>) {\n    const classes = formStyles();\n\n    const [files, setFiles] = useState<File[]>([]);\n\n    function handleChange(changedFiles: File[]) {\n        setFiles(changedFiles);\n        console.log(changedFiles);\n        console.log(typeof changedFiles[0]);\n    }\n\n    function upload() {\n        uploadFile(files[0]);\n    }\n\n    return (\n        <React.Fragment>\n            <Grid container spacing={2}>\n\n                <Grid item xs={12} sm={3}>\n                    <Paper elevation={0} className={classes.paper}>\n                        <StorageTree/>\n                    </Paper>\n                </Grid>\n\n                <Grid item xs={12} sm={9}>\n                    {/*<DropzoneArea*/}\n                    {/*    dropzoneText={\"\"}*/}\n                    {/*    onChange={handleChange}*/}\n                    {/*    maxFileSize={20 * 1024 * 1024}*/}\n                    {/*    filesLimit={10}*/}\n                    {/*/>*/}\n\n                    <Button disabled={!files.length}\n                            onClick={upload}>Upload</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import React, { useEffect } from \"react\";\nimport {\n    AppBar,\n    Avatar,\n    Box,\n    Button,\n    CssBaseline,\n    Divider,\n    Drawer,\n    Grid,\n    Hidden,\n    IconButton,\n    List,\n    ListItem,\n    ListItemText,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nimport \"typeface-roboto\";\n\nimport { ThemeProvider, useTheme } from \"@material-ui/core/styles\";\nimport {\n    BrowserRouter as Router,\n    Link as ReactLink,\n    Redirect,\n    Route,\n    Switch\n} from \"react-router-dom\";\n\nimport * as firebase from \"firebase\";\nimport \"firebase/auth\";\n\nimport { CircularProgressCenter } from \"./util\";\nimport { EntityCollectionView } from \"./models\";\nimport {\n    addInitialSlash,\n    buildDataPath,\n    CollectionRoute,\n    EntityFormRoute,\n    getAllPaths,\n    MediaRoute,\n    PathConfiguration,\n    removeInitialSlash\n} from \"./routes\";\nimport { useStyles } from \"./styles\";\nimport { Authenticator } from \"./authenticator\";\n\n\n/**\n * Main entry point that defines the CMS configuration\n */\ninterface CMSAppProps {\n    /**\n     * Name of the service, displayed as the main title and in the tab title\n     */\n    name: string;\n\n    /**\n     * Logo to be displayed in the drawer of the CMS\n     */\n    logo?: string;\n\n    /**\n     * List of the views in the CMS. Each view relates to a collection in the\n     * root Firestore database. Each of the navigation entries in this field\n     * generates an entry in the main menu.\n     */\n    navigation: EntityCollectionView<any>[];\n\n    /**\n     * Should the CMS include the Media view (WIP, do not use yet)\n     */\n    includeMedia?: boolean;\n\n    /**\n     * Do the users need to log in to access the CMS.\n     * You can specify an Authenticator function to discriminate which users can\n     * access the CMS or not.\n     * If not specified authentication is enabled but no user restrictions apply\n     */\n    authentication?: boolean | Authenticator;\n\n    /**\n     * If authentication is enabled, allow the user to access the content\n     * without login.\n     */\n    allowSkipLogin?: boolean;\n\n    /**\n     * Custom additional views created by the developer, added to the main\n     * navigation\n     */\n    additionalViews?: AdditionalView[];\n\n    /**\n     * Firebase configuration of the project. If you afe deploying the app to\n     * Firebase hosting, you don't need to specify this value\n     */\n    firebaseConfig?: Object;\n}\n\n/**\n * Custom additional views created by the developer, added to the main\n * navigation\n */\nexport interface AdditionalView {\n    /**\n     * CMS Path\n     */\n    path: string;\n\n    /**\n     * Name of this view\n     */\n    name: string;\n\n    /**\n     * Component to be rendered\n     */\n    view: React.ReactChild;\n}\n\n\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n\nexport const AuthContext = React.createContext<firebase.User | null>(null);\n\nexport default function CMSApp({\n                                   name,\n                                   logo,\n                                   navigation,\n                                   includeMedia,\n                                   authentication,\n                                   allowSkipLogin,\n                                   firebaseConfig,\n                                   additionalViews\n                               }: CMSAppProps) {\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const [mobileOpen, setMobileOpen] = React.useState(false);\n\n    const [\n        firebaseConfigInitialized,\n        setFirebaseConfigInitialized\n    ] = React.useState<boolean>(false);\n    const [configError, setConfigError] = React.useState<string>();\n\n    const [authLoading, setAuthLoading] = React.useState(true);\n    const [loggedUser, setLoggedUser] = React.useState<firebase.User | null>(null);\n    const [loginSkipped, setLoginSkipped] = React.useState<boolean>(false);\n    const [authProviderError, setAuthProviderError] = React.useState<any>();\n    const [notAllowedError, setNotAllowedError] = React.useState<boolean>(false);\n    const [firebaseConfigError, setFirebaseConfigError] = React.useState<boolean>(false);\n\n    const authenticationEnabled = authentication === undefined || !!authentication;\n    const skipLoginButtonEnabled = authenticationEnabled && allowSkipLogin;\n\n    const authenticator: Authenticator | undefined\n        = authentication instanceof Function ? authentication : undefined;\n\n    const onAuthStateChanged = async (user: firebase.User | null) => {\n\n        setNotAllowedError(false);\n\n        if (authenticator && user) {\n            const allowed = await authenticator(user);\n            if (allowed)\n                setLoggedUser(user);\n            else\n                setNotAllowedError(true);\n        } else {\n            setLoggedUser(user);\n        }\n\n        setAuthLoading(false);\n    };\n\n    function initFirebase(config: Object) {\n        try {\n            firebase.initializeApp(config);\n            firebase.auth().onAuthStateChanged(\n                onAuthStateChanged,\n                error => setAuthProviderError(error)\n            );\n            setFirebaseConfigError(false);\n            setFirebaseConfigInitialized(true);\n        } catch (e) {\n            console.error(e);\n            setFirebaseConfigError(true);\n        }\n    }\n\n    useEffect(() => {\n\n        if (process.env.NODE_ENV === \"production\") {\n            fetch(\"/__/firebase/init.json\")\n                .then(async response => {\n                    console.log(\"Firebase init response\", response);\n                    if (response && response.status < 300) {\n                        const config = await response.json();\n                        initFirebase(config);\n                    }\n                })\n                .catch(e =>\n                    setConfigError(\n                        \"Could not load Firebase configuration from Firebase hosting. \" +\n                        \"If the app is not deployed in Firebase hosting, you need to specify the configuration manually\" +\n                        e.toString()\n                    )\n                );\n        } else if (firebaseConfig) {\n            initFirebase(firebaseConfig);\n        } else {\n            setConfigError(\n                \"You need to deploy the app to Firebase hosting or specify a Firebase configuration object\"\n            );\n        }\n    }, []);\n\n    const handleDrawerToggle = () => setMobileOpen(!mobileOpen);\n\n    function googleSignIn() {\n        setAuthProviderError(null);\n        firebase\n            .auth()\n            .signInWithPopup(googleAuthProvider)\n            .then((_: firebase.auth.UserCredential) => {\n            })\n            .catch(error => setAuthProviderError(error));\n    }\n\n    function skipLogin() {\n        setAuthProviderError(null);\n        setLoginSkipped(true);\n    }\n\n    function onSignOut() {\n        firebase.auth().signOut();\n        setLoginSkipped(false);\n    }\n\n    function renderLoginView() {\n        return (\n            <Grid\n                container\n                spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{ minHeight: \"100vh\" }}\n            >\n                <Box className={classes.toolbar}>\n                    {logo && <img className={classes.logo} src={logo}/>}\n                </Box>\n\n                <Grid item xs={12}>\n                    <Button variant=\"contained\"\n                            color=\"primary\"\n                            onClick={googleSignIn}>\n                        Google login\n                    </Button>\n                </Grid>\n\n                {skipLoginButtonEnabled && <Grid item xs={12}>\n                    <Button onClick={skipLogin}>Skip login</Button>\n                </Grid>}\n\n                <Grid item xs={12}>\n\n                    {/* TODO: add link to https://console.firebase.google.com/u/0/project/[PROYECT_ID]/authentication/providers in order to enable google */}\n                    {/* in case the error code is auth/operation-not-allowed */}\n\n                    {notAllowedError &&\n                    <Box p={2}>It looks like you don't have access to the CMS,\n                        based\n                        on the specified Authenticator configuration</Box>}\n\n                    {/*{authProviderError && <Box>{authProviderError.code}</div>}*/}\n                    {authProviderError &&\n                    <Box p={2}>{authProviderError.message}</Box>}\n\n                </Grid>\n            </Grid>\n        );\n    }\n\n    function getRouterSwitch(shouldIncludeMedia: boolean) {\n\n        const allPaths = getAllPaths(navigation);\n\n        const firstCollectionPath = removeInitialSlash(navigation[0].relativePath);\n\n        return (\n            <Switch>\n                {allPaths\n                    .map(\n                        ({\n                             entries,\n                             entityPlaceholderPath,\n                             breadcrumbs,\n                             view\n                         }: PathConfiguration) =>\n                            entries.map(entry => (\n                                <Route\n                                    path={buildDataPath(entry.fullPath)}\n                                    key={`navigation_${entry.routeType}_${entry.placeHolderId}`}\n                                    render={props => {\n                                        if (entry.routeType === \"entity\")\n                                            return (\n                                                <EntityFormRoute\n                                                    {...props}\n                                                    view={view}\n                                                    breadcrumbs={breadcrumbs}\n                                                    entityPlaceholderPath={entityPlaceholderPath}\n                                                />\n                                            );\n                                        else if (entry.routeType === \"collection\")\n                                            return (\n                                                <CollectionRoute\n                                                    {...props}\n                                                    view={view}\n                                                    breadcrumbs={breadcrumbs}\n                                                    entityPlaceholderPath={entityPlaceholderPath}\n                                                />\n                                            );\n                                        else throw Error(\"No know routeType\");\n                                    }}\n                                />\n                            ))\n                    )\n                    .flat()}\n\n                {shouldIncludeMedia && (\n                    <Route path=\"/media\">\n                        <MediaRoute/>\n                    </Route>\n                )}\n\n                {additionalViews &&\n                additionalViews.map(additionalView => (\n                    <Route\n                        key={\"additional_view_\" + additionalView.path}\n                        path={addInitialSlash(additionalView.path)}\n                    >\n                        {additionalView.view}\n                    </Route>\n                ))}\n\n                <Redirect exact from=\"/\"\n                          to={buildDataPath(firstCollectionPath)}/>\n            </Switch>\n        );\n    }\n\n    function renderMainView() {\n        if (configError) {\n            return <Box> {configError} </Box>;\n        }\n\n        if (!firebaseConfigInitialized) {\n            return <CircularProgressCenter/>;\n        }\n\n        const shouldIncludeMedia =\n            includeMedia !== undefined && includeMedia;\n\n        const drawer = (\n            <React.Fragment>\n\n                <Box className={classes.toolbar}>\n                    {logo && <img className={classes.logo} src={logo}/>}\n                </Box>\n\n                <Divider/>\n                <List>\n                    {Object.entries(navigation).map(([key, view], index) => (\n                        <ListItem\n                            button\n                            key={`navigation_${index}_${key}`}\n                            component={ReactLink}\n                            to={buildDataPath(view.relativePath)}\n                        >\n                            <ListItemText\n                                primary={view.name}\n                                primaryTypographyProps={{ variant: \"subtitle2\" }}/>\n                        </ListItem>\n                    ))}\n\n                    {shouldIncludeMedia && (\n                        <React.Fragment>\n                            <Divider/>\n                            <ListItem button component={ReactLink} to=\"/media\">\n                                <ListItemText\n                                    primary=\"Media\"\n                                    primaryTypographyProps={{ variant: \"subtitle2\" }}/>\n                            </ListItem>\n                        </React.Fragment>\n                    )}\n\n                    {additionalViews && (\n                        <React.Fragment>\n                            <Divider/>\n                            {additionalViews.map(additionalView => (\n                                <ListItem\n                                    button\n                                    key={`additional-view-${additionalView.path}`}\n                                    component={ReactLink}\n                                    to={addInitialSlash(additionalView.path)}\n                                >\n                                    <ListItemText\n                                        primary={additionalView.name}\n                                        primaryTypographyProps={{ variant: \"subtitle2\" }}/>\n                                </ListItem>\n                            ))}\n                        </React.Fragment>\n                    )}\n                </List>\n            </React.Fragment>\n        );\n\n        return (\n            <AuthContext.Provider value={loggedUser}>\n                <Router>\n                    <Box className={classes.root}>\n                        <CssBaseline/>\n                        <AppBar position=\"fixed\" className={classes.appBar}>\n                            <Toolbar>\n                                <IconButton\n                                    color=\"inherit\"\n                                    aria-label=\"open drawer\"\n                                    edge=\"start\"\n                                    onClick={handleDrawerToggle}\n                                    className={classes.menuButton}\n                                >\n                                    <MenuIcon/>\n                                </IconButton>\n                                <Typography variant=\"h6\" noWrap>\n                                    {name}\n                                </Typography>\n                                <Box className={classes.grow}/>\n\n                                <Box p={2}>\n                                    {loggedUser && loggedUser.photoURL ?\n                                        <Avatar src={loggedUser.photoURL}/>\n                                        :\n                                        <Avatar>{loggedUser?.displayName ? loggedUser.displayName[0] : \"A\"}</Avatar>\n                                    }\n                                </Box>\n\n                                <Button variant=\"text\" color=\"inherit\"\n                                        onClick={onSignOut}>\n                                    Log Out\n                                </Button>\n\n                            </Toolbar>\n                        </AppBar>\n                        <nav className={classes.drawer}>\n                            {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                            <Hidden mdUp implementation=\"css\">\n                                <Drawer\n                                    variant=\"temporary\"\n                                    anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                                    open={mobileOpen}\n                                    onClose={handleDrawerToggle}\n                                    classes={{\n                                        paper: classes.drawerPaper\n                                    }}\n                                    ModalProps={{\n                                        keepMounted: true // Better open performance on mobile.\n                                    }}\n                                >\n                                    {drawer}\n                                </Drawer>\n                            </Hidden>\n                            <Hidden smDown implementation=\"css\">\n                                <Drawer\n                                    classes={{\n                                        paper: classes.drawerPaper\n                                    }}\n                                    variant=\"permanent\"\n                                    open\n                                >\n                                    {drawer}\n                                </Drawer>\n                            </Hidden>\n                        </nav>\n                        <main className={classes.content}>\n                            <Box className={classes.toolbar}/>\n                            {getRouterSwitch(shouldIncludeMedia)}\n                        </main>\n                    </Box>\n                </Router>\n            </AuthContext.Provider>\n        );\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                {firebaseConfigError ?\n                    <Box>\n                        It seems like the provided Firebase config is not\n                        correct\n                    </Box> :\n                    (\n                        authLoading ? (\n                            <CircularProgressCenter/>\n                        ) : (!authenticationEnabled || loggedUser || loginSkipped) ? (\n                            renderMainView()\n                        ) : (\n                            renderLoginView()\n                        )\n                    )}\n            </MuiPickersUtilsProvider>\n        </ThemeProvider>\n    );\n}\n","import { SearchClient, SearchIndex } from \"algoliasearch\";\n\n/**\n * Simple interface for implementing a text search\n */\nexport interface TextSearchDelegate {\n    /**\n     * @param query string\n     * @return array containing the Firestore ids of the search results\n     */\n    performTextSearch(query: string): Promise<readonly string[]>;\n}\n\nexport class AlgoliaTextSearchDelegate implements TextSearchDelegate {\n\n    algoliaClient: SearchClient;\n    index: SearchIndex;\n\n    constructor(algoliaClient: SearchClient, indexKey: string) {\n        this.algoliaClient = algoliaClient;\n        this.index = algoliaClient.initIndex(indexKey);\n    }\n\n    performTextSearch(query: string): Promise<readonly string[]> {\n        console.log(\"Performing Algolia query\", query);\n        return this.index\n            .search(query)\n            .then(({ hits }: any) => {\n                console.log(hits);\n                return hits.map((hit: any) => hit.objectID as string);\n            })\n            .catch((err: any) => {\n                console.log(err);\n                return [];\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport logo from \"./images/test_shop_logo.png\";\nimport algoliasearch, { SearchClient } from \"algoliasearch\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport {\n    AdditionalColumnDelegate,\n    AlgoliaTextSearchDelegate,\n    AsyncPreviewComponent,\n    Authenticator,\n    CMSApp,\n    Entity,\n    EntityCollectionView,\n    EntitySchema,\n    EnumValues\n} from \"firecms\";\n\nimport { firebaseConfig } from \"./firebase_config\";\nimport CustomLargeTextField from \"./custom_field/CustomLargeTextField\";\nimport firebase from \"firebase\";\n\nconst locales: EnumValues<string> = {\n    \"de-DE\": \"German\",\n    \"en-US\": \"English (United States)\",\n    \"es-ES\": \"Spanish (Spain)\",\n    \"es-419\": \"Spanish (South America)\"\n};\n\nconst productSchema: EntitySchema = {\n    customId: true,\n    name: \"Product\",\n    properties: {\n        name: {\n            title: \"Name\",\n            validation: { required: true },\n            dataType: \"string\",\n            includeInListView: true,\n            includeAsMapPreview: true\n        },\n        price: {\n            title: \"Price\",\n            validation: {\n                required: true,\n                requiredMessage: \"You must set a price\"\n            },\n            filterable: true,\n            dataType: \"number\",\n            includeInListView: true\n        },\n        status: {\n            title: \"Status\",\n            validation: { required: true },\n            dataType: \"string\",\n            enumValues: {\n                private: \"Private\",\n                public: \"Public\"\n            },\n            includeInListView: true\n        },\n        categories: {\n            title: \"Categories\",\n            validation: { required: true },\n            dataType: \"array\",\n            of: {\n                dataType: \"string\",\n                enumValues: {\n                    electronics: \"Electronics\",\n                    books: \"Books\",\n                    furniture: \"Furniture\",\n                    clothing: \"Clothing\",\n                    food: \"Food\"\n                }\n            },\n            includeInListView: true\n        },\n        image: {\n            title: \"Image\",\n            dataType: \"string\",\n            storageMeta: {\n                mediaType: \"image\",\n                storagePath: \"images\",\n                acceptedFiles: [\"image/*\"]\n            },\n            includeInListView: true,\n            includeAsMapPreview: true\n        },\n        tags: {\n            title: \"Tags\",\n            description: \"Example of generic array\",\n            validation: { required: true },\n            dataType: \"array\",\n            of: {\n                dataType: \"string\"\n            },\n            includeInListView: true\n        },\n        description: {\n            title: \"Description\",\n            description: \"Not mandatory but it'd be awesome if you filled this up\",\n            dataType: \"string\",\n            includeInListView: false\n        },\n        published: {\n            title: \"Published\",\n            dataType: \"boolean\",\n            includeInListView: true\n        },\n        expires_on: {\n            title: \"Expires on\",\n            dataType: \"timestamp\",\n            includeInListView: true\n        },\n        publisher: {\n            title: \"Publisher\",\n            description: \"This is an example of a map property\",\n            dataType: \"map\",\n            properties: {\n                name: {\n                    title: \"Name\",\n                    includeInListView: true,\n                    dataType: \"string\"\n                },\n                external_id: {\n                    title: \"External id\",\n                    includeInListView: true,\n                    dataType: \"string\"\n                }\n            },\n            includeInListView: true\n        },\n        available_locales: {\n            title: \"Available locales\",\n            description:\n                \"This is an example of a disabled field\",\n            dataType: \"array\",\n            disabled: true,\n            of: {\n                dataType: \"string\"\n            },\n            includeInListView: true\n        }\n    }\n};\n\n\nconst blogSchema: EntitySchema = {\n    name: \"Blog entry\",\n    properties: {\n        name: {\n            title: \"Name\",\n            validation: { required: true },\n            filterable: true,\n            dataType: \"string\",\n            includeInListView: true\n        },\n        long_text: {\n            title: \"Long text\",\n            description: \"This field is using a custom component\",\n            validation: { required: true },\n            dataType: \"string\",\n            customField: CustomLargeTextField,\n            additionalProps: {\n                rows: 5\n            },\n            includeInListView: false\n        },\n        images: {\n            title: \"Images\",\n            dataType: \"array\",\n            of: {\n                dataType: \"string\",\n                storageMeta: {\n                    mediaType: \"image\",\n                    storagePath: \"images\",\n                    acceptedFiles: [\"image/*\"]\n                }\n            },\n            includeInListView: true\n        },\n        priority: {\n            title: \"Priority\",\n            description: \"This field allows the selection of Infinity as a value\",\n            dataType: \"number\",\n            additionalProps: {\n                allowInfinity: true\n            },\n            includeInListView: false\n        },\n        content: {\n            title: \"Content\",\n            validation: { required: true },\n            dataType: \"array\",\n            of: {\n                dataType: \"string\"\n            },\n            includeInListView: false\n        },\n        status: {\n            title: \"Status\",\n            validation: { required: true },\n            dataType: \"string\",\n            filterable: true,\n            enumValues: {\n                published: \"Published\",\n                draft: \"Draft\"\n            },\n            includeInListView: true\n        },\n        products: {\n            title: \"Products\",\n            validation: { required: true },\n            dataType: \"array\",\n            of: {\n                dataType: \"reference\",\n                collectionPath: \"products\",\n                schema: productSchema\n            },\n            includeInListView: true\n        }\n    }\n};\nconst usersSchema: EntitySchema = {\n    name: \"User\",\n    properties: {\n\n        first_name: {\n            title: \"First name\",\n            dataType: \"string\",\n            includeInListView: true,\n            filterable: true\n        },\n        last_name: {\n            title: \"Last name\",\n            dataType: \"string\",\n            includeInListView: true\n        },\n        picture: {\n            title: \"Picture\",\n            dataType: \"map\",\n            properties: {\n                large: {\n                    title: \"Large\",\n                    dataType: \"string\",\n                    urlMediaType: \"image\",\n                    includeAsMapPreview: true\n                },\n                medium: {\n                    title: \"Medium\",\n                    dataType: \"string\",\n                    urlMediaType: \"image\"\n                },\n                thumbnail: {\n                    title: \"Thumbnail\",\n                    dataType: \"string\",\n                    urlMediaType: \"image\"\n                }\n            },\n            includeInListView: true\n        },\n        email: {\n            title: \"Email\",\n            dataType: \"string\",\n            includeInListView: true\n        },\n        phone: {\n            title: \"Phone\",\n            dataType: \"string\",\n            includeInListView: true\n        }\n    }\n};\n\nexport const testEntitySchema: EntitySchema = {\n    customId: true,\n    name: \"Test entity\",\n    properties: {\n        tags: {\n            title: \"Tags\",\n            includeInListView: true,\n            // validation: { required: true },\n            dataType: \"array\",\n            of: {\n                dataType: \"string\"\n            }\n        },\n        title: {\n            title: \"Title\",\n            description: \"A catching title is important\",\n            includeInListView: true,\n            // validation: { required: true },\n            dataType: \"string\"\n        },\n        description: {\n            title: \"Description\",\n            includeInListView: true,\n            // validation: { required: true },\n            dataType: \"string\"\n        },\n        search_adjacent: {\n            title: \"Search adjacent\",\n            // validation: { required: true },\n            includeInListView: true,\n            dataType: \"boolean\"\n        },\n        difficulty: {\n            title: \"Difficulty\",\n            // validation: { required: true },\n            includeInListView: true,\n            dataType: \"number\"\n        },\n        created_at: {\n            title: \"Created at\",\n            // validation: { required: true },\n            includeInListView: true,\n            dataType: \"timestamp\"\n        },\n        image: {\n            title: \"Image\",\n            dataType: \"string\",\n            includeInListView: true,\n            storageMeta: {\n                mediaType: \"image\",\n                storagePath: \"test\",\n                acceptedFiles: [\"image/*\"]\n            }\n        }\n    }\n};\n\nconst productAdditionalColumn: AdditionalColumnDelegate<typeof productSchema> = {\n    title: \"Spanish title\",\n    builder: (entity: Entity<typeof productSchema>) =>\n        <AsyncPreviewComponent builder={\n            entity.reference.collection(\"locales\")\n                .doc(\"es-ES\")\n                .get()\n                .then((snapshot: any) => snapshot.get(\"title\") as string)\n        }/>\n};\n\n\nlet client: SearchClient | undefined = undefined;\nif (process.env.REACT_APP_ALGOLIA_APP_ID && process.env.REACT_APP_ALGOLIA_SEARCH_KEY) {\n    client = algoliasearch(process.env.REACT_APP_ALGOLIA_APP_ID, process.env.REACT_APP_ALGOLIA_SEARCH_KEY);\n} else {\n    console.error(\"REACT_APP_ALGOLIA_APP_ID or REACT_APP_ALGOLIA_SEARCH_KEY env variables not specified\");\n    console.error(\"Text search not enabled\");\n}\n\nconst localeCollection =\n    {\n        name: \"Locales\",\n        relativePath: \"locales\",\n        schema: {\n            customId: locales,\n            name: \"Locale\",\n            properties: {\n                title: {\n                    title: \"Title\",\n                    validation: { required: true },\n                    dataType: \"string\",\n                    includeInListView: true\n                },\n                selectable: {\n                    title: \"Selectable\",\n                    description: \"Is this locale selectable\",\n                    dataType: \"boolean\",\n                    includeInListView: true\n                },\n                video: {\n                    title: \"Video\",\n                    dataType: \"string\",\n                    validation: { required: false },\n                    storageMeta: {\n                        mediaType: \"video\",\n                        storagePath: \"videos\",\n                        acceptedFiles: [\"video/*\"]\n                    },\n                    includeInListView: true\n                }\n            }\n        }\n    }\n;\n\nlet navigation: EntityCollectionView<any>[] = [\n    {\n        relativePath: \"products\",\n        schema: productSchema,\n        name: \"Products\",\n        textSearchDelegate: client && new AlgoliaTextSearchDelegate(\n            client,\n            \"products\"),\n        additionalColumns: [productAdditionalColumn],\n        subcollections: [localeCollection]\n\n    },\n    {\n        relativePath: \"users\",\n        schema: usersSchema,\n        name: \"Users\",\n        textSearchDelegate: client && new AlgoliaTextSearchDelegate(\n            client,\n            \"users\")\n    },\n    {\n        relativePath: \"blog\",\n        schema: blogSchema,\n        name: \"Blog\",\n        textSearchDelegate: client && new AlgoliaTextSearchDelegate(\n            client,\n            \"blog\")\n    }\n];\n\nif (process.env.NODE_ENV !== \"production\") {\n    navigation.push({\n        relativePath: \"test_entity\",\n        schema: testEntitySchema,\n        name: \"Test entity\"\n    });\n}\n\n\nconst myAuthenticator: Authenticator = (user?: firebase.User) => {\n    console.log(\"Allowing access to\", user?.email);\n    return true;\n};\n\n\nReactDOM.render(\n    <CMSApp\n        name={\"Test shop CMS\"}\n        authentication={myAuthenticator}\n        allowSkipLogin={true}\n        logo={logo}\n        navigation={navigation}\n        firebaseConfig={firebaseConfig}\n    />,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\nserviceWorker.unregister();\n","import { getIn } from \"formik\";\nimport {\n    FormControl,\n    FormHelperText,\n    Input,\n    InputLabel\n} from \"@material-ui/core\";\nimport React, { ReactElement } from \"react\";\nimport { CMSFieldProps } from \"firecms\";\n\ninterface CustomLargeTextFieldProps extends CMSFieldProps<string> {\n    rows: number\n}\n\nexport default function CustomLargeTextField({\n                                                 property,\n                                                 field,\n                                                 rows,\n                                                 form: { isSubmitting, errors, touched, setFieldValue },\n                                                 ...props\n                                             }: CustomLargeTextFieldProps)\n    : ReactElement {\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    const value = field.value;\n\n    return (\n        <React.Fragment>\n\n            <FormControl\n                required={property.validation?.required}\n                error={showError}\n                disabled={isSubmitting}\n                fullWidth>\n                <InputLabel>{property.title || field.name}</InputLabel>\n                <Input\n                    multiline\n                    rows={rows}\n                    defaultValue={value}\n                    onChange={(evt) => setFieldValue(\n                        field.name,\n                        evt.target.value\n                    )}\n                />\n\n                {showError && <FormHelperText\n                    id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n                {property.description &&\n                <FormHelperText>{property.description}</FormHelperText>}\n\n            </FormControl>\n\n        </React.Fragment>\n    );\n\n}\n","export const firebaseConfig = {\n    apiKey: \"AIzaSyBzt-JvcXvpDrdNU7jYX3fC3v0EAHjTKEw\",\n    authDomain: \"firecms-demo-27150.firebaseapp.com\",\n    databaseURL: \"https://firecms-demo-27150.firebaseio.com\",\n    projectId: \"firecms-demo-27150\",\n    storageBucket: \"firecms-demo-27150.appspot.com\",\n    messagingSenderId: \"837544933711\",\n    appId: \"1:837544933711:web:75822ffc0840e3ae01ad3a\",\n    measurementId: \"G-8HRE8MVXZJ\"\n};\n"],"sourceRoot":""}