{"version":3,"sources":["images/test_shop_logo.png","serviceWorker.ts","../../src/util/CircularProgressCenter.tsx","../../src/util/BreadcrumbContainer.tsx","../../src/styles.ts","../../src/firebase/firestore.ts","../../src/firebase/storage.ts","../../src/util/properties.ts","../../src/collection/filters/StringNumberFilterField.tsx","../../src/collection/FilterPopup.tsx","../../src/collection/SearchBar.tsx","../../src/preview/SkeletonComponent.tsx","../../src/preview/StorageThumbnail.tsx","../../src/preview/ReferencePreview.tsx","../../src/preview/PreviewComponent.tsx","../../src/collection/CollectionTable.tsx","../../src/routes/navigation.ts","../../src/models.ts","../../src/preview/EntityPreview.tsx","../../src/collection/DeleteEntityDialog.tsx","../../src/preview/EntityDetailDialog.tsx","../../src/routes/CollectionRoute.tsx","../../src/form/fields/Select.tsx","../../src/form/fields/ArrayEnumSelect.tsx","../../src/form/fields/StorageUploadField.tsx","../../src/form/fields/TextField.tsx","../../src/form/fields/SwitchField.tsx","../../src/form/fields/DateTimeField.tsx","../../src/preview/AsyncPreviewComponent.tsx","../../src/form/fields/ReferenceField.tsx","../../src/form/fields/MapField.tsx","../../src/form/fields/ArrayDefaultField.tsx","../../src/form/fields/ArrayMapField.tsx","../../src/form/fields/DisabledField.tsx","../../src/form/index.tsx","../../src/form/validation.ts","../../src/form/EntityForm.tsx","../../src/collection/SubCollectionsView.tsx","../../src/routes/EntityFormRoute.tsx","../../src/routes/MediaRoute.tsx","../../src/CMSApp.tsx","../../src/text_search_delegate.ts","index.tsx","custom_field/CustomLargeTextField.tsx","firebase_config.ts"],"names":["module","exports","Boolean","window","location","hostname","match","CircularProgressCenter","props","display","width","height","m","React","BreadcrumbContainer","children","elevation","p","pr","pl","useStyles","makeStyles","theme","createStyles","root","marginTop","drawer","flexShrink","appBar","marginLeft","menuButton","marginRight","grow","flexGrow","toolbar","logo","padding","maxWidth","drawerPaper","content","filter","table","minWidth","tableWrapper","overflow","visuallyHidden","border","clip","margin","position","top","tree","formStyles","layout","paper","dropZone","backgroundColor","activeDrop","acceptDrop","borderColor","main","rejectDrop","uploadItem","minHeight","formPaper","marginBottom","buttons","justifyContent","button","form","useToolbarStyles","paddingLeft","paddingRight","highlight","color","lighten","dark","title","flex","searchBar","createMuiTheme","palette","background","default","primary","secondary","error","red","A400","typography","h6","fontSize","fontWeight","shape","borderRadius","fetchEntity","path","entityId","schema","console","firebase","docSnapshot","createEntityFromSchema","data","result","Object","values","property","sanitizeData","replaceTimestampsWithDates","v","Array","a","doc","id","snapshot","reference","initEntityValues","undefined","b","uploadFile","file","storageRef","getCollectionTableProperties","properties","getFilterableProperties","StringNumberFilterField","enumValues","name","setFieldValue","field","useState","setOperation","setInternalValue","op","fullWidth","variant","container","item","xs","value","operation","autoWidth","onChange","evt","updateFilter","key","type","defaultValue","internalValue","val","parseFloat","FilterPopup","onFilterUpdate","filterableProperties","classes","className","formField","createFilterField","mb","cleanedInitialValues","filterValues","initFilterValues","popupId","popupState","size","onClick","style","bindTrigger","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","initialValues","onSubmit","filters","isSubmitting","handleSubmit","noValidate","createFilterFields","search","fade","searchIcon","pointerEvents","alignItems","inputRoot","inputInput","transition","SearchBar","onTextSearch","useEffect","handler","setTimeout","clearTimeout","placeholder","searchText","event","setSearchText","input","endAdornment","inputProps","SkeletonComponent","small","stringProperty","mediaType","renderImageThumbnail","renderUrlAudioComponent","renderUrlVideo","Error","renderUrlComponent","renderSkeletonText","arrayProperty","tableProperties","map","index","component","renderArrayOfMaps","renderGenericArrayCell","listProperties","renderMap","StorageThumbnail","storagePath","getDownloadURL","setUrl","url","ReferencePreview","previewComponent","cancel","ref","onSnapshot","listenEntityFromRef","e","setEntity","mt","entity","PreviewComponent","renderStorageThumbnail","renderPreviewEnumChip","renderGenericArray","label","renderArrayOfStrings","refSchema","controls","src","renderUrlImageThumbnail","maxHeight","image","CollectionTable","startAfter","pageKeys","setDataLoading","cancelSubscription","onError","limit","orderBy","order","collectionReference","colSnapshot","listenCollection","entities","setDataLoadingError","lastEntity","page","setData","emptyRows","rowsPerPage","tableViewFields","hasEditButton","hasDeleteButton","buildTableRowButtons","disabled","onEntityEdit","onEntityDelete","textAlign","textOverflow","hover","onEntityClick","tabIndex","align","getCellAlignment","renderTableCell","renderCustomTableCell","delegate","buttonsCell","renderTableSkeletonCell","skeletonBody","buildTableRowSkeleton","tableBody","textSearchInProgress","textSearchData","buildTableRow","colSpan","length","body","dataLoading","textSearchEnabled","setTextSearchLoading","textSearchDelegate","setTextSearchData","setTextSearchInProgress","ids","promises","Promise","Paper","collectionPath","setFilter","dataLoadingError","spacing","justify","stickyHeader","sortable","additionalColumns","onRequestSort","setPage","setPageKeys","isAsc","setOrder","setOrderBy","rowsPerPageOptions","count","Infinity","backIconButtonProps","nextIconButtonProps","onChangePage","onChangeRowsPerPage","setRowsPerPage","parseInt","CollectionTableHead","headCells","headCell","active","sortDirection","direction","additionalColumn","CollectionTableToolbar","replacePathIdentifiers","params","basePath","replacedPath","getPlaceHolderIdForView","view","getEntityPath","getRouterNewEntityPath","buildDataPath","absolutePath","removeInitialSlash","s","addInitialSlash","EntityPreview","scope","DeleteEntityDialog","other","disableBackdropClick","disableEscapeKeyDown","keepMounted","open","onBackdropClick","onClose","dividers","loading","autoFocus","setOpenSnackbar","setLoading","deleteEntity","_","openSnackBar","autoHideDuration","EntityDetailDialog","CollectionRoute","history","deleteEnabled","ReactLink","to","relativePath","includeToolbar","entityPath","setEntityClicked","setDeleteEntityClicked","paginationEnabled","pagination","entityClicked","deleteEntityClicked","Select","fieldError","getIn","errors","showError","touched","required","labelId","newValue","includeDescription","ArrayEnumSelect","multiple","renderValue","selected","checked","StorageUploadField","filled","StorageUpload","multipleFilesSupported","storageMeta","initialValue","items","onClear","clearedStoragePath","useDropzone","accept","onDrop","acceptedFiles","newInternalValue","removeDuplicates","isDragReject","getRootProps","rootProps","rootRef","isDragActive","isDragAccept","getInputProps","flexDirection","flexWrap","entry","renderProperty","onFileUploadComplete","uploadedPath","fieldValue","StorageUploadProgress","setError","setProgress","uploadTask","currentProgress","setOpenErrorAlert","fullPath","upload","handleCloseErrorAlert","ml","progress","openErrorAlert","severity","StorageItemPreview","right","TextField","updateValue","inputType","numValue","valueIsInfinity","allowInfinity","labelPlacement","control","SwitchField","DateTimeField","clearable","helperText","description","dateValue","AsyncPreviewComponent","builder","res","setResult","EntityStatus","ReferenceField","my","gutterBottom","initialFilter","ReferenceDialog","handleClose","setOpen","MapField","mapProperties","hasError","createFormField","ArrayDefaultField","ofProperty","hasValue","render","arrayHelpers","ArrayMapField","arrayKey","DisabledField","buildField","fieldProps","mapPropertyToYup","yup","validation","getYupStringSchema","getYupNumberSchema","getYupBooleanSchema","getYupObjectSchema","getYupArraySchema","getYupDateSchema","getYupGeoPointSchema","getYupReferenceSchema","objectSchema","EntityForm","onEntitySave","mustSetCustomId","status","validate","setCustomIdError","actions","setSavingError","validationSchema","disableGutters","formType","hasEnumValues","createCustomIdField","setCustomId","customIdError","sm","createFormFields","savingError","TabPanel","thisView","hidden","selectedView","subcollectionPath","SubCollectionsView","firstSubcollection","parentCollectionPath","setSelectedView","EntityFormRoute","hashIdentifier","entityPlaceholderPath","setStatus","handleCloseSuccessAlert","setOpenSuccessAlert","existingEntity","formBody","breadcrumbs","c","documentReference","merge","saveEntity","subcollections","openSuccessAlert","StorageTree","initialState","full_path","storage","defaultCollapseIcon","defaultExpandIcon","onNodeToggle","nodeId","node","childNode","getTreeItem","treeArray","MediaRoute","files","googleAuthProvider","AuthContext","CMSApp","additionalViews","useTheme","authenticationEnabled","authentication","skipLoginButtonEnabled","authenticator","onAuthStateChanged","setNotAllowedError","setLoggedUser","setAuthLoading","setAuthProviderError","setFirebaseConfigError","setFirebaseConfigInitialized","fetch","response","initFirebase","setConfigError","handleDrawerToggle","setMobileOpen","setLoginSkipped","allPaths","getAllPaths","entityCollectionView","previousBreadcrumbs","pathConfigurations","viewPath","placeHolderId","pathConfiguration","entries","routeType","firstCollectionPath","navigation","shouldIncludeMedia","additionalView","exact","from","utils","DateFnsUtils","firebaseConfigError","authLoading","loggedUser","includeMedia","primaryTypographyProps","edge","noWrap","photoURL","onSignOut","mdUp","implementation","anchor","mobileOpen","ModalProps","smDown","getRouterSwitch","renderMainView","googleSignIn","skipLogin","notAllowedError","authProviderError","AlgoliaTextSearchDelegate","constructor","algoliaClient","indexKey","this","hits","hit","err","productSchema","customId","dataType","includeInListView","includeAsMapPreview","price","requiredMessage","filterable","private","public","categories","of","electronics","books","furniture","clothing","food","tags","published","expires_on","publisher","external_id","available_locales","blogSchema","long_text","customField","rows","Fragment","FormControl","InputLabel","Input","multiline","target","FormHelperText","additionalProps","images","priority","draft","products","testEntitySchema","search_adjacent","difficulty","created_at","productAdditionalColumn","collection","get","then","client","localeCollection","selectable","video","algoliasearch","process","first_name","last_name","picture","large","urlMediaType","medium","thumbnail","email","phone","ReactDOM","user","log","allowSkipLogin","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.260c76f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/test_shop_logo.869a9462.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    Box,\n    CircularProgress,\n    CircularProgressProps\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nexport function CircularProgressCenter(props:CircularProgressProps) {\n    return (\n        <Box\n            display=\"flex\"\n            width={\"100%\"} height={\"100vh\"}>\n            <Box m=\"auto\">\n                <CircularProgress {...props}/>\n            </Box>\n        </Box>\n    );\n}\n","import React from \"react\";\nimport { Box, Paper } from \"@material-ui/core\";\n\ninterface BreadcrumbProps {\n    children: React.ReactChild;\n}\n\nexport const BreadcrumbContainer: React.FunctionComponent<BreadcrumbProps> = ({ children }) => {\n    return (\n        <Box display=\"flex\">\n            <Paper elevation={0}>\n                <Box p={1} pr={2} pl={2}>\n                    {children}\n                </Box>\n            </Paper>\n        </Box>\n    );\n};\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core\";\nimport { createMuiTheme, lighten } from \"@material-ui/core/styles\";\nimport { red } from \"@material-ui/core/colors\";\n\nconst drawerWidth = 240;\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\",\n            width: \"100%\",\n            marginTop: theme.spacing(3)\n        },\n        drawer: {\n            [theme.breakpoints.up(\"md\")]: {\n                width: drawerWidth,\n                flexShrink: 0\n            }\n        },\n        appBar: {\n            [theme.breakpoints.up(\"md\")]: {\n                width: `calc(100% - ${drawerWidth}px)`,\n                marginLeft: drawerWidth\n            }\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n            [theme.breakpoints.up(\"md\")]: {\n                display: \"none\"\n            }\n        },\n        grow: {\n            flexGrow: 1\n        },\n        toolbar: theme.mixins.toolbar,\n        logo: {\n            padding: theme.spacing(3),\n            maxWidth: drawerWidth\n        },\n        drawerPaper: {\n            width: drawerWidth\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n            width: `calc(100% - ${drawerWidth}px)`\n        },\n        filter: {\n            flexGrow: 1,\n            padding: theme.spacing(1)\n        },\n        table: {\n            minWidth: 750\n        },\n        tableWrapper: {\n            overflow: \"auto\"\n        },\n        visuallyHidden: {\n            border: 0,\n            clip: \"rect(0 0 0 0)\",\n            height: 1,\n            margin: -1,\n            overflow: \"hidden\",\n            padding: 0,\n            position: \"absolute\",\n            top: 20,\n            width: 1\n        },\n        tree: {\n            height: 216,\n            flexGrow: 1,\n            maxWidth: 400\n        }\n    })\n);\n\n\nexport const formStyles = makeStyles(theme => ({\n    appBar: {\n        position: \"relative\"\n    },\n    layout: {\n        width: \"auto\",\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n            width: 600,\n            marginLeft: \"auto\",\n            marginRight: \"auto\"\n        }\n    },\n    paper: {\n        padding: theme.spacing(1),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n            padding: theme.spacing(2)\n        }\n    },\n    dropZone: {\n        \"&:hover\": {\n            backgroundColor: \"#f5f5f5\"\n        }\n    },\n    activeDrop: {\n        backgroundColor: \"#f5f5f5\"\n    },\n    acceptDrop: {\n        borderColor: theme.palette.success.main\n    },\n    rejectDrop: {\n        borderColor: theme.palette.error.main\n    },\n    uploadItem: {\n        padding: theme.spacing(1),\n        minWidth: 220,\n        minHeight: 220\n    },\n    formPaper: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        padding: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {}\n    },\n    buttons: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n    form: {\n        marginTop: theme.spacing(2)\n    }\n}));\n\n\nexport const useToolbarStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            paddingLeft: theme.spacing(2),\n            paddingRight: theme.spacing(1)\n        },\n        highlight:\n            theme.palette.type === \"light\"\n                ? {\n                    color: theme.palette.secondary.main,\n                    backgroundColor: lighten(theme.palette.secondary.light, 0.85)\n                }\n                : {\n                    color: theme.palette.text.primary,\n                    backgroundColor: theme.palette.secondary.dark\n                },\n        title: {\n            flex: \"1 1 100%\"\n        },\n        searchBar: {\n            flex: \"1 1 100%\"\n        }\n    })\n);\n\nexport const theme = createMuiTheme({\n    palette: {\n        background: {\n            default: \"#f1f1f1\"\n        },\n        primary: {\n            main: \"#03238d\"\n        },\n        secondary: {\n            main: \"#8AC9BD\"\n        },\n        error: {\n            main: red.A400\n        }\n    },\n    typography: {\n        h6: {\n            fontSize: 16,\n            fontWeight: 600\n        }\n    },\n    shape: {\n        borderRadius: 2\n    }\n});\n","import * as firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport { Entity, EntitySchema, EntityValues, FilterValues } from \"../models\";\n\n/**\n * Listen to a entities in a Firestore path\n * @param path\n * @param schema\n * @param onSnapshot\n * @param filter\n * @param limit\n * @param startAfter\n * @param orderBy\n * @param order\n * @return Function to cancel subscription\n */\nexport function listenCollection<S extends EntitySchema>(\n    path: string,\n    schema: S,\n    onSnapshot: (entity: Entity<S>[]) => void,\n    onError?: (error: Error) => void,\n    filter?: FilterValues<S>,\n    limit?: number,\n    startAfter?: any[],\n    orderBy?: string,\n    order?: \"desc\" | \"asc\"\n): Function {\n\n    console.log(\"Listening collection\", path, limit, filter, startAfter, orderBy, order);\n\n    let collectionReference: firebase.firestore.Query = firebase.firestore()\n        .collection(path);\n\n    if (filter)\n        Object.entries(filter)\n            .filter(([_, entry]) => !!entry)\n            .forEach(([key, [op, value]]) => collectionReference = collectionReference.where(key, op, value));\n\n    if (orderBy && order)\n        collectionReference = collectionReference.orderBy(orderBy, order);\n\n    if (startAfter)\n        collectionReference = collectionReference\n            .startAfter(startAfter);\n\n    if (limit)\n        collectionReference = collectionReference\n            .limit(limit);\n\n    return collectionReference\n        .onSnapshot((colSnapshot) =>\n                onSnapshot(colSnapshot.docs.map((doc) => createEntityFromSchema(doc, schema))),\n            onError);\n}\n\n/**\n * Retrieve an entity given a path and a schema\n * @param path\n * @param entityId\n * @param schema\n */\nexport function fetchEntity<S extends EntitySchema>(\n    path: string,\n    entityId: string,\n    schema: S\n): Promise<Entity<S>> {\n\n    console.debug(\"fetch entity\", path, entityId);\n\n    return firebase.firestore()\n        .collection(path)\n        .doc(entityId)\n        .get()\n        .then((docSnapshot) => createEntityFromSchema(docSnapshot, schema));\n}\n\n/**\n *\n * @param path\n * @param entityId\n * @param schema\n * @param onSnapshot\n * @return Function to cancel subscription\n */\nexport function listenEntity<S extends EntitySchema>(\n    path: string,\n    entityId: string,\n    schema: S,\n    onSnapshot: (entity: Entity<S>) => void\n): Function {\n    return firebase.firestore()\n        .collection(path)\n        .doc(entityId)\n        .onSnapshot((docSnapshot) => onSnapshot(createEntityFromSchema(docSnapshot, schema)));\n}\n\n/**\n *\n * @param ref\n * @param schema\n * @param onSnapshot\n * @return Function to cancel subscription\n */\nexport function listenEntityFromRef<S extends EntitySchema>(\n    ref: firebase.firestore.DocumentReference,\n    schema: S,\n    onSnapshot: (entity: Entity<S>) => void\n): Function {\n    return ref\n        .onSnapshot((docSnapshot) => onSnapshot(createEntityFromSchema(docSnapshot, schema)));\n}\n\n/**\n * FireCMS uses Javascript dates internally instead of Firestore timestamps.\n * This makes it easier to interact with the rest of the libraries and\n * bindings.\n * @param data\n */\nfunction replaceTimestampsWithDates(data: any) {\n\n    if (typeof data === \"object\"\n        && !(data instanceof firebase.firestore.DocumentReference)\n        && !(data instanceof firebase.firestore.GeoPoint)) {\n\n        let result: any = {};\n        Object.entries(data).forEach(([k, v]) => {\n            if (v && v instanceof firebase.firestore.Timestamp) {\n                v = v.toDate();\n            } else if (Array.isArray(v)) {\n                v = v.map(a => replaceTimestampsWithDates(a));\n            } else if (v && typeof v === \"object\") {\n                v = replaceTimestampsWithDates(v);\n            }\n            result[k] = v;\n        });\n        return result;\n    } else {\n        return data;\n    }\n}\n\n/**\n * Add missing required fields, expected in the schema, to the values of an entity coming from Firestore\n * @param values\n * @param schema\n */\nfunction sanitizeData<S extends EntitySchema>(values: EntityValues<S>, schema: S) {\n    let result: any = values;\n    Object.entries(schema.properties).forEach(([key, property]) => {\n        if (values && values[key]) result[key] = values[key];\n        else if (property.validation?.required) result[key] = undefined;\n    });\n    return result;\n}\n\nfunction createEntityFromSchema<S extends EntitySchema>(doc: firebase.firestore.DocumentSnapshot, schema: S): Entity<S> {\n    const data = sanitizeData(replaceTimestampsWithDates(doc.data()) as EntityValues<S>, schema);\n    return {\n        id: doc.id,\n        snapshot: doc,\n        reference: doc.ref,\n        values: data || initEntityValues(schema)\n    };\n}\n\n/**\n * Functions used to set required fields to undefined in the initially created entity\n * @param schema\n */\nexport function initEntityValues<S extends EntitySchema>(schema: S): EntityValues<S> {\n    return Object.entries(schema.properties)\n        .filter(([key, property]) => property.validation?.required)\n        .map(([key, property]) => ({ [key]: undefined }))\n        .reduce((a: any, b: any) => ({ ...a, ...b }), {});\n}\n\n/**\n * Functions used to initialize filter object\n * @param schema\n */\nexport function initFilterValues<S extends EntitySchema>(schema: S): FilterValues<S> {\n    return Object.entries(schema.properties)\n        .filter(([key, property]) => property.filterable)\n        .map(([key, property]) => ({ [key]: undefined }))\n        .reduce((a: any, b: any) => ({ ...a, ...b }), {});\n}\n\n/**\n * Save entity to the specified path. Note that Firestore does not allow\n * undefined values.\n * @param path\n * @param entityId\n * @param data\n */\nexport function saveEntity(\n    path: string,\n    entityId: string | undefined,\n    data: { [fieldKey: string]: any }\n): Promise<string> {\n\n    console.log(\"Saving entity\", path, entityId, data);\n\n    let documentReference: firebase.firestore.DocumentReference<firebase.firestore.DocumentData>;\n    if (entityId)\n        documentReference = firebase.firestore()\n            .collection(path)\n            .doc(entityId);\n    else\n        documentReference = firebase.firestore()\n            .collection(path)\n            .doc();\n    return documentReference\n        .set(data, { merge: true })\n        .then(() => documentReference.id);\n}\n\n/**\n * Delete an entity\n * @param entity\n */\nexport function deleteEntity(\n    entity: Entity<any>\n): Promise<void> {\n    console.debug(\"Deleting entity\", entity);\n    return entity.reference.delete();\n}\n","import * as firebase from \"firebase\";\nimport \"firebase/storage\";\n\nexport function uploadFile(file: File, path?: string): firebase.storage.UploadTask {\n    const storageRef = firebase.storage().ref();\n    return storageRef.child(`${path}/${file.name}`).put(file);\n}\n\nexport function getDownloadURL(storagePath: string): Promise<string> {\n    return firebase.storage().ref(storagePath).getDownloadURL();\n}\n","import { Properties, Property } from \"../models\";\n\nexport function getCollectionTableProperties(properties: Properties): [string, Property][] {\n    return Object.entries(properties).filter(([_, property]) => property.includeInListView);\n}\n\n\nexport function getFilterableProperties(properties: Properties): [string, Property][] {\n    return Object.entries(properties).filter(([_, property]) => property.filterable);\n}\n","import { NumberProperty, StringProperty } from \"../../models\";\nimport { Field } from \"formik\";\nimport {\n    FormControl,\n    Grid,\n    Input,\n    MenuItem,\n    Select as MuiSelect,\n    Typography\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { FieldProps } from \"formik/dist/Field\";\n\ninterface TextFieldProps {\n    name: string,\n    property: StringProperty | NumberProperty,\n}\n\nexport default function StringNumberFilterField({ name, property }: TextFieldProps) {\n\n    const enumValues = property.enumValues;\n\n    return (\n        <Field\n            name={`${name}`}\n        >\n            {({\n                  field,\n                  form: { setFieldValue },\n                  ...props\n              }: FieldProps) => {\n\n                const [fieldOperation, fieldValue] = field.value ? field.value : [\"==\", undefined];\n                const [operation, setOperation] = useState<string>(fieldOperation);\n                const [internalValue, setInternalValue] = useState<string | number>(fieldValue);\n\n                function updateFilter(op: string, val: string | number) {\n                    setOperation(op);\n                    setInternalValue(internalValue);\n                    if (op && val) {\n                        setFieldValue(\n                            name,\n                            [op, val]\n                        );\n                    } else {\n                        setFieldValue(\n                            name,\n                            undefined\n                        );\n                    }\n                }\n\n                return (\n\n                    <FormControl\n                        fullWidth>\n                        <Typography variant={\"caption\"}>\n                            {property.title || name}\n                        </Typography>\n                        <Grid container>\n\n                            <Grid item xs={3}>\n                                <MuiSelect value={operation}\n                                           autoWidth\n                                           onChange={(evt: any) => {\n                                               updateFilter(evt.target.value, internalValue);\n                                           }}>\n                                    <MenuItem value={\"==\"}>==</MenuItem>\n                                    <MenuItem value={\">\"}>{\">\"}</MenuItem>\n                                    <MenuItem value={\"<\"}>{\"<\"}</MenuItem>\n                                    <MenuItem value={\">=\"}>{\">=\"}</MenuItem>\n                                    <MenuItem value={\"<=\"}>{\"<=\"}</MenuItem>\n                                </MuiSelect>\n                            </Grid>\n\n                            {!enumValues && <Grid item xs={9}>\n                                <Input\n                                    key={`filter-${name}`}\n                                    type={property.dataType === \"number\" ? \"number\" : undefined}\n                                    defaultValue={internalValue}\n                                    onChange={(evt) => {\n                                        const val = property.dataType === \"number\" ?\n                                            parseFloat(evt.target.value)\n                                            : evt.target.value;\n                                        updateFilter(operation, val);\n                                    }}\n                                />\n                            </Grid>}\n\n                            {enumValues && <Grid item xs={9}>\n                                <MuiSelect\n                                    fullWidth\n                                    key={`filter-${name}`}\n                                    value={internalValue}\n                                    onChange={(evt: any) => {\n                                        updateFilter(operation, evt.target.value);\n                                    }}>\n                                    {Object.entries(enumValues).map(([key, value]) => (\n                                        <MenuItem key={`select-${key}`}\n                                                  value={key}>{value as string}</MenuItem>\n                                    ))}\n                                </MuiSelect>\n                            </Grid>}\n\n                        </Grid>\n                    </FormControl>\n                );\n            }}\n        </Field>\n    );\n\n}\n","import { EntitySchema, FilterValues, Property } from \"../models\";\nimport PopupState, { bindPopover, bindTrigger } from \"material-ui-popup-state\";\nimport { Button, IconButton, Tooltip } from \"@material-ui/core\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport Popover from \"@material-ui/core/Popover\";\nimport Box from \"@material-ui/core/Box\";\nimport React from \"react\";\nimport { Form, Formik } from \"formik\";\nimport { initFilterValues } from \"../firebase/firestore\";\nimport { useStyles } from \"../styles\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport { getFilterableProperties } from \"../util/properties\";\nimport StringNumberFilterField from \"./filters/StringNumberFilterField\";\n\ninterface FilterPopupProps<S extends EntitySchema> {\n    schema: S;\n\n    filterValues?: FilterValues<S>;\n\n    onFilterUpdate(filterValues?: FilterValues<S>): void;\n}\n\nexport default function FilterPopup<S extends EntitySchema>({ schema, filterValues, onFilterUpdate }: FilterPopupProps<S>) {\n\n    const filterableProperties = getFilterableProperties(schema.properties);\n    const classes = useStyles();\n\n    function createFilterFields(values: any) {\n        return (\n            <Box className={classes.filter} width={220}>\n                {filterableProperties.map(\n                    ([key, property]) => {\n                        const formField = createFilterField(key, property);\n                        return (\n                            <Box key={`filter_${key}`} mb={1}>\n                                {formField}\n                            </Box>\n                        );\n                    })}\n            </Box>\n        );\n    }\n\n    const cleanedInitialValues = filterValues || initFilterValues(schema);\n\n    return (\n        <PopupState variant=\"popover\" popupId=\"collection-filter\">\n            {(popupState) => {\n\n                function setFilters(filterValues: FilterValues<S>) {\n                    const filters = { ...filterValues };\n                    console.log(\"Updating filters\", filters);\n                    Object.keys(filters).forEach(key => filters[key] === undefined && delete filters[key]);\n                    onFilterUpdate(filters);\n                    popupState.close();\n                }\n\n                return (\n                    <React.Fragment>\n                        {filterValues ?\n                            <Tooltip title=\"Clear filter\">\n                                <IconButton\n                                    size={\"small\"}\n                                    aria-label=\"filter clear\"\n                                    onClick={() => onFilterUpdate(undefined)}>\n                                    <ClearIcon fontSize={\"small\"}/>\n                                </IconButton>\n                            </Tooltip>\n                            :\n                            <Box style={{ width: 26 }}/>}\n\n                        <Tooltip title=\"Filter list\">\n                            <IconButton\n                                aria-label=\"filter list\"  {...bindTrigger(popupState)} >\n                                <FilterListIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Popover\n                            {...bindPopover(popupState)}\n                            anchorOrigin={{\n                                vertical: \"bottom\",\n                                horizontal: \"center\"\n                            }}\n                            transformOrigin={{\n                                vertical: \"top\",\n                                horizontal: \"center\"\n                            }}\n                        >\n                            <Box p={2}>\n                                <Formik\n                                    initialValues={cleanedInitialValues}\n                                    onSubmit={setFilters}\n                                >\n                                    {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting }) => {\n                                        return (\n                                            <Form\n                                                onSubmit={handleSubmit}\n                                                noValidate>\n                                                {createFilterFields(values)}\n                                                <Box display=\"flex\"\n                                                     justifyContent=\"flex-end\">\n                                                    <Box p={1}\n                                                         justifyContent=\"flex-end\">\n                                                        <Button\n                                                            size={\"small\"}\n                                                            variant=\"outlined\"\n                                                            color=\"primary\"\n                                                            type=\"submit\">Ok</Button>\n                                                    </Box>\n                                                </Box>\n                                            </Form>\n                                        );\n                                    }}\n                                </Formik>\n                            </Box>\n                        </Popover>\n                    </React.Fragment>\n                );\n            }}\n        </PopupState>\n    );\n}\n\nfunction createFilterField(key: string, property: Property): JSX.Element {\n\n    if (property.dataType === \"number\" || property.dataType === \"string\") {\n        return <StringNumberFilterField name={key} property={property}/>;\n    }\n\n    return (\n        <div>{`Currently the field ${property.dataType} is not supported`}</div>\n    );\n}\n\n","import React, { useEffect, useState } from \"react\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport {\n    createStyles,\n    fade,\n    makeStyles,\n    Theme\n} from \"@material-ui/core/styles\";\nimport { Box, IconButton } from \"@material-ui/core\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        search: {\n            position: \"relative\",\n            borderRadius: theme.shape.borderRadius,\n            backgroundColor: fade(theme.palette.common.black, 0.05),\n            \"&:hover\": {\n                backgroundColor: fade(theme.palette.common.black, 0.10)\n            },\n            marginLeft: 0,\n            width: \"100%\",\n            [theme.breakpoints.up(\"sm\")]: {\n                marginLeft: theme.spacing(1),\n                width: \"auto\"\n            }\n        },\n        searchIcon: {\n            padding: theme.spacing(0, 2),\n            height: \"100%\",\n            position: \"absolute\",\n            pointerEvents: \"none\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        },\n        inputRoot: {\n            color: \"inherit\"\n        },\n        inputInput: {\n            padding: theme.spacing(1, 1, 1, 0),\n            // vertical padding + font size from searchIcon\n            paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n            transition: theme.transitions.create(\"width\"),\n            width: \"100%\",\n            [theme.breakpoints.up(\"sm\")]: {\n                width: \"12ch\",\n                \"&:focus\": {\n                    width: \"20ch\"\n                }\n            }\n        }\n    })\n);\n\n\ninterface SearchBarProps {\n    onTextSearch: (searchString?: string) => void;\n}\n\nexport default function SearchBar({ onTextSearch }: SearchBarProps) {\n\n    const classes = useStyles();\n\n    const [searchText, setSearchText] = useState<string>(\"\");\n\n    /**\n     * Debounce on Search text update\n     */\n    useEffect(\n        () => {\n            const handler = setTimeout(() => {\n                if (searchText) {\n                    onTextSearch(searchText);\n                } else {\n                    onTextSearch(undefined);\n                }\n            }, 250);\n\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [searchText]\n    );\n\n    function clearText() {\n        setSearchText(\"\");\n        onTextSearch(undefined);\n    }\n\n    return (\n        <div className={classes.search}>\n            <div className={classes.searchIcon}>\n                <SearchIcon/>\n            </div>\n            <InputBase\n                placeholder=\"Search\"\n                value={searchText}\n                onChange={(event) => {\n                    setSearchText(event.target.value);\n                }}\n                classes={{\n                    root: classes.inputRoot,\n                    input: classes.inputInput\n                }}\n                endAdornment={searchText ?\n                    <IconButton\n                        size={\"small\"}\n                        onClick={clearText}>\n                        <ClearIcon fontSize={\"small\"}/>\n                    </IconButton> :\n                    <Box style={{ width: 26 }}/>\n                }\n                inputProps={{ \"aria-label\": \"search\" }}\n            />\n        </div>\n    );\n}\n","import {\n    ArrayProperty,\n    EnumType,\n    MapProperty,\n    Properties,\n    Property,\n    StringProperty\n} from \"../models\";\nimport React from \"react\";\nimport {\n    Grid,\n    List,\n    ListItem,\n    Table,\n    TableBody,\n    TableCell,\n    TableRow\n} from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\nexport interface SkeletonComponentProps<T> {\n    property: Property<T>,\n    small: boolean\n}\n\n\nexport default function SkeletonComponent<T>({\n                                                 property,\n                                                 small\n                                             }: SkeletonComponentProps<T>\n) {\n\n    if (!property) {\n        console.error(\"No property assigned for skeleton component\", property, small);\n    }\n\n    let content: JSX.Element | any;\n    if (property.dataType === \"string\") {\n        const stringProperty = property as StringProperty;\n        if (stringProperty.urlMediaType) {\n            content = renderUrlComponent(stringProperty, small);\n        } else if (stringProperty.storageMeta) {\n            content = renderImageThumbnail(small);\n        } else {\n            content = renderSkeletonText();\n        }\n    } else if (property.dataType === \"array\") {\n        const arrayProperty = property as ArrayProperty<any>;\n        if (arrayProperty.of.dataType === \"map\")\n            content = renderArrayOfMaps(arrayProperty.of.properties);\n        else if (arrayProperty.of.dataType === \"string\") {\n            if (arrayProperty.of.enumValues) {\n                content = renderArrayEnumTableCell();\n            } else if (arrayProperty.of.storageMeta) {\n                content = renderGenericArrayCell(arrayProperty.of);\n            } else {\n                content = renderArrayOfStrings();\n            }\n        } else {\n            content = renderGenericArrayCell(arrayProperty.of);\n        }\n    } else if (property.dataType === \"map\") {\n        content = renderMap(property as MapProperty<any>);\n    } else if (property.dataType === \"timestamp\") {\n        content = renderSkeletonText();\n    } else if (property.dataType === \"reference\") {\n        content = renderReference();\n    } else if (property.dataType === \"boolean\") {\n        content = renderSkeletonText();\n    } else {\n        content = renderSkeletonText();\n    }\n    return (content ? content : null);\n}\n\nfunction renderMap<T>(property: MapProperty<T>) {\n    let listProperties = Object.entries(property.properties).filter(\n        ([_, property]) => property.includeAsMapPreview\n    );\n    if (!listProperties.length) {\n        listProperties = Object.entries(property.properties).slice(0, 3);\n    }\n\n    return (\n        <List>\n            {listProperties.map(([key, property]) => (\n                <ListItem key={property.title + key}>\n                    <SkeletonComponent\n                        property={property}\n                        small={true}/>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nfunction renderArrayOfMaps(properties: Properties) {\n    let tableProperties = Object.entries(properties).filter(\n        ([_, property]) => property.includeAsMapPreview\n    );\n    if (!tableProperties.length) {\n        tableProperties = Object.entries(properties).slice(0, 3);\n    }\n\n    return (\n        <Table size=\"small\">\n            <TableBody>\n                {\n                    [0, 1, 2].map((value, index) => {\n                        return (\n                            <TableRow key={`table_${value}_${index}`}>\n                                {tableProperties.map(\n                                    ([key, property], index) => (\n                                        <TableCell\n                                            key={`table-cell-${key}`}\n                                            component=\"th\"\n                                        >\n                                            <SkeletonComponent\n                                                property={property}\n                                                small={true}/>\n                                        </TableCell>\n                                    )\n                                )}\n                            </TableRow>\n                        );\n                    })}\n            </TableBody>\n        </Table>\n    );\n}\n\nfunction renderArrayOfStrings() {\n    return (\n        <Grid>\n            {\n                [0, 1].map((value, index) => (\n                    renderSkeletonText()\n                ))}\n        </Grid>\n    );\n}\n\nfunction renderArrayEnumTableCell<T extends EnumType>() {\n    return (\n        <Grid>\n            {\n                [0, 1].map((value, index) =>\n                    renderSkeletonText()\n                )}\n        </Grid>\n    );\n}\n\nfunction renderGenericArrayCell<T extends EnumType>(\n    property: Property\n) {\n    return (\n        <Grid>\n\n            {\n                [0, 1].map((value, index) =>\n                    <React.Fragment>\n                        <SkeletonComponent property={property}\n                                           small={true}/>\n                    </React.Fragment>\n                )}\n        </Grid>\n    );\n}\n\nfunction renderUrlAudioComponent() {\n    return <Skeleton variant=\"rect\"\n                     width={300}\n                     height={100}/>;\n}\n\nexport function renderImageThumbnail(small: boolean) {\n    return <Skeleton variant=\"rect\"\n                     width={small ? 100 : 200}\n                     height={small ? 100 : 200}/>;\n}\n\nfunction renderUrlVideo(\n    small: boolean) {\n\n    return <Skeleton variant=\"rect\"\n                     width={small ? 300 : 500}\n                     height={small ? 200 : 250}/>;\n}\n\nfunction renderReference() {\n    return (\n        <Skeleton variant=\"rect\" width={200} height={100}/>\n    );\n}\n\n\nfunction renderUrlComponent(property: StringProperty, small: boolean = false) {\n    const mediaType = property.urlMediaType || property.storageMeta?.mediaType;\n    if (mediaType === \"image\") {\n        return renderImageThumbnail(small);\n    } else if (mediaType === \"audio\") {\n        return renderUrlAudioComponent();\n    } else if (mediaType === \"video\") {\n        return renderUrlVideo(small);\n    }\n    throw Error(\"URL component misconfigured\");\n}\n\n\nexport function renderSkeletonText() {\n    return <Skeleton variant=\"text\"/>;\n}\n\nexport function renderSkeletonIcon() {\n    return <Skeleton variant=\"rect\" width={24} height={24}/>;\n}\n\n","import { StringProperty } from \"../models\";\nimport React, { ReactElement, useEffect } from \"react\";\nimport { getDownloadURL } from \"../firebase\";\nimport { renderImageThumbnail } from \"./SkeletonComponent\";\n\ninterface StorageThumbnailProps {\n    storagePath: string | undefined;\n    property: StringProperty;\n    small: boolean;\n    renderUrlComponent: (property: StringProperty, url: any, small: boolean) => ReactElement;\n}\n\nexport default function StorageThumbnail({ storagePath, property, renderUrlComponent, small }: StorageThumbnailProps) {\n\n    const [url, setUrl] = React.useState<string>();\n\n    useEffect(() => {\n        if (storagePath)\n            getDownloadURL(storagePath).then(function(downloadURL) {\n                console.debug(\"File available at\", downloadURL);\n                setUrl(downloadURL);\n            });\n    }, [storagePath]);\n\n    return url ?\n        renderUrlComponent(property, url, small) :\n        renderImageThumbnail(small);\n}\n","import * as React from \"react\";\nimport { useEffect } from \"react\";\n\nimport { Box, List, ListItem } from \"@material-ui/core\";\nimport { Entity, EntitySchema } from \"../models\";\nimport * as firebase from \"firebase\";\nimport { listenEntityFromRef } from \"../firebase\";\nimport { PreviewComponentProps } from \"./PreviewComponentProps\";\nimport SkeletonComponent from \"./SkeletonComponent\";\nimport LinkIcon from \"@material-ui/icons/Link\";\n\nexport interface ReferencePreviewProps<S extends EntitySchema> {\n\n    reference: firebase.firestore.DocumentReference;\n\n    schema: S;\n\n    previewComponent: React.FunctionComponent<PreviewComponentProps<any>>;\n\n}\n\nexport default function ReferencePreview<S extends EntitySchema>(\n    {\n        reference,\n        schema,\n        previewComponent\n    }: ReferencePreviewProps<S>) {\n\n    if (!reference)\n        throw Error(\"Reference previews should be initialized with a value\");\n\n    const [entity, setEntity] = React.useState<Entity<S>>();\n\n    useEffect(() => {\n        const cancel = listenEntityFromRef<S>(reference, schema, (e => {\n            setEntity(e);\n        }));\n        return () => cancel();\n    }, [reference, schema]);\n\n\n    let listProperties = Object.entries(schema.properties).filter(([_, property]) => property.includeAsMapPreview);\n    if (!listProperties.length) {\n        listProperties = Object.entries(schema.properties).slice(0, 3);\n    }\n\n\n    return (\n        <Box display={\"flex\"}>\n\n            <Box mt={1.5}><LinkIcon color={\"disabled\"}/></Box>\n\n            <List>\n                {listProperties.map(([key, property]) => (\n                    <ListItem key={\"ref_prev\" + property.title + key}>\n                        {entity ?\n                            React.createElement(previewComponent, {\n                                value: entity.values[key],\n                                property: property,\n                                small: true\n                            })\n                            :\n                            <SkeletonComponent property={property}\n                                               small={true}/>\n                        }\n                    </ListItem>\n                ))}\n            </List>\n        </Box>\n    );\n\n}\n","import {\n    ArrayProperty,\n    EntitySchema,\n    EnumType,\n    EnumValues,\n    MapProperty,\n    Properties,\n    Property,\n    ReferenceProperty,\n    StringProperty\n} from \"../models\";\nimport React from \"react\";\nimport * as firebase from \"firebase\";\nimport {\n    Box,\n    CardMedia,\n    Chip,\n    Divider,\n    Grid,\n    List,\n    ListItem,\n    Table,\n    TableBody,\n    TableCell,\n    TableRow,\n    Typography\n} from \"@material-ui/core\";\nimport StorageThumbnail from \"./StorageThumbnail\";\nimport ReferencePreview from \"./ReferencePreview\";\nimport { PreviewComponentProps } from \"./PreviewComponentProps\";\n\nexport default function PreviewComponent<T>({\n                                                value,\n                                                property,\n                                                small\n                                            }: PreviewComponentProps<T>\n) {\n\n    if (!value) return null;\n\n    if (!property) {\n        console.error(\"No property assigned for preview component\", value, property, small);\n    }\n\n    let content: JSX.Element | any;\n    if (property.dataType === \"string\" && typeof value === \"string\") {\n        const stringProperty = property as StringProperty;\n        if (stringProperty.urlMediaType) {\n            content = renderUrlComponent(stringProperty, value, small);\n        } else if (stringProperty.storageMeta) {\n            content = renderStorageThumbnail(stringProperty, value as string, small);\n        } else if (stringProperty.enumValues) {\n            content = stringProperty.enumValues[value];\n        } else {\n            content = value;\n        }\n    } else if (property.dataType === \"array\" && value instanceof Array) {\n        const arrayProperty = property as ArrayProperty<any>;\n        if (arrayProperty.of.dataType === \"map\")\n            content = renderArrayOfMaps(arrayProperty.of.properties, value);\n        else if (arrayProperty.of.dataType === \"string\") {\n            if (arrayProperty.of.enumValues) {\n                content = renderArrayEnumTableCell(\n                    arrayProperty.of.enumValues,\n                    value\n                );\n            } else if (arrayProperty.of.storageMeta) {\n                content = renderGenericArray(arrayProperty.of, value);\n            } else {\n                content = renderArrayOfStrings(value);\n            }\n        } else {\n            content = renderGenericArray(arrayProperty.of, value);\n        }\n    } else if (property.dataType === \"map\" && typeof value === \"object\") {\n        content = renderMap(property as MapProperty<any>, value);\n    } else if (property.dataType === \"timestamp\" && value instanceof Date) {\n        content = value && value.toLocaleString();\n    } else if (property.dataType === \"reference\" && value instanceof firebase.firestore.DocumentReference) {\n        content = value && renderReference(value, (property as ReferenceProperty<any>).schema);\n    } else if (property.dataType === \"boolean\") {\n        content = value ? \"Yes\" : \"No\";\n    } else {\n        content = typeof value === \"object\" ? (value as unknown as object).toString() : value;\n    }\n    return (content ? content : null);\n}\n\nfunction renderMap<T>(property: MapProperty<T>, value: T) {\n    let listProperties = Object.entries(property.properties).filter(\n        ([_, property]) => property.includeAsMapPreview\n    );\n    if (!listProperties.length) {\n        listProperties = Object.entries(property.properties).slice(0, 3);\n    }\n\n    return (\n        <List>\n            {listProperties.map(([key, property]) => (\n                <ListItem key={property.title + key}>\n                    <PreviewComponent value={value[key] as any}\n                                      property={property}\n                                      small={true}/>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nfunction renderArrayOfMaps(properties: Properties, values: any[]) {\n    let tableProperties = Object.entries(properties).filter(\n        ([_, property]) => property.includeAsMapPreview\n    );\n    if (!tableProperties.length) {\n        tableProperties = Object.entries(properties).slice(0, 3);\n    }\n\n    return (\n        <Table size=\"small\">\n            <TableBody>\n                {values &&\n                values.map((value, index) => {\n                    return (\n                        <TableRow key={`table_${value}_${index}`}>\n                            {tableProperties.map(\n                                ([key, property], index) => (\n                                    <TableCell\n                                        key={`table-cell-${key}`}\n                                        component=\"th\"\n                                    >\n                                        <PreviewComponent\n                                            value={value[key] as any}\n                                            property={property}\n                                            small={true}/>\n                                    </TableCell>\n                                )\n                            )}\n                        </TableRow>\n                    );\n                })}\n            </TableBody>\n        </Table>\n    );\n}\n\nfunction renderArrayOfStrings(values: string[]) {\n    if (values && !Array.isArray(values)) {\n        return <div>{`Unexpected value: ${values}`}</div>;\n    }\n    return (\n        <Grid>\n            {values &&\n            values.map((value, index) => (\n                <Chip\n                    size=\"small\"\n                    key={value}\n                    label={\n                        <Typography variant=\"caption\" color=\"textPrimary\">\n                            {value}\n                        </Typography>\n                    }\n                />\n            ))}\n        </Grid>\n    );\n}\n\nfunction renderArrayEnumTableCell<T extends EnumType>(\n    enumValues: EnumValues<T>,\n    values: T[]\n) {\n    return (\n        <Grid>\n            {values &&\n            values.map((value, index) =>\n                renderPreviewEnumChip(enumValues, value)\n            )}\n        </Grid>\n    );\n}\n\nfunction renderGenericArray<T extends EnumType>(\n    property: Property,\n    values: T[]\n) {\n    return (\n        <Grid>\n\n            {values &&\n            values.map((value, index) =>\n                <React.Fragment>\n                    <Box m={1}>\n                        <PreviewComponent value={value}\n                                          property={property}\n                                          small={true}/>\n                    </Box>\n                    {index < values.length - 1 && <Divider/>}\n                </React.Fragment>\n            )}\n        </Grid>\n    );\n}\n\nfunction renderUrlAudioComponent(value: any) {\n    return (\n        <audio controls src={value}>\n            Your browser does not support the\n            <code>audio</code> element.\n        </audio>\n    );\n}\n\nfunction renderUrlImageThumbnail(url: string,\n                                 small: boolean) {\n    return (\n        <Box\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            width={small ? 100 : 200}\n            height={small ? 100 : 200}>\n            <img src={url}\n                 style={{\n                     maxWidth: small ? 100 : 200,\n                     maxHeight: small ? 100 : 200\n                 }}/>\n        </Box>\n    );\n}\n\nfunction renderUrlVideo(url: string,\n                        small: boolean) {\n    return (\n        <CardMedia\n            style={{ maxWidth: small ? 300 : 500 }}\n            component=\"video\"\n            controls\n            image={url}\n        />\n    );\n}\n\nfunction renderReference(\n    ref: firebase.firestore.DocumentReference,\n    refSchema: EntitySchema\n) {\n    return (\n        <ReferencePreview\n            reference={ref}\n            schema={refSchema}\n            previewComponent={PreviewComponent}\n        />\n    );\n}\n\nexport function renderUrlComponent(property: StringProperty, url: any,\n                                   small: boolean = false) {\n    const mediaType = property.urlMediaType || property.storageMeta?.mediaType;\n    if (mediaType === \"image\") {\n        return renderUrlImageThumbnail(url, small);\n    } else if (mediaType === \"audio\") {\n        return renderUrlAudioComponent(url);\n    } else if (mediaType === \"video\") {\n        return renderUrlVideo(url, small);\n    }\n    throw Error(\"URL component misconfigured\");\n}\n\nexport function renderStorageThumbnail(\n    property: StringProperty,\n    storagePath: string | undefined,\n    small: boolean\n) {\n    return (\n        <StorageThumbnail\n            storagePath={storagePath}\n            property={property}\n            small={small}\n            renderUrlComponent={renderUrlComponent}\n        />\n    );\n}\n\nexport function renderPreviewEnumChip<T extends EnumType>(\n    enumValues: EnumValues<T>,\n    value: any\n) {\n    const label = enumValues[value as T];\n    return (\n        <Chip\n            size=\"small\"\n            key={value}\n            label={\n                <Typography\n                    variant=\"caption\"\n                    color={label ? \"textPrimary\" : \"error\"}\n                >\n                    {label || value}\n                </Typography>\n            }\n        />\n    );\n}\n\n","import React, { useEffect } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useStyles, useToolbarStyles } from \"../styles\";\nimport { Box, Grid, IconButton, TableContainer } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport {\n    AdditionalColumnDelegate,\n    Entity,\n    EntitySchema,\n    FilterValues,\n    Property\n} from \"../models\";\nimport { fetchEntity, listenCollection } from \"../firebase\";\nimport FilterPopup from \"./FilterPopup\";\nimport { TextSearchDelegate } from \"../text_search_delegate\";\nimport SearchBar from \"./SearchBar\";\nimport {\n    getCollectionTableProperties,\n    getFilterableProperties\n} from \"../util/properties\";\nimport PreviewComponent from \"../preview/PreviewComponent\";\nimport SkeletonComponent, { renderSkeletonText } from \"../preview/SkeletonComponent\";\n\ninterface CollectionTableProps<S extends EntitySchema> {\n    /**\n     * Absolute collection path\n     */\n    collectionPath: string;\n\n    /**\n     * Schema of the entity displayed by this collection\n     */\n    schema: S;\n\n    /**\n     * Show the toolbar in this collection\n     */\n    includeToolbar: boolean,\n\n    /**\n     * In case this table should have some filters set\n     */\n    initialFilter?: FilterValues<S>;\n\n    /**\n     * In case this table should have some filters set\n     */\n    paginationEnabled: boolean,\n\n    /**\n     * If a text search delegate is provided, a searchbar is displayed\n     */\n    textSearchDelegate?: TextSearchDelegate,\n\n    /**\n     * You can add additional columns to the collection view by implementing\n     * an additional column delegate.\n     */\n    additionalColumns?: AdditionalColumnDelegate<S>[];\n\n    /**\n     * Should the table add an edit button\n     */\n    onEntityEdit?(collectionPath: string, entity: Entity<S>): void;\n\n    /**\n     * Callback when anywhere on the table is clicked\n     */\n    onEntityClick?(collectionPath: string, entity: Entity<S>): void;\n\n    /**\n     * Callback when the delete button of an entity is clicked\n     */\n    onEntityDelete?(collectionPath: string, entity: Entity<S>): void;\n}\n\n/**\n * This component renders a collection of entities in tabular format.\n * @param props\n * @constructor\n */\nexport default function CollectionTable<S extends EntitySchema>(props: CollectionTableProps<S>) {\n\n    const classes = useStyles();\n\n    const [data, setData] = React.useState<Entity<S>[]>([]);\n    const [dataLoading, setDataLoading] = React.useState<boolean>();\n    const [dataLoadingError, setDataLoadingError] = React.useState<Error | undefined>();\n\n    const [textSearchInProgress, setTextSearchInProgress] = React.useState<boolean>(false);\n    const [textSearchLoading, setTextSearchLoading] = React.useState<boolean>(false);\n    const [textSearchData, setTextSearchData] = React.useState<Entity<S>[]>([]);\n\n    const [filter, setFilter] = React.useState<FilterValues<S> | undefined>(props.initialFilter);\n    const [order, setOrder] = React.useState<Order>();\n    const [orderBy, setOrderBy] = React.useState<string>();\n    const [page, setPage] = React.useState<number>(0);\n    const [pageKeys, setPageKeys] = React.useState<any[]>([]);\n    const [rowsPerPage, setRowsPerPage] = React.useState<number | undefined>(props.paginationEnabled ? 10 : undefined);\n\n    useEffect(() => {\n        const startAfter = pageKeys[page];\n        setDataLoading(true);\n\n        const cancelSubscription = listenCollection<S>(\n            props.collectionPath,\n            props.schema,\n            entities => {\n                setDataLoading(false);\n                setDataLoadingError(undefined);\n                if (entities.length) {\n                    const lastEntity = entities[entities.length - 1];\n                    pageKeys[page + 1] = orderBy ? lastEntity.values[orderBy] : lastEntity.snapshot;\n                }\n                setData(entities);\n            },\n            (error) => {\n                setDataLoading(false);\n                setDataLoadingError(error);\n            },\n            filter,\n            rowsPerPage,\n            startAfter,\n            orderBy,\n            order);\n\n        return () => cancelSubscription();\n    }, [props.collectionPath, props.schema, rowsPerPage, page, order, orderBy, pageKeys, filter]);\n\n    const resetPagination = () => {\n        setPage(0);\n        setPageKeys([]);\n    };\n\n    const handleRequestSort = (event: React.MouseEvent<unknown>, property: string) => {\n        resetPagination();\n        const isDesc = orderBy === property && order === \"desc\";\n        const isAsc = orderBy === property && order === \"asc\";\n        setOrder(isDesc ? \"asc\" : (isAsc ? undefined : \"desc\"));\n        setOrderBy(isAsc ? undefined : property);\n    };\n\n    const onEntityClick = (event: React.MouseEvent<HTMLTableRowElement>, entity: Entity<S>) => {\n        if (props.onEntityClick) {\n            event.stopPropagation();\n            props.onEntityClick(props.collectionPath, entity);\n        }\n    };\n\n    const onEntityEdit = (event: React.MouseEvent<HTMLButtonElement>, entity: Entity<S>) => {\n        if (props.onEntityEdit) {\n            event.stopPropagation();\n            props.onEntityEdit(props.collectionPath, entity);\n        }\n    };\n\n    const onEntityDelete = (event: React.MouseEvent<HTMLButtonElement>, entity: Entity<S>) => {\n        if (props.onEntityDelete) {\n            event.stopPropagation();\n            props.onEntityDelete(props.collectionPath, entity);\n        }\n    };\n\n    const onFilterUpdate = (filterValues: FilterValues<S>) => {\n        setFilter(filterValues);\n    };\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const emptyRows = rowsPerPage ? data.length - rowsPerPage : 0;\n    const tableViewFields = getCollectionTableProperties(props.schema.properties);\n\n    const hasEditButton = !!props.onEntityEdit;\n    const hasDeleteButton = !!props.onEntityDelete;\n\n    const buildTableRowButtons = <S extends EntitySchema>(entity: Entity<S> | null, index: number) => (\n        <TableCell key={`row-buttons-${index}`}>\n            <Box minWidth={96}>\n                {hasEditButton && (\n                    <IconButton aria-label=\"edit\"\n                                disabled={!entity}\n                                onClick={(event) => entity && onEntityEdit(event, entity)}>\n                        <EditIcon color={\"action\"}/>\n                    </IconButton>\n                )}\n\n                {hasDeleteButton && (\n                    <IconButton aria-label=\"delete\"\n                                disabled={!entity}\n                                onClick={(event) => entity && onEntityDelete(event, entity)}>\n                        <DeleteIcon/>\n                    </IconButton>\n                )}\n            </Box>\n\n            <Box maxWidth={96}\n                 component=\"div\"\n                 textAlign=\"center\"\n                 textOverflow=\"ellipsis\"\n                 overflow=\"auto\">\n                {entity ?\n                    <Typography variant={\"caption\"}> {entity.id} </Typography>\n                    :\n                    renderSkeletonText()\n                }\n            </Box>\n\n        </TableCell>\n    );\n\n    function buildTableRow<S extends EntitySchema>(entity: Entity<S>, index: number) {\n        return (\n            <TableRow\n                key={`table_${entity.snapshot.id}_${index}`}\n                hover\n                onClick={(event) => onEntityClick(event, entity)}\n                tabIndex={-1}\n            >\n\n                {buildTableRowButtons(entity, index)}\n\n                {tableViewFields\n                    .map(([key, field], index) =>\n                        renderTableCell(index, entity.values[key], key, field))}\n\n                {props.additionalColumns && props.additionalColumns\n                    .map((delegate, index) =>\n                        renderCustomTableCell(index, delegate.builder(entity)))}\n\n            </TableRow>\n        );\n    }\n\n\n    function buildTableRowSkeleton<S extends EntitySchema>(index: number) {\n        const buttonsCell = buildTableRowButtons(null, index);\n\n        return (\n            <TableRow\n                key={`table_row_skeleton_${index}`}\n                tabIndex={-1}\n            >\n\n                {buttonsCell}\n\n                {tableViewFields\n                    .map(([key, field], index) =>\n                        renderTableSkeletonCell(index, key, field))}\n\n                {props.additionalColumns && props.additionalColumns\n                    .map((delegate, index) =>\n                        renderSkeletonText())}\n\n            </TableRow>\n        );\n    }\n\n    const skeletonBody = <TableBody>\n        {[0, 1, 2, 3, 4]\n            .map((_, index) => {\n                return buildTableRowSkeleton(index);\n            })}\n    </TableBody>;\n\n    const tableBody = <TableBody>\n        {textSearchInProgress && textSearchData\n            .map((entity, index) => {\n                return buildTableRow(entity, index);\n            })}\n\n        {!textSearchInProgress && data\n            .map((entity, index) => {\n                return buildTableRow(entity, index);\n            })}\n\n        {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n                <TableCell colSpan={tableViewFields.length}/>\n            </TableRow>\n        )}\n    </TableBody>;\n\n    const body =\n        (dataLoading || textSearchLoading) ? skeletonBody : tableBody;\n\n    const textSearchEnabled = !!props.textSearchDelegate;\n\n    async function onTextSearch(searchString?: string) {\n        if (textSearchEnabled) {\n            setTextSearchLoading(true);\n            const textSearchDelegate = props.textSearchDelegate as TextSearchDelegate;\n            if (!searchString) {\n                setTextSearchData([]);\n                setTextSearchInProgress(false);\n            } else {\n                setTextSearchInProgress(true);\n                const ids = await textSearchDelegate.performTextSearch(searchString);\n                const promises: Promise<Entity<S>>[] = ids\n                    .map((id) => fetchEntity(props.collectionPath, id, props.schema));\n                const entities = await Promise.all(promises);\n                setTextSearchData(entities);\n            }\n            setTextSearchLoading(false);\n        }\n    }\n\n    return (\n\n        <TableContainer component={Paper} elevation={1}>\n\n            {props.includeToolbar &&\n            <CollectionTableToolbar schema={props.schema}\n                                    filterValues={filter}\n                                    onTextSearch={textSearchEnabled ? onTextSearch : undefined}\n                                    collectionPath={props.collectionPath}\n                                    onFilterUpdate={onFilterUpdate}/>}\n\n            {dataLoadingError &&\n            <Box m={5}>\n                <Grid container spacing={2} justify=\"center\">\n                    <Grid container justify=\"center\">\n                        <Typography\n                            variant={\"h6\"}\n                            color={\"error\"}>{dataLoadingError.name}</Typography>\n                    </Grid>\n                    <Grid container justify=\"center\">\n                        <Typography\n                            color={\"error\"}>{dataLoadingError.message}</Typography>\n                    </Grid>\n                </Grid>\n            </Box>}\n\n            {!dataLoadingError &&\n            <div className={classes.tableWrapper}>\n                <Table stickyHeader\n                       className={classes.table}\n                       aria-labelledby=\"tableTitle\"\n                       size={\"medium\"}\n                       aria-label=\"enhanced table\"\n                >\n                    <CollectionTableHead\n                        classes={classes}\n                        schema={props.schema}\n                        order={order}\n                        orderBy={orderBy}\n                        sortable={!textSearchData.length}\n                        additionalColumns={props.additionalColumns}\n                        onRequestSort={handleRequestSort}\n                    />\n                    {body}\n                </Table>\n            </div>\n            }\n\n            {props.paginationEnabled && !textSearchInProgress && rowsPerPage &&\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={Infinity}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                backIconButtonProps={{\n                    \"aria-label\": \"previous page\"\n                }}\n                nextIconButtonProps={{\n                    \"aria-label\": \"next page\"\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n            }\n\n        </TableContainer>\n    );\n}\n\n\ntype Order = \"asc\" | \"desc\" | undefined;\n\ninterface CollectionTableHeadProps<S extends EntitySchema> {\n    classes: ReturnType<typeof useStyles>;\n    onRequestSort: (event: React.MouseEvent<unknown>, property: string) => void;\n    order?: Order;\n    orderBy?: string;\n    sortable: boolean;\n    schema: S;\n    additionalColumns?: AdditionalColumnDelegate<S>[];\n}\n\ninterface HeadCell {\n    index: number;\n    id: string;\n    label: string;\n    align: \"right\" | \"left\";\n}\n\nfunction CollectionTableHead<S extends EntitySchema>({\n                                                         classes,\n                                                         order,\n                                                         orderBy,\n                                                         sortable,\n                                                         onRequestSort,\n                                                         schema,\n                                                         additionalColumns\n                                                     }: CollectionTableHeadProps<S>) {\n\n\n    const createSortHandler = (property: string) => (event: React.MouseEvent<unknown>) => {\n        onRequestSort(event, property);\n    };\n\n    const headCells: HeadCell[] = getCollectionTableProperties(schema.properties)\n        .map(([key, field], index) => ({\n            index: index,\n            id: key,\n            align: getCellAlignment(field),\n            label: field.title || key\n        }));\n\n    return (\n        <TableHead>\n            <TableRow>\n\n                <TableCell\n                    key={\"header-id\"}\n                    align={\"center\"}\n                    padding={\"default\"}>Id</TableCell>\n\n                {headCells.map(headCell => {\n                    const active = sortable && orderBy === headCell.id;\n                    return (\n                        <TableCell\n                            key={headCell.id}\n                            align={headCell.align}\n                            padding={\"default\"}\n                            sortDirection={active ? order : false}\n                        >\n                            <TableSortLabel\n                                active={active}\n                                direction={order}\n                                onClick={createSortHandler(headCell.id)}\n                            >\n                                {headCell.label}\n                                {active ?\n                                    <span className={classes.visuallyHidden}>\n                                         {order === \"desc\" ? \"Sorted descending\" : (order === \"asc\" ? \"Sorted ascending\" : \"\")}\n                                    </span>\n                                    : null}\n                            </TableSortLabel>\n                        </TableCell>\n                    );\n                })}\n\n                {additionalColumns && additionalColumns.map((additionalColumn, index) => {\n                    return (\n                        <TableCell\n                            key={`head-additional-${index}`}\n                            align={\"left\"}\n                            padding={\"default\"}\n                        >\n                            {additionalColumn.title}\n                        </TableCell>\n                    );\n                })}\n\n            </TableRow>\n        </TableHead>\n    );\n}\n\ninterface CollectionTableToolbarProps<S extends EntitySchema> {\n    collectionPath: string;\n    schema: S;\n    filterValues?: FilterValues<S>;\n    onTextSearch?: (searchString?: string) => void;\n\n    onFilterUpdate?(filterValues: FilterValues<S>): void;\n}\n\nfunction CollectionTableToolbar<S extends EntitySchema>(props: CollectionTableToolbarProps<S>) {\n    const classes = useToolbarStyles();\n\n    const filterableProperties = getFilterableProperties(props.schema.properties);\n\n    return (\n        <Toolbar\n            className={classes.root}\n        >\n\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"space-between\"\n                alignItems=\"center\"\n            >\n\n                <Grid item>\n                    <Box className={classes.title}>\n                        <Typography variant=\"h6\">\n                            All {props.schema.name}\n                        </Typography>\n                        <Typography variant={\"caption\"}>\n                            {props.collectionPath}\n                        </Typography>\n                    </Box>\n                </Grid>\n                <Grid item>\n                    {props.onTextSearch &&\n                    <Box className={classes.searchBar}>\n                        <SearchBar\n                            onTextSearch={props.onTextSearch}/>\n                    </Box>\n                    }\n                </Grid>\n                <Grid item>\n                    {props.onFilterUpdate && filterableProperties.length > 0 &&\n                    <FilterPopup schema={props.schema}\n                                 filterValues={props.filterValues}\n                                 onFilterUpdate={props.onFilterUpdate}/>\n                    }\n                </Grid>\n            </Grid>\n\n\n        </Toolbar>\n    );\n}\n\n\nfunction renderTableCell(index: number, value: any, key: string, property: Property) {\n    return (\n        <TableCell key={`table-cell-${key}`} component=\"th\"\n                   align={getCellAlignment(property)}>\n\n            <PreviewComponent value={value}\n                              property={property}\n                              small={false}/>\n        </TableCell>\n    );\n}\n\nfunction renderTableSkeletonCell(index: number, key: string, property: Property) {\n    return (\n        <TableCell key={`table-cell-${key}`} component=\"th\"\n                   align={getCellAlignment(property)}>\n\n            <SkeletonComponent\n                property={property}\n                small={false}/>\n        </TableCell>\n    );\n}\n\nfunction renderCustomTableCell(index: number, element: React.ReactNode) {\n    return (\n        <TableCell key={`table-additional-${index}`} component=\"th\">\n            {element}\n        </TableCell>\n    );\n}\n\nfunction getCellAlignment(property: Property): \"right\" | \"left\" {\n    return property.dataType === \"number\" || property.dataType === \"timestamp\" ? \"right\" : \"left\";\n}\n\n","import { EntityCollectionView } from \"../models\";\nimport hash from \"object-hash\";\n\nconst DATA_PATH = `/c`;\n\nexport type RouteType = \"entity\" | \"collection\";\n\nexport interface PathConfiguration {\n    entityPlaceholderPath: string; // path with placeholders instead of ids\n    view: EntityCollectionView<any>;\n    entries: {\n        routeType: RouteType;\n        placeHolderId:string;\n        fullPath: string;\n    }[];\n    breadcrumbs: BreadcrumbEntry[];\n}\n\nexport interface BreadcrumbEntry {\n    entityPlaceholderPath: string; // path with placeholders instead of ids\n    view: EntityCollectionView<any>;\n    placeHolderId?: string;\n}\n\n/**\n * Generate all paths related to a list of entity views\n * @param entityCollectionView\n * @param basePath\n * @param previousBreadcrumbs\n */\nexport function getAllPaths(entityCollectionView: EntityCollectionView<any>[],\n                            basePath: string = \"\",\n                            previousBreadcrumbs: BreadcrumbEntry[] = []): PathConfiguration[] {\n\n    const pathConfigurations: PathConfiguration[] = [];\n    entityCollectionView.forEach((view) => {\n\n        const viewPath = removeInitialSlash(view.relativePath);\n        const path = removeInitialSlash(`${basePath}/${viewPath}`);\n        const placeHolderId = getPlaceHolderIdForView(path || \"\", view);\n        const entityPath = `${path}/:${placeHolderId}`;\n\n        const breadcrumbs = [\n            ...previousBreadcrumbs,\n            {\n                entityPlaceholderPath: path,\n                view\n            },\n            {\n                entityPlaceholderPath: entityPath,\n                placeHolderId,\n                view\n            }];\n\n        const pathConfiguration: PathConfiguration = {\n            entries: [\n                {\n                    routeType: \"entity\",\n                    placeHolderId,\n                    fullPath: `${path}/new`\n                },\n                {\n                    routeType: \"entity\",\n                    placeHolderId,\n                    fullPath: entityPath\n                },\n                {\n                    routeType: \"collection\",\n                    placeHolderId,\n                    fullPath: path\n                }\n            ],\n            breadcrumbs: breadcrumbs,\n            entityPlaceholderPath: path,\n            view\n        };\n\n        // The order in which this routes are added matters\n        if (view.schema.subcollections) {\n            getAllPaths(view.schema.subcollections, entityPath, breadcrumbs)\n                .forEach((pathConfiguration) => pathConfigurations.push(pathConfiguration));\n        }\n        pathConfigurations.push(pathConfiguration);\n    });\n    return pathConfigurations;\n}\n\nexport function replacePathIdentifiers(params: Record<string, string>, basePath: string) {\n    let replacedPath = basePath;\n    Object.entries(params).forEach(([key, value]) => replacedPath = replacedPath.replace(`:${key}`, value));\n    return replacedPath;\n}\n\nexport function getPlaceHolderIdForView(basePath: string, view: EntityCollectionView<any>): string {\n    return hash({ basePath, ...view }).slice(0, 10);\n}\n\nexport function getEntityPath(entityId: string, basePath: string) {\n    return `${DATA_PATH}/${basePath}/${entityId}`;\n}\n\nexport function getRouterNewEntityPath(basePath: string) {\n    return `${DATA_PATH}/${basePath}/new`;\n}\n\nexport function buildDataPath(absolutePath:string){\n    return `${DATA_PATH}/${removeInitialSlash(absolutePath)}`;\n\n}\n\nexport function removeInitialSlash(s: string) {\n    if (s.startsWith(\"/\"))\n        return s.slice(1);\n    else return s;\n}\n\nexport function addInitialSlash(s: string) {\n    if (s.startsWith(\"/\"))\n        return s;\n    else return `/${s}`;\n}\n","import firebase from \"firebase\";\nimport * as React from \"react\";\nimport { TextSearchDelegate } from \"./text_search_delegate\";\nimport { CMSFieldProps } from \"./form/form_props\";\n\n/**\n * This interface represents a view that includes a collection of entities.\n * It can be in the root level of the configuration, defining the main\n * menu navigation.\n */\nexport interface EntityCollectionView<S extends EntitySchema> {\n\n    /**\n     * Plural name of the view. E.g. 'products'\n     */\n    name: string;\n\n    /**\n     * Relative Firestore path of this view to its parent.\n     * If this view is in the root the path is equal to the absolute one.\n     * This path also determines the URL in FireCMS\n     */\n    relativePath: string;\n\n    /**\n     * Schema representing the entities of this view\n     */\n    schema: S;\n\n    /**\n     * Is pagination enabled in this view. True if not specified\n     */\n    pagination?: boolean;\n\n    /**\n     * You can add additional columns to the collection view by implementing\n     * an additional column delegate.\n     */\n    additionalColumns?: AdditionalColumnDelegate<S>[];\n\n    /**\n     * If a text search delegate is supplied, a search bar is displayed on top\n     */\n    textSearchDelegate?: TextSearchDelegate;\n\n    /**\n     * Can the elements in this collection be deleted. Defaults to true\n     */\n    deleteEnabled?: boolean;\n\n    /**\n     * Following the Firestore document and collection schema, you can add\n     * subcollections to your entity in the same way you define the root\n     * collections.\n     */\n    subcollections?: EntityCollectionView<any>[];\n}\n\n/**\n * Specification for defining an entity\n */\nexport interface EntitySchema {\n\n    /**\n     * Singular name of the entity as displayed in an Add button . E.g. Product\n     */\n    name: string;\n\n    /**\n     * Description of this entity\n     */\n    description?: string;\n\n    /**\n     * If this property is not set Firestore will create a random ID.\n     * You can set the value to true to allow the users to choose the ID.\n     * You can also pass a set of values (as an EnumValues object) to allow them\n     * to pick from only those\n     */\n    customId?: boolean | EnumValues<string>;\n\n    /**\n     * Set of properties that compose an entity\n     */\n    properties: Properties;\n\n}\n\n/**\n * New or existing status\n */\nexport enum EntityStatus { new = \"new\", existing = \"existing\"}\n\n/**\n * Representation of an entity fetched from Firestore\n */\nexport interface Entity<S extends EntitySchema> {\n    id: string;\n    snapshot: firebase.firestore.DocumentSnapshot;\n    reference: firebase.firestore.DocumentReference;\n    values: EntityValues<S>\n}\n\n/**\n * This type represents a record of key value pairs as described in an\n * entity schema.\n */\nexport type EntityValues<S extends EntitySchema> = {\n    [K in keyof S[\"properties\"]]: S[\"properties\"][K] extends Property<infer X> ? X : never\n};\n\ntype DataType =\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"map\"\n    | \"array\"\n    | \"timestamp\"\n    | \"geopoint\"\n    | \"reference\";\n\nexport type MediaType =\n    | \"image\"\n    | \"video\"\n    | \"audio\";\n\nexport type Property<T = any, ArrayT = any> =\n    T extends string ? StringProperty :\n        T extends number ? NumberProperty :\n            T extends boolean ? BooleanProperty :\n                T extends firebase.firestore.Timestamp ? TimestampProperty :\n                    T extends firebase.firestore.GeoPoint ? GeopointProperty :\n                        T extends firebase.firestore.DocumentReference ? ReferenceProperty<EntitySchema> :\n                            T extends Array<ArrayT> ? ArrayProperty<ArrayT> :\n                                MapProperty<T>;\n\n/**\n * Use this interface for adding additional columns to entity collection views.\n * If you need to do some async loading you can use AsyncPreviewComponent\n */\nexport interface AdditionalColumnDelegate<S extends EntitySchema> {\n\n    title: string;\n\n    builder: (entity:Entity<S>) => React.ReactNode;\n\n}\n\n/**\n * Interface including all common properties of a CMS property\n */\nexport interface BaseProperty<T> {\n\n    /**\n     * Firestore datatype of the property\n     */\n    dataType: DataType;\n\n    /**\n     * Property title (e.g. Product)\n     */\n    title?: string;\n\n    /**\n     * Property description\n     */\n    description?: string;\n\n    /**\n     * Rules for validating this property\n     */\n    validation?: PropertyValidationSchema,\n\n    /**\n     * Is this property displayed in the collection view\n     */\n    includeInListView?: boolean;\n\n    /**\n     * When the entity is rendered as the target of a reference or as part of a\n     * map, should this property be included.\n     * Basically, if it is rendered in second level references.\n     * e.g: One entity -> Array property -> This property\n     * If includeAsMapPreview is not specified in any property of an entity, when\n     * the given entity is rendered, the first 3 properties are displayed.\n     */\n    includeAsMapPreview?: boolean;\n\n    /**\n     * Should this property have a filter entry in the collection view.\n     * Defaults to false\n     */\n    filterable?: boolean;\n\n    /**\n     * Is this a read only property\n     */\n    disabled?: boolean;\n\n    /**\n     * If you need to render a custom field.\n     */\n    customField?: React.ComponentType<CMSFieldProps<T>>;\n\n    /**\n     * Additional props that are passed to the default field generated by\n     * FireCMS or to the customField\n     */\n    additionalProps?: any;\n}\n\nexport type EnumType = number | string ;\n\n/**\n * We use this interface to define mapping between string or number values in\n * Firestore to a label (such in a select dropdown)\n * The key in this Record is the value saved in Firetore, and the value in\n * this record is the label displayed in the UI\n */\nexport type EnumValues<T extends EnumType> = Record<T, string>; // id -> Label\n\n/**\n * Record of properties of an entity or a map property\n */\nexport type Properties = Record<string, Property>;\n\n/**\n * Rules to validate a property\n */\nexport interface PropertyValidationSchema {\n    required?: boolean;\n    requiredMessage?: string;\n}\n\nexport interface NumberProperty extends BaseProperty<number> {\n    dataType: \"number\";\n\n    /**\n     * You can use the enum values providing a map of possible\n     * exclusive values the property can take, mapped to the label that it is\n     * displayed in the dropdown.\n     */\n    enumValues?: EnumValues<number>;\n}\n\nexport interface BooleanProperty extends BaseProperty<boolean> {\n    dataType: \"boolean\";\n}\n\nexport interface TimestampProperty extends BaseProperty<firebase.firestore.Timestamp> {\n    dataType: \"timestamp\";\n}\n\n// TODO: currently this is the only unsupported field\nexport interface GeopointProperty extends BaseProperty<firebase.firestore.GeoPoint> {\n    dataType: \"geopoint\";\n}\n\nexport interface ReferenceProperty<S extends EntitySchema> extends BaseProperty<firebase.firestore.DocumentReference> {\n\n    dataType: \"reference\";\n\n    /**\n     * Absolute collection path.\n     */\n    collectionPath: string;\n\n    /**\n     * Schema of the entity this reference points to.\n     */\n    schema: S,\n\n    /**\n     * When the dialog for selecting the value of this reference, should\n     * a filter be applied to the possible entities.\n     */\n    filter?: FilterValues<S>;\n}\n\nexport interface StringProperty extends BaseProperty<string> {\n\n    dataType: \"string\";\n\n    /**\n     * You can specify a `StorageMeta` configuration. It is used to\n     * indicate that this string refers to a path in Google Cloud Storage.\n     */\n    storageMeta?: StorageMeta;\n\n    /**\n     * If the value of this property is a URL, we can use the urlMediaType\n     * to render the content\n     */\n    urlMediaType?: MediaType;\n\n    /**\n     * You can use the enum values providing a map of possible\n     * exclusive values the property can take, mapped to the label that it is\n     * displayed in the dropdown.\n     */\n    enumValues?: EnumValues<string>;\n}\n\nexport interface ArrayProperty<T> extends BaseProperty<T[]> {\n\n    dataType: \"array\";\n\n    /**\n     * The property of this array. You can specify any property.\n     */\n    of: Property<T>;\n}\n\nexport interface MapProperty<T> extends BaseProperty<T> {\n\n    dataType: \"map\";\n\n    /**\n     * Record of properties included in this map.\n     */\n    properties: Properties;\n}\n\n/**\n * Additional configuration related to Storage related fields\n */\nexport interface StorageMeta {\n\n    /**\n     * Media type of this reference, used for displaying the preview\n     */\n    mediaType: MediaType;\n\n    /**\n     * Absolute path in you bucket\n     */\n    storagePath: string;\n\n    /**\n     * File MIME types that can be uploaded to this reference\n     */\n    acceptedFiles?: StorageFileTypes[];\n}\n\n/**\n * MIME types for storage fields\n */\nexport type StorageFileTypes =\n    \"image/*\"\n    | \"video/*\"\n    | \"audio/*\"\n    | \"application/*\"\n    | \"text/*\"\n    | \"font/*\" ;\n\n/**\n * Used to define filters applied in collections\n */\nexport type FilterValues<S extends EntitySchema> = { [K in keyof Partial<S[\"properties\"]>]: [WhereFilterOp, any] };\n\n/**\n * Filter conditions in a `Query.where()` clause are specified using the\n * strings '<', '<=', '==', '>=', '>', 'array-contains', 'in', and 'array-contains-any'.\n */\nexport type WhereFilterOp =\n    | \"<\"\n    | \"<=\"\n    | \"==\"\n    | \">=\"\n    | \">\"\n    | \"array-contains\"\n    | \"in\"\n    | \"array-contains-any\";\n","import * as React from \"react\";\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableRow\n} from \"@material-ui/core\";\nimport { Entity, EntitySchema } from \"../models\";\nimport PreviewComponent from \"./PreviewComponent\";\n\nexport interface EntityPreviewProps<S extends EntitySchema> {\n\n    entity: Entity<S>;\n\n    schema: S;\n\n}\n\nexport default function EntityPreview<S extends EntitySchema>(\n    {\n        entity,\n        schema\n    }: EntityPreviewProps<S>) {\n\n    return (\n        <TableContainer >\n            <Table aria-label=\"simple table\">\n                <TableBody>\n                    <TableRow key={\"entity_prev_id\"}>\n                        <TableCell align=\"right\" component=\"th\" scope=\"row\">\n                            Id\n                        </TableCell>\n                        <TableCell>\n                            {entity.id}\n                        </TableCell>\n                    </TableRow>\n                    {Object.entries(schema.properties).map(([key, property]) => (\n                        <TableRow key={\"entity_prev\" + property.title + key}>\n                            <TableCell align=\"right\" component=\"th\" scope=\"row\">\n                                {property.title}\n                            </TableCell>\n                            <TableCell>\n                                <PreviewComponent value={entity.values[key]}\n                                                  property={property}\n                                                  small={false}/>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n\n}\n","import { Entity, EntitySchema } from \"../models\";\nimport React, { useState } from \"react\";\nimport { deleteEntity } from \"../firebase/firestore\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { DialogContent, Snackbar } from \"@material-ui/core\";\nimport EntityPreview from \"../preview/EntityPreview\";\nimport { CircularProgressCenter } from \"../util\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport MuiAlert from \"@material-ui/lab/Alert/Alert\";\n\nexport interface DeleteEntityDialogProps<S extends EntitySchema> {\n    entity?: Entity<S>,\n    schema: S\n    open: boolean;\n    onClose: () => void;\n}\n\nexport default function DeleteEntityDialog<S extends EntitySchema>(props: DeleteEntityDialogProps<S>) {\n    const { entity, schema, onClose, open, ...other } = props;\n    const [loading, setLoading] = useState(false);\n    const [openSnackBar, setOpenSnackbar] = React.useState<boolean>(false);\n\n    const handleCancel = () => {\n        onClose();\n    };\n\n    const handleOk = () => {\n        if (entity) {\n            setOpenSnackbar(true);\n            setLoading(true);\n            deleteEntity(entity).then(_ => setLoading(false));\n            onClose();\n        }\n    };\n\n    return (\n        <React.Fragment>\n\n            <Dialog\n                disableBackdropClick\n                disableEscapeKeyDown\n                maxWidth=\"md\"\n                keepMounted\n                aria-labelledby=\"confirmation-dialog-title\"\n                open={open}\n                onBackdropClick={onClose}\n                {...other}\n            >\n                <DialogTitle id=\"confirmation-dialog-title\">\n                    Would you like to delete this {schema.name}?\n                </DialogTitle>\n\n                <DialogContent dividers>\n                    {entity && <EntityPreview entity={entity} schema={schema}/>}\n                </DialogContent>\n\n                {loading && <CircularProgressCenter/>}\n\n                {!loading &&\n                <DialogActions>\n                    <Button autoFocus onClick={handleCancel}\n                            color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleOk} color=\"primary\">\n                        Ok\n                    </Button>\n                </DialogActions>}\n\n            </Dialog>\n\n            <Snackbar open={openSnackBar} autoHideDuration={3000}\n                      onClose={(_) => setOpenSnackbar(false)}>\n                <MuiAlert elevation={6} variant=\"filled\"\n                          onClose={(_) => setOpenSnackbar(false)}>\n                    Deleted\n                </MuiAlert>\n            </Snackbar>\n\n        </React.Fragment>\n    );\n}\n\n","import { Entity, EntitySchema } from \"../models\";\nimport React, { useState } from \"react\";\nimport { deleteEntity } from \"../firebase/firestore\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { DialogContent, Snackbar } from \"@material-ui/core\";\nimport EntityPreview from \"../preview/EntityPreview\";\nimport { CircularProgressCenter } from \"../util\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport MuiAlert from \"@material-ui/lab/Alert/Alert\";\n\nexport interface EntityDetailDialogProps<S extends EntitySchema> {\n    entity?: Entity<S>,\n    schema: S\n    open: boolean;\n    onClose: () => void;\n}\n\nexport default function EntityDetailDialog<S extends EntitySchema>(props: EntityDetailDialogProps<S>) {\n    const { entity, schema, onClose, open, ...other } = props;\n\n    return (\n        <React.Fragment>\n\n            <Dialog\n                disableBackdropClick\n                disableEscapeKeyDown\n                maxWidth=\"md\"\n                keepMounted\n                aria-labelledby=\"confirmation-dialog-title\"\n                onBackdropClick={onClose}\n                open={open}\n                {...other}\n            >\n                <DialogTitle id=\"confirmation-dialog-title\">\n                   {schema.name}\n                </DialogTitle>\n\n                <DialogContent dividers>\n                    {entity && <EntityPreview entity={entity} schema={schema}/>}\n                </DialogContent>\n\n                <DialogActions>\n                    <Button onClick={onClose} color=\"primary\">\n                        Ok\n                    </Button>\n                </DialogActions>\n\n            </Dialog>\n\n\n        </React.Fragment>\n    );\n}\n\n","import React from \"react\";\nimport CollectionTable from \"../collection/CollectionTable\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Entity, EntityCollectionView, EntitySchema } from \"../models\";\nimport {\n    BreadcrumbEntry,\n    getEntityPath,\n    getRouterNewEntityPath,\n    replacePathIdentifiers\n} from \"./navigation\";\nimport {\n    Box,\n    Breadcrumbs,\n    Button,\n    Grid,\n    Link,\n    Typography\n} from \"@material-ui/core\";\nimport { Link as ReactLink } from \"react-router-dom\";\nimport { BreadcrumbContainer } from \"../util/BreadcrumbContainer\";\nimport DeleteEntityDialog from \"../collection/DeleteEntityDialog\";\nimport EntityDetailDialog from \"../preview/EntityDetailDialog\";\n\ninterface CollectionRouteProps<S extends EntitySchema> {\n    view: EntityCollectionView<S>;\n    entityPlaceholderPath: string,\n    breadcrumbs: BreadcrumbEntry[]\n}\n\nexport function CollectionRoute<S extends EntitySchema>({\n                                                            view,\n                                                            entityPlaceholderPath,\n                                                            breadcrumbs,\n                                                            match,\n                                                            history\n                                                        }\n                                                            : CollectionRouteProps<S> & RouteComponentProps) {\n    let collectionPath: string;\n\n    if (match) {\n        collectionPath = replacePathIdentifiers(match.params, entityPlaceholderPath);\n    } else {\n        throw Error(\"No match prop for some reason\");\n    }\n\n    const [entityClicked, setEntityClicked] = React.useState<Entity<S> | undefined>(undefined);\n    const [deleteEntityClicked, setDeleteEntityClicked] = React.useState<Entity<S> | undefined>(undefined);\n\n    function onEntityEdit(collectionPath: string, entity: Entity<S>) {\n        const entityPath = getEntityPath(entity.id, collectionPath);\n        history.push(entityPath);\n    }\n\n    const onEntityClick = (collectionPath: string, entity: Entity<S>) => {\n        setEntityClicked(entity);\n    };\n\n    const onEntityDelete = (collectionPath: string, entity: Entity<S>) => {\n        setDeleteEntityClicked(entity);\n    };\n\n    const deleteEnabled = view.deleteEnabled === undefined || view.deleteEnabled;\n    return (\n        <React.Fragment>\n\n            <Box mb={3}>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <BreadcrumbContainer>\n                            <Breadcrumbs aria-label=\"breadcrumb\">\n                                <Link color=\"inherit\" component={ReactLink}\n                                      to=\"/\">\n                                    Home\n                                </Link>\n                                <Typography\n                                    color=\"textPrimary\">{view.schema.name}</Typography>\n                            </Breadcrumbs>\n                        </BreadcrumbContainer>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Box textAlign=\"right\">\n                            <Button\n                                component={ReactLink}\n                                to={getRouterNewEntityPath(collectionPath)}\n                                size=\"large\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                            >\n                                Add {view.schema.name}\n                            </Button>\n                        </Box>\n                    </Grid>\n                </Grid>\n            </Box>\n\n            <Box mb={3}>\n                <Typography variant=\"h5\">{view.schema.name} List</Typography>\n            </Box>\n\n            <CollectionTable collectionPath={view.relativePath}\n                             schema={view.schema}\n                             textSearchDelegate={view.textSearchDelegate}\n                             includeToolbar={true}\n                             onEntityEdit={onEntityEdit}\n                             onEntityClick={onEntityClick}\n                             onEntityDelete={deleteEnabled ? onEntityDelete : undefined}\n                             additionalColumns={view.additionalColumns}\n                             paginationEnabled={view.pagination === undefined ? true : view.pagination}/>\n\n            {entityClicked &&\n            <EntityDetailDialog entity={entityClicked}\n                                schema={view.schema}\n                                open={!!entityClicked}\n                                onClose={() => setEntityClicked(undefined)}/>}\n\n            {deleteEntityClicked &&\n            <DeleteEntityDialog entity={deleteEntityClicked}\n                                schema={view.schema}\n                                open={!!deleteEntityClicked}\n                                onClose={() => setDeleteEntityClicked(undefined)}/>}\n\n        </React.Fragment>\n    );\n}\n","import { EnumType, EnumValues } from \"../../models\";\nimport { getIn } from \"formik\";\nimport {\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    MenuItem,\n    Select as MuiSelect\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nimport { CMSFieldProps } from \"../form_props\";\n\ntype SelectProps<T extends EnumType> = CMSFieldProps<T>;\n\nexport default function Select<T extends EnumType>({\n                                                       field,\n                                                       form: { isSubmitting, errors, touched, setFieldValue },\n                                                       property,\n                                                       createFormField,\n                                                       includeDescription,\n                                                       ...props\n                                                   }: SelectProps<T>) {\n\n    const enumValues = property.enumValues as EnumValues<T>;\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    const value = field.value;\n    return (\n        <FormControl\n            fullWidth\n            required={property.validation?.required}\n            error={showError}\n        >\n            <InputLabel\n                id={`${field.name}-label`}>{property.title || field.name}</InputLabel>\n\n            <MuiSelect labelId={`${field.name}-label`}\n                       value={!!value ? value : \"\"}\n                       onChange={(evt: any) => {\n                           const newValue = evt.target.value;\n                           return setFieldValue(\n                               field.name,\n                               newValue ? newValue : null\n                           );\n                       }}\n                       {...props}>\n\n                {Object.entries(enumValues).map(([key, value]) => (\n                    <MenuItem key={`select-${key}`}\n                              value={key}>{value as string}</MenuItem>\n                ))}\n            </MuiSelect>\n\n            {includeDescription && property.description &&\n            <FormHelperText>{property.description}</FormHelperText>}\n\n            {showError && <FormHelperText\n                id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n        </FormControl>\n    );\n}\n","import { EnumType, EnumValues } from \"../../models\";\nimport { getIn } from \"formik\";\nimport {\n    Checkbox,\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    ListItemText,\n    MenuItem,\n    Select as MuiSelect\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { CMSFieldProps } from \"../form_props\";\nimport { renderPreviewEnumChip } from \"../../preview/PreviewComponent\";\n\ntype ArrayEnumSelectProps<T extends EnumType> = CMSFieldProps<T[]>;\n\nexport default function ArrayEnumSelect<T extends EnumType>({\n                                                                field,\n                                                                form: { errors, touched, setFieldValue },\n                                                                property\n                                                            }: ArrayEnumSelectProps<T>) {\n\n    if (property.of.dataType !== \"string\" && property.of.dataType !== \"number\") {\n        throw Error(\"Field misconfiguration: array field of type string or number\");\n    }\n\n    const enumValues: EnumValues<number | string> | undefined = property.of.enumValues;\n    if (!enumValues) {\n        console.error(property);\n        throw Error(\"Field misconfiguration: array field of type string or number needs to have enumValues\");\n    }\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    return <FormControl\n        fullWidth\n        required={property.validation?.required}\n        error={showError}\n    >\n        <InputLabel\n            id={`${field.name}-label`}>{property.title || field.name}\n        </InputLabel>\n        <MuiSelect multiple\n                   labelId={`${field.name}-label`}\n                   value={!!field.value ? field.value : []}\n                   onChange={(evt: any) => {\n                       return setFieldValue(\n                           `${field.name}`,\n                           evt.target.value\n                       );\n                   }}\n                   renderValue={(selected: any) => (\n                       <div>\n                           {selected.map((value: any) => {\n                               return renderPreviewEnumChip(enumValues, value);\n                           })}\n                       </div>\n                   )}>\n            {Object.keys(enumValues).map(key => {\n                return (\n                    <MenuItem key={key} value={key}>\n                        <Checkbox\n                            checked={!!field.value && field.value.indexOf(key as any) > -1}/>\n                        <ListItemText\n                            primary={enumValues[key]}/>\n                    </MenuItem>\n                );\n            })}\n        </MuiSelect>\n        <FormHelperText>{fieldError}</FormHelperText>\n    </FormControl>;\n}\n","import * as React from \"react\";\nimport { useEffect } from \"react\";\n\nimport {\n    Box,\n    FormControl,\n    FormHelperText,\n    IconButton,\n    LinearProgress,\n    Paper,\n    RootRef,\n    Snackbar,\n    Typography\n} from \"@material-ui/core\";\nimport MuiAlert from \"@material-ui/lab/Alert/Alert\";\n\nimport { uploadFile } from \"../../firebase\";\nimport firebase from \"firebase\";\nimport { formStyles } from \"../../styles\";\nimport {\n    ArrayProperty,\n    Property,\n    StorageMeta,\n    StringProperty\n} from \"../../models\";\nimport { getIn } from \"formik\";\n\nimport { CMSFieldProps } from \"../form_props\";\nimport { useDropzone } from \"react-dropzone\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport PreviewComponent from \"../../preview/PreviewComponent\";\n\ntype StorageUploadFieldProps = CMSFieldProps<string | string[]> ;\n\n/**\n * Internal representation of an item in the storage field.\n * It can have two states, having a storagePath set, which means the file has\n * been uploaded and it is rendered as a preview\n * Or have a pending file being uploaded.\n */\ninterface StorageFieldItem {\n    storagePath?: string;\n    file?: File;\n}\n\nexport default function StorageUploadField({\n                                               field,\n                                               form: { errors, touched, setFieldValue },\n                                               property,\n                                               includeDescription\n                                           }: StorageUploadFieldProps) {\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    const multipleFilesSupported = property.dataType === \"array\";\n\n    const value = multipleFilesSupported ?\n        (Array.isArray(field.value) ? field.value : []) :\n        field.value;\n\n    return (\n\n        <FormControl fullWidth\n                     required={property.validation?.required}\n                     error={showError}>\n\n            <FormHelperText filled\n                            required={property.validation?.required}>\n                {property.title || field.name}\n            </FormHelperText>\n\n            <StorageUpload value={value}\n                           property={property}\n                           onChange={(newValue) => setFieldValue(\n                               field.name,\n                               newValue\n                           )}/>\n\n            {includeDescription && property.description &&\n            <FormHelperText>{property.description}</FormHelperText>}\n\n            {showError && <FormHelperText\n                id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n        </FormControl>\n    );\n}\n\ninterface StorageUploadProps {\n    value: string | string[];\n    property: StringProperty | ArrayProperty<string>;\n    onChange: (value: string | string[] | null) => void;\n}\n\nexport function StorageUpload({\n                                  property,\n                                  value,\n                                  onChange\n                              }: StorageUploadProps) {\n\n    const multipleFilesSupported = property.dataType === \"array\";\n\n    if (multipleFilesSupported && (property as ArrayProperty<any>).of.dataType !== \"string\") {\n        throw Error(\"Storage field using array must be of data type string\");\n    }\n\n    const storageMeta: StorageMeta | undefined = property.dataType === \"string\" ? property.storageMeta :\n        property.dataType === \"array\" ? property.of.storageMeta :\n            undefined;\n\n    if (!storageMeta)\n        throw Error(\"Storage meta must be specified\");\n\n    const classes = formStyles();\n\n    const initialValue: StorageFieldItem[] = multipleFilesSupported ?\n        (value as string[]).map(v => (\n            {\n                storagePath: v\n            }\n        )) : [{\n            storagePath: value as string\n        }];\n\n    const [internalValue, setInternalValue] = React.useState<StorageFieldItem[]>(initialValue);\n\n    function removeDuplicates(items: StorageFieldItem[]) {\n        return items.filter(\n            (v, i) => {\n                return ((items.map((v) => v.storagePath).indexOf(v.storagePath) === i) || !v.storagePath)\n                    && ((items.map((v) => v.file).indexOf(v.file) === i) || !v.file);\n            }\n        );\n    }\n\n    const onDrop = (acceptedFiles: File[]) => {\n\n        let newInternalValue: StorageFieldItem[];\n        if (multipleFilesSupported) {\n            newInternalValue = [...internalValue, ...acceptedFiles.map(file => ({ file }))];\n        } else {\n            newInternalValue = [{ file: acceptedFiles[0] }];\n        }\n\n        // Remove either storage path or file duplicates\n        newInternalValue = removeDuplicates(newInternalValue);\n\n        setInternalValue(newInternalValue);\n    };\n\n    const onFileUploadComplete = (uploadedPath: string, file: File) => {\n        console.log(\"onFileUploadComplete\", uploadedPath, file);\n        let item: StorageFieldItem | undefined = internalValue.find(entry => entry.file === file || entry.storagePath === uploadedPath);\n        let newValue: StorageFieldItem[];\n        if (!item) {\n            item = {\n                storagePath: uploadedPath,\n                file: file\n            };\n            if (multipleFilesSupported)\n                newValue = [...internalValue, item];\n            else newValue = [item];\n        } else {\n            item.storagePath = uploadedPath;\n            item.file = file;\n            newValue = [...internalValue];\n        }\n        newValue = removeDuplicates(newValue);\n        setInternalValue(newValue);\n\n        const fieldValue = newValue.filter(e => !!e.storagePath).map(e => e.storagePath as string);\n\n        if (multipleFilesSupported) {\n            onChange(fieldValue);\n        }else{\n            onChange(fieldValue ? fieldValue[0] : null);\n        }\n    };\n\n    const onClear = (clearedStoragePath: string) => {\n        if (multipleFilesSupported) {\n            const newValue: StorageFieldItem[] = internalValue.filter(v => v.storagePath !== clearedStoragePath);\n            onChange(newValue.filter(v => !!v.storagePath).map(v => v.storagePath as string));\n            setInternalValue(newValue);\n        } else {\n            onChange(null);\n            setInternalValue([]);\n        }\n    };\n\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject\n    } = useDropzone({\n            accept: storageMeta.acceptedFiles,\n            onDrop: onDrop\n        }\n    );\n\n    const { ref, ...rootProps } = getRootProps();\n\n    return (\n\n\n        <RootRef rootRef={ref}>\n\n            <Paper elevation={0}\n                   {...rootProps}\n                   className={`${classes.dropZone} ${isDragActive ? classes.activeDrop : \"\"} ${isDragReject ? classes.rejectDrop : \"\"} ${isDragAccept ? classes.acceptDrop : \"\"}`}\n                   variant={\"outlined\"}>\n\n                <input {...getInputProps()} />\n\n                <Box display=\"flex\"\n                     flexDirection=\"row\"\n                     flexWrap=\"wrap\"\n                     alignItems=\"center\"\n                     minHeight={220}>\n\n                    {internalValue.map(entry => {\n                        if (entry.storagePath) {\n                            const renderProperty = multipleFilesSupported ? (property as ArrayProperty<string>).of : property;\n                            return <StorageItemPreview\n                                key={`storage_preview_${entry.storagePath}`}\n                                property={renderProperty}\n                                value={entry.storagePath}\n                                onClear={onClear}/>;\n                        } else if (entry.file) {\n                            return <StorageUploadProgress\n                                key={`storage_upload_${entry.file.name}`}\n                                file={entry.file}\n                                storagePath={storageMeta.storagePath}\n                                onFileUploadComplete={(value, file) => {\n                                    onFileUploadComplete(value, file);\n                                }}/>;\n                        }\n                        return null;\n                    })\n                    }\n\n                    <Box\n                        flexGrow={1}\n                        m={2}>\n                        <Typography color={\"textSecondary\"}\n                                    variant={\"body2\"}\n                                    align={\"center\"}>\n                            Drag 'n' drop some\n                            files here, or click to\n                            select files\n                        </Typography>\n                    </Box>\n\n                </Box>\n\n            </Paper>\n        </RootRef>\n    );\n\n}\n\n\ninterface StorageUploadItemProps {\n    storagePath: string;\n    file: File,\n    onFileUploadComplete: (value: string, file: File) => void;\n}\n\nexport function StorageUploadProgress({\n                                          storagePath,\n                                          file,\n                                          onFileUploadComplete\n                                      }: StorageUploadItemProps) {\n\n    const classes = formStyles();\n\n    const [error, setError] = React.useState<string>();\n    const [progress, setProgress] = React.useState<number>(-1);\n    const [openErrorAlert, setOpenErrorAlert] = React.useState<boolean>(false);\n\n    useEffect(() => {\n        if (file)\n            upload(file);\n    }, []);\n\n    function upload(file: File) {\n\n        setError(undefined);\n        setProgress(0);\n\n        const uploadTask = uploadFile(file, storagePath);\n        uploadTask.on(\"state_changed\", (snapshot) => {\n            const currentProgress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            setProgress(currentProgress);\n            console.debug(\"Upload is \" + currentProgress + \"% done\");\n            switch (snapshot.state) {\n                case firebase.storage.TaskState.PAUSED: // or 'paused'\n                    console.debug(\"Upload is paused\");\n                    break;\n                case firebase.storage.TaskState.RUNNING: // or 'running'\n                    console.debug(\"Upload is running\");\n                    break;\n            }\n        }, (e: any) => {\n            console.error(\"Upload error\", e);\n            setError(e.message);\n            setProgress(-1);\n            setOpenErrorAlert(true);\n        }, () => {\n            const fullPath = uploadTask.snapshot.ref.fullPath;\n            setProgress(-1);\n            onFileUploadComplete(fullPath, file);\n        });\n    }\n\n    const handleCloseErrorAlert = (event?: React.SyntheticEvent, reason?: string) => {\n        setOpenErrorAlert(false);\n    };\n\n    return (\n\n        <React.Fragment>\n\n            <Box ml={2} mt={2} mb={2}>\n                <Paper elevation={0}\n                       className={classes.uploadItem}\n                       variant={\"outlined\"}>\n\n                    {progress > -1 &&\n                    <LinearProgress variant=\"indeterminate\"\n                                    value={progress}/>}\n\n                    {error && <p>Error uploading file: {error}</p>}\n\n                </Paper>\n            </Box>\n\n\n            <Snackbar open={openErrorAlert} autoHideDuration={3000}\n                      onClose={handleCloseErrorAlert}>\n                <MuiAlert elevation={6} variant=\"filled\"\n                          onClose={handleCloseErrorAlert}\n                          severity=\"error\">\n                    {error}\n                </MuiAlert>\n            </Snackbar>\n\n        </React.Fragment>\n    );\n\n}\n\ninterface StorageItemPreviewProps {\n    property: Property;\n    value: string,\n    onClear: (value: string) => void;\n}\n\nexport function StorageItemPreview({\n                                       property,\n                                       value,\n                                       onClear\n                                   }: StorageItemPreviewProps) {\n\n    const classes = formStyles();\n    return (\n        <Box ml={2} mt={2} mb={2} position={\"relative\"}>\n\n            <Paper\n                elevation={0}\n                className={classes.uploadItem}\n                variant={\"outlined\"}>\n\n                <Box position={\"absolute\"} top={4} right={4}>\n                    <IconButton\n                        style={{ backgroundColor: \"white\" }}\n                        onClick={(event) => {\n                            event.stopPropagation();\n                            onClear(value);\n                        }}>\n                        <ClearIcon fontSize={\"small\"}/>\n                    </IconButton>\n                </Box>\n\n                {value &&\n                <PreviewComponent value={value}\n                                  property={property}\n                                  small={false}/>}\n\n            </Paper>\n\n        </Box>\n    );\n\n}\n","import { MediaType, StringProperty } from \"../../models\";\nimport { getIn } from \"formik\";\nimport {\n    Box,\n    FormControl,\n    FormControlLabel,\n    FormHelperText,\n    Input,\n    InputLabel,\n    Switch,\n    Typography\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nimport { CMSFieldProps } from \"../form_props\";\nimport PreviewComponent from \"../../preview/PreviewComponent\";\n\ninterface TextFieldProps extends CMSFieldProps<string | number> {\n    allowInfinity?: boolean\n}\n\nexport default function TextField({\n                                      field,\n                                      form: { isSubmitting, errors, touched, setFieldValue },\n                                      property,\n                                      includeDescription,\n                                      allowInfinity,\n                                      createFormField,\n                                      ...props\n                                  }: TextFieldProps) {\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    let mediaType: MediaType | undefined;\n    if (property.dataType === \"string\")\n        mediaType = (property as StringProperty).urlMediaType;\n\n    const value = field.value ? field.value : \"\";\n    const updateValue = (newValue: typeof value) => {\n\n        if (!newValue) {\n            setFieldValue(\n                field.name,\n                null\n            );\n        } else if (inputType === \"number\") {\n            const numValue = parseFloat(newValue);\n            setFieldValue(\n                field.name,\n                numValue\n            );\n        } else {\n            setFieldValue(\n                field.name,\n                newValue\n            );\n        }\n    };\n\n    const valueIsInfinity = value === Infinity;\n    const inputType = !valueIsInfinity && property.dataType === \"number\" ? \"number\" : undefined;\n    return (\n        <React.Fragment>\n\n            <FormControl\n                required={property.validation?.required}\n                error={showError}\n                disabled={isSubmitting}\n                fullWidth>\n                <InputLabel>{property.title || field.name}</InputLabel>\n                <Input\n                    type={inputType}\n                    value={valueIsInfinity ? \"Infinity\" : value}\n                    {...props}\n                    disabled={valueIsInfinity}\n                    onChange={(evt) => {\n                        updateValue(evt.target.value);\n                    }}\n                />\n\n                {allowInfinity &&\n                <FormControlLabel\n                    checked={valueIsInfinity}\n                    labelPlacement={\"start\"}\n                    control={\n                        <Switch\n                            size={\"small\"}\n                            type={\"checkbox\"}\n                            onChange={(evt) => {\n                                updateValue(\n                                    evt.target.checked ? Infinity : undefined);\n                            }}/>\n                    }\n                    disabled={property.disabled || isSubmitting}\n                    label={\n                        <Typography variant={\"caption\"}>\n                            Set value to Infinity\n                        </Typography>\n                    }\n                />\n                }\n\n                {showError && <FormHelperText\n                    id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n                {includeDescription && property.description &&\n                <FormHelperText>{property.description}</FormHelperText>}\n\n            </FormControl>\n\n            {mediaType && value &&\n            <Box m={1}>\n                <PreviewComponent value={value}\n                                  property={property}\n                                  small={false}/>\n            </Box>\n            }\n        </React.Fragment>\n    );\n\n}\n","import {\n    FormControl,\n    FormControlLabel,\n    FormHelperText,\n    Switch\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nimport { CMSFieldProps } from \"../form_props\";\nimport { getIn } from \"formik\";\n\ntype SwitchFieldProps = CMSFieldProps<boolean>;\n\nexport default function SwitchField({\n                                        field,\n                                        form: { isSubmitting, errors, touched, setFieldValue },\n                                        property,\n                                        includeDescription,\n                                        createFormField,\n                                        ...props\n                                    }: SwitchFieldProps) {\n\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    return (\n        <React.Fragment>\n            <FormControlLabel\n                checked={field.value}\n                control={\n                    <Switch\n                        {...props}\n                        type={\"checkbox\"}\n                        onChange={(evt) => {\n                            setFieldValue(\n                                field.name,\n                                evt.target.checked\n                            );\n                        }}/>\n                }\n                disabled={property.disabled || isSubmitting}\n                label={property.title || field.name}\n            />\n\n            {includeDescription && property.description &&\n            <FormHelperText>{property.description}</FormHelperText>}\n\n            {showError && <FormHelperText\n                id=\"component-error-text\">{fieldError}</FormHelperText>}\n        </React.Fragment>\n    );\n}\n\n","import { getIn } from \"formik\";\nimport React from \"react\";\nimport { DateTimePicker } from \"@material-ui/pickers\";\n\nimport { CMSFieldProps } from \"../form_props\";\nimport firebase from \"firebase\";\n\ntype DateTimeFieldProps = CMSFieldProps<firebase.firestore.Timestamp> ;\n\nexport default function DateTimeField({\n                                          field,\n                                          form: { isSubmitting, errors, touched, setFieldValue },\n                                          property,\n                                          createFormField,\n                                          includeDescription,\n                                          ...props\n                                      }: DateTimeFieldProps) {\n\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    const value = field.value;\n\n    return (\n        <DateTimePicker\n            fullWidth\n            clearable\n            value={value}\n            label={property.title || field.name}\n            error={showError}\n            disabled={property.disabled !== undefined ? property.disabled : isSubmitting}\n            helperText={showError ? fieldError : property.description}\n            onChange={(dateValue) => setFieldValue(\n                field.name,\n                dateValue\n            )}\n            {...props}\n        />\n    );\n}\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { EntitySchema } from \"../models\";\nimport { CircularProgressCenter } from \"../util\";\n\nexport interface AsyncPreviewComponentProps<S extends EntitySchema> {\n\n    builder: Promise<React.ReactNode>;\n\n}\n\n/**\n * Utility component used to render the result of an async execution.\n * It shows a loading indicator while at it.\n *\n * @param buildComponent that needs to do some async\n * @constructor\n */\nexport default function AsyncPreviewComponent<S extends EntitySchema>(\n    {\n        builder\n    }: AsyncPreviewComponentProps<S>): JSX.Element {\n\n    const [loading, setLoading] = useState<boolean>(true);\n    const [result, setResult] = useState<React.ReactNode>(null);\n\n    useEffect(() => {\n        builder\n            .then((res) => {\n                setLoading(false);\n                setResult(res);\n            })\n            .catch(error => {\n                setLoading(false);\n                console.error(error);\n            });\n    }, [builder]);\n\n    if (loading)\n        return <CircularProgressCenter/>;\n\n    return <React.Fragment>{result}</React.Fragment>;\n\n}\n","import { Entity, EntitySchema, FilterValues } from \"../../models\";\nimport { getIn } from \"formik\";\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogTitle,\n    FormControl,\n    FormHelperText,\n    Grid,\n    IconButton,\n    Paper,\n    Tooltip,\n    Typography\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { formStyles } from \"../../styles\";\nimport ReferencePreview from \"../../preview/ReferencePreview\";\nimport ClearIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\nimport CollectionTable from \"../../collection/CollectionTable\";\nimport { CMSFieldProps } from \"../form_props\";\nimport firebase from \"firebase\";\nimport { PreviewComponent } from \"../../preview\";\n\ntype ReferenceFieldProps<S extends EntitySchema> = CMSFieldProps<firebase.firestore.DocumentReference> ;\n\nexport default function ReferenceField<S extends EntitySchema>({\n                                                                   field,\n                                                                   form: { isSubmitting, errors, touched, setFieldValue },\n                                                                   property,\n                                                                   includeDescription\n                                                               }: ReferenceFieldProps<S>) {\n\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    const value = field.value;\n\n    const handleEntityClick = (entity: Entity<S>) => {\n        const ref = entity ? entity.reference : null;\n        setFieldValue(field.name, ref);\n    };\n\n    const classes = formStyles();\n    const title = property.title || field.name;\n    return (\n        <FormControl error={showError} fullWidth>\n            <Paper elevation={0} className={classes.paper}\n                   variant={\"outlined\"}>\n                <Box my={1}>\n                    <Typography variant=\"caption\"\n                                display=\"block\"\n                                gutterBottom>\n                        {title}\n                    </Typography>\n                </Box>\n                <ReferenceDialog value={value}\n                                 title={title}\n                                 collectionPath={property.collectionPath}\n                                 schema={property.schema}\n                                 initialFilter={property.filter}\n                                 onEntityClick={handleEntityClick}/>\n            </Paper>\n\n            {includeDescription && property.description &&\n            <Box>\n                <FormHelperText>{property.description}</FormHelperText>\n            </Box>}\n\n            {showError && <FormHelperText\n                id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n        </FormControl>\n    );\n}\n\n\nexport interface ReferenceDialogProps<S extends EntitySchema> {\n\n    value: any;\n\n    title: string,\n\n    /**\n     * Absolute collection path\n     */\n    collectionPath: string,\n\n    /**\n     * In case this table should have some filters set\n     */\n    initialFilter?: FilterValues<S>;\n\n    schema: S;\n\n    onEntityClick(entity?: Entity<S>): void;\n}\n\nexport function ReferenceDialog<S extends EntitySchema>(\n    {\n        onEntityClick,\n        value,\n        title,\n        schema,\n        initialFilter,\n        collectionPath\n    }: ReferenceDialogProps<S>) {\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleEntityClick = (collectionPath: string, entity: Entity<S>) => {\n        setOpen(false);\n        onEntityClick(entity);\n    };\n\n    const clearValue = () => {\n        setOpen(false);\n        onEntityClick(undefined);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <React.Fragment>\n            <Grid\n                justify=\"space-between\"\n                container\n                spacing={2}>\n                <Grid item>\n                    {value &&\n                    <ReferencePreview\n                        reference={value}\n                        schema={schema}\n                        previewComponent={PreviewComponent}/>}\n                    {!value &&\n                    <Box>No value set</Box>}\n                </Grid>\n                <Box display=\"inline\">\n                    {value &&\n                    <Tooltip title=\"Clear\">\n                        <IconButton\n                            aria-label=\"clear\"\n                            onClick={clearValue}>\n                            <ClearIcon/>\n                        </IconButton>\n                    </Tooltip>}\n                    <Button variant=\"outlined\"\n                            color=\"primary\"\n                            onClick={handleClickOpen}>\n                        {value ? \"Edit\" : \"Set\"}\n                    </Button>\n                </Box>\n            </Grid>\n\n            <Dialog\n                onClose={handleClose}\n                maxWidth={\"xl\"}\n                open={open}>\n                <DialogTitle>Select {title}</DialogTitle>\n                <CollectionTable collectionPath={collectionPath}\n                                 schema={schema}\n                                 includeToolbar={false}\n                                 onEntityClick={handleEntityClick}\n                                 paginationEnabled={false}\n                                 initialFilter={initialFilter}\n                />\n                <DialogActions>\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n        </React.Fragment>\n    );\n\n}\n\n","import { EntitySchema } from \"../../models\";\nimport {\n    Box,\n    FormControl,\n    FormHelperText,\n    Grid,\n    Paper\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { formStyles } from \"../../styles\";\n\nimport { CMSFieldProps } from \"../form_props\";\n\ntype MapFieldProps<S extends EntitySchema> = CMSFieldProps<object>;\n\nexport default function MapField<S extends EntitySchema>({\n                                                             field,\n                                                             form: { isSubmitting, errors, touched, setFieldValue },\n                                                             property,\n                                                             includeDescription,\n                                                             createFormField,\n                                                             ...props\n                                                         }: MapFieldProps<S>) {\n\n    const classes = formStyles();\n\n    const mapProperties = property.properties;\n    const hasError = touched && property.validation?.required && !field.value;\n\n    return (\n        <FormControl fullWidth error={hasError}>\n\n            <FormHelperText filled\n                            required={property.validation?.required}>\n                {property.title || field.name}\n            </FormHelperText>\n\n            <Paper elevation={0} variant={\"outlined\"} className={classes.paper}>\n                <Box m={1}>\n                    <Grid container spacing={1}>\n                        {Object.entries(mapProperties).map(([entryKey, childProperty], index) => {\n                                const fieldValue = field.value ? field.value[entryKey] : null;\n                                return <Grid item xs={12}\n                                             key={`map-${field.name}-${index}`}>\n                                    {createFormField(`${field.name}[${entryKey}]`,\n                                        childProperty,\n                                        includeDescription)}\n                                </Grid>;\n                            }\n                        )}\n                    </Grid>\n                </Box>\n            </Paper>\n\n            {includeDescription && property.description &&\n            <FormHelperText>{property.description}</FormHelperText>\n            }\n\n        </FormControl>\n    );\n}\n","import { Property } from \"../../models\";\nimport { FieldArray, getIn } from \"formik\";\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    IconButton,\n    Paper\n} from \"@material-ui/core\";\nimport { Add, Remove } from \"@material-ui/icons\";\nimport { formStyles } from \"../../styles\";\nimport { CMSFieldProps } from \"../form_props\";\nimport React from \"react\";\n\ntype ArrayDefaultFieldProps<T> = CMSFieldProps<T[]>;\n\nexport default function ArrayDefaultField<T>({\n                                                 field,\n                                                 form: { errors, touched },\n                                                 property,\n                                                 createFormField,\n                                                 includeDescription\n                                             }: ArrayDefaultFieldProps<T>) {\n\n    const classes = formStyles();\n\n    const ofProperty: Property = property.of;\n\n    const hasValue = field.value && field.value.length > 0;\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    return <FieldArray\n        name={field.name}\n        render={arrayHelpers =>\n            (\n\n                <FormControl fullWidth error={showError}>\n\n                    <FormHelperText filled\n                                    required={property.validation?.required}>\n                        {property.title || field.name}\n                    </FormHelperText>\n\n                    <Paper variant={\"outlined\"}\n                           className={classes.paper}>\n                        {hasValue ? (\n                            <React.Fragment>\n                                {field.value.map((entryValue: any, index: number) => {\n                                    const errorElement = errors && errors[index];\n                                    const touchedElement = touched && touched[index];\n                                    return (\n                                        <Box key={`field_${index}`}\n                                             mb={1}\n                                             display={\"flex\"}>\n                                            <Box flexGrow={1}\n                                                 key={`field_${field.name}_entryValue`}>\n                                                {createFormField(`${field.name}[${index}]`, ofProperty, includeDescription)}\n                                            </Box>\n                                            <Box>\n                                                <IconButton\n                                                    aria-label=\"remove\"\n                                                    onClick={() => arrayHelpers.remove(index)}>\n                                                    <Remove/>\n                                                </IconButton>\n                                            </Box>\n                                            <Box>\n                                                <IconButton\n                                                    aria-label=\"insert\"\n                                                    onClick={() => arrayHelpers.insert(index + 1, undefined)}>\n                                                    <Add/>\n                                                </IconButton>\n                                            </Box>\n                                        </Box>\n                                    );\n                                })}\n                            </React.Fragment>\n                        ) : (\n                            <Box margin={2}>\n                                <Button\n                                    onClick={() => arrayHelpers.push(null)}>\n                                    {/* show this when user has removed all entries from the list */}\n                                    Add\n                                </Button>\n                            </Box>\n                        )}\n                    </Paper>\n\n                    {includeDescription && property.description &&\n                    <Box>\n                        <FormHelperText>{property.description}</FormHelperText>\n                    </Box>}\n\n                    {showError && <FormHelperText\n                        id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n                </FormControl>\n            )}\n    />;\n}\n","import { MapProperty, Properties } from \"../../models\";\nimport { FieldArray, getIn } from \"formik\";\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    IconButton,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableRow\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { Add, Remove } from \"@material-ui/icons\";\nimport { formStyles } from \"../../styles\";\nimport { CMSFieldProps } from \"../form_props\";\n\ntype ArrayMapFieldProps<T> = CMSFieldProps<T[]>;\n\nexport default function ArrayMapField<T>({\n                                             field,\n                                             form: { errors, touched },\n                                             property,\n                                             createFormField,\n                                             includeDescription\n                                         }: ArrayMapFieldProps<T>) {\n\n    if (property.of.dataType !== \"map\") {\n        console.error(property);\n        throw Error(\"Field misconfiguration: this array field should have type map\");\n    }\n\n    const classes = formStyles();\n    const mapProperty: MapProperty<T> = property.of as MapProperty<T>;\n    const properties: Properties = mapProperty.properties;\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    return <FieldArray\n        name={field.name}\n        render={arrayHelpers => {\n\n            const hasValue = field.value && field.value.length > 0;\n            const error = touched && property.validation?.required && !field.value;\n\n            return (\n\n                <FormControl fullWidth error={error}>\n\n                    <FormHelperText filled\n                                    required={property.validation?.required}>\n                        {property.title || field.name}\n                    </FormHelperText>\n\n                    <Paper elevation={0} className={classes.paper}>\n\n                        {hasValue ? (\n                            <Table>\n                                <TableBody>\n                                    {field.value.map((entryValue: any, index: number) => (\n                                        <TableRow key={`field_${index}`}>\n                                            {Object.entries(properties).map(([arrayKey, childProperty]) => {\n                                                return (\n                                                    <TableCell\n                                                        key={`field_${arrayKey}`}>\n                                                        {createFormField(`${field.name}[${index}].${arrayKey}`,\n                                                            childProperty,\n                                                            includeDescription)}\n                                                    </TableCell>\n                                                );\n                                            })}\n                                            <TableCell size={\"small\"}\n                                                       padding={\"none\"}>\n                                                <IconButton aria-label=\"remove\"\n                                                            onClick={() => arrayHelpers.remove(index)}>\n                                                    <Remove/>\n                                                </IconButton>\n                                            </TableCell>\n                                            <TableCell size={\"small\"}\n                                                       padding={\"none\"}>\n                                                <IconButton aria-label=\"insert\"\n                                                            onClick={() => arrayHelpers.insert(index + 1, {})}>\n                                                    <Add/>\n                                                </IconButton>\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        ) : (\n                            <Box margin={2}>\n                                <Button onClick={() => arrayHelpers.push(null)}>\n                                    {/* show this when user has removed all entries from the list */}\n                                    Add\n                                </Button>\n                            </Box>\n                        )}\n                    </Paper>\n\n                    {includeDescription && property.description &&\n                    <Box>\n                        <FormHelperText>{property.description}</FormHelperText>\n                    </Box>}\n\n                    {showError && <FormHelperText\n                        id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n                </FormControl>\n            );\n        }}\n    />;\n\n}\n","import { EntitySchema } from \"../../models\";\nimport { Box, FormControl, FormHelperText, Paper } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formStyles } from \"../../styles\";\nimport { CMSFieldProps } from \"../form_props\";\nimport PreviewComponent from \"../../preview/PreviewComponent\";\n\ntype DisabledFieldProps = CMSFieldProps<any> ;\n\nexport default function DisabledField<S extends EntitySchema>({ field, property, includeDescription }: DisabledFieldProps) {\n\n    const classes = formStyles();\n\n    return (\n\n        <FormControl fullWidth disabled={true}>\n\n            <FormHelperText filled\n                            required={property.validation?.required}>\n                {property.title || field.name}\n            </FormHelperText>\n\n            <Paper elevation={0} className={classes.paper} variant={\"outlined\"}>\n                {field.value &&\n                <PreviewComponent value={field.value}\n                                  property={property}\n                                  small={false}/>}\n                {!field.value && <Box m={1}>No value set</Box>}\n            </Paper>\n\n            {includeDescription && property.description &&\n            <FormHelperText>{property.description}</FormHelperText>\n            }\n\n        </FormControl>\n    );\n}\n","import React from \"react\";\nimport {\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select as MuiSelect,\n    TextField as MuiTextField\n} from \"@material-ui/core\";\nimport { EntitySchema, EntityStatus, Property } from \"../models\";\n\nimport { ErrorMessage, Field, FieldProps } from \"formik\";\n\nimport Select from \"./fields/Select\";\nimport ArrayEnumSelect from \"./fields/ArrayEnumSelect\";\nimport StorageUploadField from \"./fields/StorageUploadField\";\nimport TextField from \"./fields/TextField\";\nimport SwitchField from \"./fields/SwitchField\";\nimport DateTimeField from \"./fields/DateTimeField\";\nimport ReferenceField from \"./fields/ReferenceField\";\nimport MapField from \"./fields/MapField\";\nimport ArrayDefaultField from \"./fields/ArrayDefaultField\";\nimport ArrayMapField from \"./fields/ArrayMapField\";\nimport DisabledField from \"./fields/DisabledField\";\nimport { CMSFieldProps } from \"./form_props\";\n\n\nexport function createFormField(name: string,\n                                property: Property,\n                                includeDescription: boolean): JSX.Element {\n\n    if (property.disabled) {\n        return buildField(name, property, includeDescription, DisabledField);\n    }\n\n    let component: React.ComponentType<CMSFieldProps<any>> | undefined;\n\n    if (property.customField) {\n        component = property.customField;\n    } else if (property.dataType === \"array\") {\n        if ((property.of.dataType === \"string\" || property.of.dataType === \"number\") && property.of.enumValues) {\n            component = ArrayEnumSelect;\n        } else if (property.of.dataType === \"string\" && property.of.storageMeta) {\n            component = StorageUploadField;\n        } else if (property.of.dataType === \"map\") {\n            component = ArrayMapField;\n        } else {\n            component = ArrayDefaultField;\n        }\n    } else if (property.dataType === \"map\") {\n        component = MapField;\n    } else if (property.dataType === \"reference\") {\n        component = ReferenceField;\n    } else if (property.dataType === \"timestamp\") {\n        component = DateTimeField;\n    } else if (property.dataType === \"boolean\") {\n        component = SwitchField;\n    } else if (property.dataType === \"number\") {\n        if (property.enumValues) {\n            component = Select;\n        } else {\n            component = TextField;\n        }\n    } else if (property.dataType === \"string\") {\n        if (property.storageMeta) {\n            component = StorageUploadField;\n        } else if (property.enumValues) {\n            component = Select;\n        } else {\n            component = TextField;\n        }\n    }\n    if (component)\n        return buildField(name, property, includeDescription, component, property.additionalProps);\n\n    return (\n        <div>{`Currently the field ${property.dataType} is not supported`}</div>\n    );\n}\n\nfunction buildField<P extends Property<T>, T = any>(name: string,\n                                                    property: P,\n                                                    includeDescription: boolean,\n                                                    component: React.ComponentType<CMSFieldProps<T>>,\n                                                    additionalProps?: any) {\n    return <Field\n        required={property.validation?.required}\n        name={`${name}`}\n    >\n        {(fieldProps: FieldProps<T>) =>\n            React.createElement(component, {\n                ...fieldProps,\n                ...additionalProps,\n                includeDescription,\n                property,\n                createFormField\n            })}\n\n    </Field>;\n}\n\n\nexport function createCustomIdField(schema: EntitySchema, formType: EntityStatus, onChange: Function, error: boolean, id: string | undefined) {\n\n    const disabled = formType !== EntityStatus.new || !schema.customId;\n\n    const hasEnumValues = typeof schema.customId === \"object\";\n\n    const fieldProps: any = {\n        label: (formType === EntityStatus.new && disabled) ? \"Id is set automatically\" : \"Id\",\n        disabled: disabled,\n        name: \"id\",\n        type: null,\n        value: id,\n        variant: \"outlined\"\n    };\n\n    return (\n        <FormControl fullWidth error={error} {...fieldProps}>\n\n            {hasEnumValues && schema.customId &&\n            <React.Fragment>\n                <InputLabel id={`id-label`}>{fieldProps.label}</InputLabel>\n                <MuiSelect\n                    labelId={`id-label`}\n                    error={error}\n                    {...fieldProps}\n                    onChange={(event: any) => onChange(event.target.value)}>\n                    {Object.entries(schema.customId).map(([key, label]) =>\n                        <MenuItem\n                            value={key}>{`${key} - ${label}`}</MenuItem>)}\n                </MuiSelect>\n            </React.Fragment>}\n\n            {!hasEnumValues &&\n            <MuiTextField {...fieldProps}\n                          error={error}\n                          onChange={(event) => onChange(event.target.value)}/>}\n\n            <ErrorMessage name={\"id\"}\n                          component=\"div\">{(s) => \"You need to specify an ID\"}</ErrorMessage>\n\n        </FormControl>\n    );\n}\n\nexport {\n    ArrayDefaultField,\n    ArrayEnumSelect,\n    ArrayMapField,\n    DateTimeField,\n    DisabledField,\n    MapField,\n    ReferenceField,\n    Select,\n    StorageUploadField,\n    SwitchField,\n    TextField\n};\n","import {\n    ArrayProperty,\n    BooleanProperty,\n    EntitySchema,\n    GeopointProperty,\n    NumberProperty,\n    Properties,\n    Property,\n    ReferenceProperty,\n    StringProperty,\n    TimestampProperty\n} from \"../models\";\nimport * as yup from \"yup\";\nimport {\n    ArraySchema,\n    BooleanSchema,\n    DateSchema,\n    NumberSchema,\n    ObjectSchema,\n    Schema,\n    StringSchema\n} from \"yup\";\n\n\nfunction mapPropertyToYup(property: Property): Schema<any> {\n    if (property.dataType === \"string\") {\n        return getYupStringSchema(property);\n    } else if (property.dataType === \"number\") {\n        return getYupNumberSchema(property);\n    } else if (property.dataType === \"boolean\") {\n        return getYupBooleanSchema(property);\n    } else if (property.dataType === \"map\") {\n        return getYupObjectSchema(property.properties);\n    } else if (property.dataType === \"array\") {\n        return getYupArraySchema(property);\n    } else if (property.dataType === \"timestamp\") {\n        return getYupDateSchema(property);\n    } else if (property.dataType === \"geopoint\") {\n        return getYupGeoPointSchema(property);\n    } else if (property.dataType === \"reference\") {\n        return getYupReferenceSchema(property);\n    }\n    throw Error(\"Unsupported data type in yup mapping\");\n}\n\nexport function getYupObjectSchema(properties: Properties): ObjectSchema<any> {\n    const objectSchema: any = {};\n    Object.entries(properties).forEach(([key, property]: [string, Property]) => {\n        objectSchema[key] = mapPropertyToYup(property);\n    });\n    return yup.object().shape(objectSchema);\n}\n\nfunction getYupStringSchema(property: StringProperty): StringSchema {\n    let schema: StringSchema<any> = yup.string();\n    const validation = property.validation;\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage)\n            .nullable(false);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    if (property.enumValues) {\n        schema = schema.oneOf(Object.keys(property.enumValues));\n    }\n    return schema;\n}\n\nfunction getYupNumberSchema(property: NumberProperty): NumberSchema {\n    const validation = property.validation;\n    let schema: NumberSchema<any> = yup.number()\n        .typeError(validation?.requiredMessage ? validation?.requiredMessage : \"Must be a number\");\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage).nullable(false);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupGeoPointSchema(property: GeopointProperty): ObjectSchema {\n    let schema: ObjectSchema<any> = yup.object();\n    const validation = property.validation;\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage)\n            .nullable(false);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupDateSchema(property: TimestampProperty): DateSchema {\n    let schema: DateSchema<any> = yup.date();\n    const validation = property.validation;\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage)\n            .nullable(false);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupReferenceSchema<S extends EntitySchema>(property: ReferenceProperty<S>): ObjectSchema {\n    let schema: ObjectSchema<any> = yup.object();\n    const validation = property.validation;\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage)\n            .nullable(false);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupBooleanSchema(property: BooleanProperty): BooleanSchema {\n    let schema: BooleanSchema<any> = yup.boolean();\n    const validation = property.validation;\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage)\n            .nullable(false);\n    } else {\n        schema = schema.notRequired().nullable(true);\n    }\n    return schema;\n}\n\nfunction getYupArraySchema<T>(property: ArrayProperty<T>): ArraySchema<T> {\n    let schema: ArraySchema<T> = yup.array().of(mapPropertyToYup(property.of));\n    const validation = property.validation;\n    if (validation?.required) {\n        schema = schema.required(validation.requiredMessage)\n            .nullable(false);\n    }\n    return schema;\n}\n","import React from \"react\";\nimport { Box, Button, Container, Grid, Paper } from \"@material-ui/core\";\nimport { Entity, EntitySchema, EntityStatus, EntityValues } from \"../models\";\nimport { Form, Formik, FormikHelpers } from \"formik\";\nimport { formStyles } from \"../styles\";\nimport { createCustomIdField, createFormField } from \"./index\";\nimport { initEntityValues } from \"../firebase/firestore\";\nimport { getYupObjectSchema } from \"./validation\";\n\ninterface EntityFormProps<S extends EntitySchema> {\n\n    /**\n     * New or existing status\n     */\n    status: EntityStatus;\n\n    /**\n     * Path of the collection this entity is located\n     */\n    collectionPath: string;\n\n    /**\n     * Schema of the entity this form represents\n     */\n    schema: S;\n\n    /**\n     * The updated entity is passed from the parent component when the underlying data\n     * has changed in Firestore\n     */\n    entity?: Entity<S>;\n\n    /**\n     * The updated entity is passed from the parent component when the underlying data\n     * has changed in Firestore\n     */\n    updatedEntity?: Entity<S>;\n\n    /**\n     * The callback function called when Save is clicked and validation is correct\n     */\n    onEntitySave(collectionPath: string, id: string | undefined, values: any): Promise<void>;\n\n}\n\nexport default function EntityForm<S extends EntitySchema>({\n                                                               status,\n                                                               collectionPath,\n                                                               schema,\n                                                               entity,\n                                                               onEntitySave\n                                                           }: EntityFormProps<S>) {\n    const classes = formStyles();\n\n\n    const [customId, setCustomId] = React.useState<string | undefined>(undefined);\n    const [customIdError, setCustomIdError] = React.useState<boolean>(false);\n    const [savingError, setSavingError] = React.useState<any>();\n\n    const mustSetCustomId: boolean = status === EntityStatus.new && !!schema.customId;\n\n    let initialValues: EntityValues<S>;\n\n    if (status === EntityStatus.new) {\n        initialValues = initEntityValues(schema);\n    } else if (status === EntityStatus.existing && entity) {\n        initialValues = entity.values;\n    } else {\n        throw new Error(\"Form configured wrong\");\n    }\n\n    function createFormFields(schema: EntitySchema) {\n        return <React.Fragment>\n            {Object.entries(schema.properties).map(([key, property]) => {\n\n                const formField = createFormField(key, property, true);\n\n                if (property.dataType === \"array\" && property.of.dataType === \"map\") {\n                    return <Grid item xs={12}\n                                 key={`field_${schema.name}_${key}`}>\n                        {formField}\n                    </Grid>;\n                }\n\n                if (property.dataType === \"array\" && property.of.dataType === \"string\" && property.of.storageMeta) {\n                    return <Grid item xs={12}\n                                 key={`field_${schema.name}_${key}`}>\n                        {formField}\n                    </Grid>;\n                }\n\n                if (property.dataType === \"string\" && property.storageMeta) {\n                    return <Grid item xs={12}\n                                 key={`field_${schema.name}_${key}`}>\n                        {formField}\n                    </Grid>;\n                }\n\n                return <Grid item xs={12} sm={6}\n                             key={`field_${schema.name}_${key}`}>\n                    {formField}\n                </Grid>;\n            })}\n        </React.Fragment>;\n    }\n\n    function saveValues(values: EntityValues<S>, actions: FormikHelpers<EntityValues<S>>) {\n\n        if (mustSetCustomId && !customId) {\n            console.error(\"Missing custom Id\");\n            setCustomIdError(true);\n            actions.setSubmitting(false);\n            return;\n        }\n        setSavingError(null);\n        setCustomIdError(false);\n\n        let id: string | undefined;\n        if (status === EntityStatus.existing) {\n            if (!entity?.id) throw Error(\"Form misconfigured when saving, no id for existing entity\");\n            id = entity.id;\n        } else if (status === EntityStatus.new) {\n            if (schema.customId) {\n                if (!customId) throw Error(\"Form misconfigured when saving, customId should be set\");\n                id = customId;\n            }\n        } else {\n            throw Error(\"New FormType added, check EntityForm\");\n        }\n\n        onEntitySave(collectionPath, id, values)\n            .catch(e => {\n                console.error(e);\n                setSavingError(e);\n            })\n            .finally(() => {\n                actions.setSubmitting(false);\n            });\n\n    }\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            validate={(values => console.debug(\"validate\", values))}\n            onSubmit={saveValues}\n            validationSchema={getYupObjectSchema(schema.properties)}\n        >\n            {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting }) => {\n                return (\n                    <Paper elevation={1}>\n                        <Container maxWidth={\"md\"}\n                                   className={classes.formPaper}\n                                   disableGutters={true}>\n\n                            <Box margin={1}>\n                                {createCustomIdField(schema, status, setCustomId, customIdError, entity?.id)}\n                            </Box>\n\n                            <Form className={classes.form}\n                                  onSubmit={handleSubmit}\n                                  noValidate>\n\n                                <Box padding={1}>\n                                    <Grid container spacing={3}>\n                                        {createFormFields(schema)}\n                                    </Grid>\n                                </Box>\n\n                                {savingError &&\n                                <Box textAlign=\"right\">\n                                    {savingError}\n                                </Box>}\n                                <Box textAlign=\"right\">\n                                    {status === EntityStatus.existing &&\n                                    <Button\n                                        variant=\"text\"\n                                        color=\"primary\"\n                                        disabled={isSubmitting}\n                                        className={classes.button}\n                                        type=\"reset\"\n                                    >\n                                        Discard\n                                    </Button>}\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        type=\"submit\"\n                                        disabled={isSubmitting}\n\n                                        className={classes.button}\n                                    >\n                                        Save\n                                    </Button>\n                                </Box>\n                            </Form>\n\n                        </Container>\n                    </Paper>\n                );\n            }}\n        </Formik>\n    );\n}\n","import React from \"react\";\nimport { AppBar, Box, Button, Grid, Paper, Tab, Tabs } from \"@material-ui/core\";\nimport { Entity, EntityCollectionView, EntitySchema } from \"../models\";\nimport CollectionTable from \"./CollectionTable\";\nimport { Link as ReactLink } from \"react-router-dom\";\nimport { getRouterNewEntityPath } from \"../routes/navigation\";\nimport DeleteEntityDialog from \"./DeleteEntityDialog\";\n\n\ninterface SubCollectionViewProps<S extends EntitySchema> {\n\n    parentCollectionPath: string;\n    subcollections: EntityCollectionView<any>[];\n    entity?: Entity<S>;\n\n    onEntityClick?(collectionPath: string, entity: Entity<any>): void;\n}\n\ninterface TabPanelProps<S extends EntitySchema> {\n    subcollectionPath: string | undefined;\n    thisView: EntityCollectionView<S>;\n    selectedView: EntityCollectionView<S>;\n\n    onEntityClick?(collectionPath: string, entity: Entity<S>): void;\n}\n\nfunction TabPanel<S extends EntitySchema>({ subcollectionPath, selectedView, thisView, onEntityClick, ...props }: TabPanelProps<S>) {\n\n    const [deleteEntityClicked, setDeleteEntityClicked] = React.useState<Entity<S> | undefined>(undefined);\n\n    const onEntityDelete = (collectionPath: string, entity: Entity<S>) => {\n        setDeleteEntityClicked(entity);\n    };\n\n    const deleteEnabled = thisView.deleteEnabled !== undefined || thisView.deleteEnabled;\n\n    return <Grid\n        hidden={selectedView !== thisView}>\n\n        {subcollectionPath ?\n            <CollectionTable collectionPath={subcollectionPath}\n                             onEntityDelete={deleteEnabled ? onEntityDelete : undefined}\n                             schema={thisView.schema}\n                             onEntityEdit={onEntityClick}\n                             includeToolbar={false}\n                             paginationEnabled={false}\n                             additionalColumns={thisView.additionalColumns}\n            />\n            :\n            <Grid container>\n                <Box m={3}>You need to save your entity before adding additional\n                    collections</Box>\n            </Grid>}\n\n        <DeleteEntityDialog entity={deleteEntityClicked}\n                            schema={thisView.schema}\n                            open={!!deleteEntityClicked}\n                            onClose={() => setDeleteEntityClicked(undefined)}/>\n    </Grid>;\n}\n\nexport default function SubCollectionsView<S extends EntitySchema>(\n    {\n        parentCollectionPath,\n        subcollections,\n        entity,\n        onEntityClick\n    }: SubCollectionViewProps<S>) {\n\n    if (!subcollections) {\n        throw Error(\"Subcollection view must use a schema with subcollection entries\");\n    }\n\n    const firstSubcollection = Object.values(subcollections)[0];\n    const [selectedView, setSelectedView] = React.useState<EntityCollectionView<any>>(firstSubcollection);\n\n    function _onViewClicked(view: EntityCollectionView<any>) {\n        setSelectedView(view);\n    }\n\n    let subcollectionPath: string | undefined = undefined;\n    if (entity)\n        subcollectionPath = `${parentCollectionPath}/${entity.id}/${selectedView.relativePath}`;\n\n    return (\n        <Paper elevation={0}>\n            <AppBar position=\"static\" color={\"transparent\"} elevation={0}>\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"space-between\"\n                    alignItems=\"flex-end\"\n                >\n                    <Tabs value={selectedView}\n                          onChange={(e, value) => _onViewClicked(value)}>\n                        {Object.entries(subcollections).map(([key, view]) => (\n                            <Tab label={view.name} value={view}\n                                 key={`wrapped-tab-${key}`}/>\n                        ))}\n                    </Tabs>\n                    <Box m={1} textAlign=\"right\">\n                        {subcollectionPath && <Button\n                            component={ReactLink}\n                            to={getRouterNewEntityPath(subcollectionPath)}\n                            size=\"medium\"\n                            variant=\"outlined\"\n                            color=\"primary\"\n                        >\n                            Add {selectedView.schema.name}\n                        </Button>}\n                    </Box>\n                </Grid>\n            </AppBar>\n            {Object.entries(subcollections).map(([key, view]) => (\n                <TabPanel key={`wrapped-tab-content-${key}`}\n                          selectedView={selectedView}\n                          thisView={view}\n                          onEntityClick={onEntityClick}\n                          subcollectionPath={subcollectionPath}/>\n            ))}\n        </Paper>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport EntityForm from \"../form/EntityForm\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Link as ReactLink } from \"react-router-dom\";\nimport {\n    Entity,\n    EntityCollectionView,\n    EntitySchema,\n    EntityStatus\n} from \"../models\";\nimport { fetchEntity, saveEntity } from \"../firebase\";\nimport {\n    Box,\n    Breadcrumbs,\n    Link,\n    Snackbar,\n    Typography\n} from \"@material-ui/core\";\nimport {\n    BreadcrumbEntry,\n    buildDataPath,\n    getEntityPath,\n    getPlaceHolderIdForView,\n    replacePathIdentifiers\n} from \"./navigation\";\nimport { BreadcrumbContainer, CircularProgressCenter } from \"../util\";\nimport SubCollectionsView from \"../collection/SubCollectionsView\";\nimport MuiAlert from \"@material-ui/lab/Alert/Alert\";\n\ninterface EntityRouteProps<S extends EntitySchema> {\n    view: EntityCollectionView<S>;\n    entityPlaceholderPath: string,\n    breadcrumbs: BreadcrumbEntry[]\n}\n\ntype EntityParamsProps = Record<string, string>;\n\n\nexport function EntityFormRoute<S extends EntitySchema>({\n                                                            view,\n                                                            entityPlaceholderPath,\n                                                            breadcrumbs,\n                                                            match,\n                                                            history,\n                                                            ...props\n                                                        }: EntityRouteProps<S> & RouteComponentProps<EntityParamsProps>) {\n    let entityId: string | undefined;\n    let collectionPath: string;\n    let params: Record<string, string>;\n\n    const hashIdentifier = getPlaceHolderIdForView(entityPlaceholderPath, view);\n    params = match.params;\n    collectionPath = replacePathIdentifiers(params, entityPlaceholderPath);\n    entityId = params[hashIdentifier];\n\n    const [entity, setEntity] = useState<Entity<S>>();\n    const [status, setStatus] = useState<EntityStatus | undefined>();\n    const [loading, setLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        if (entityId) {\n            fetchEntity<S>(collectionPath, entityId, view.schema)\n                .then((e) => {\n                    setStatus(EntityStatus.existing);\n                    setEntity(e);\n                })\n                .finally(() => setLoading(false));\n        } else {\n            setStatus(EntityStatus.new);\n            setLoading(false);\n        }\n    }, [collectionPath, entityId, view]);\n\n    const backListener = history.listen(location => {\n        // console.log(\"new location\", location);\n        // if (location.action === \"POP\") {\n        //     // Do your stuff\n        // }\n    });\n\n    const handleCloseSuccessAlert = (event?: React.SyntheticEvent, reason?: string) => {\n        setOpenSuccessAlert(false);\n    };\n\n    const handleCloseErrorAlert = (event?: React.SyntheticEvent, reason?: string) => {\n        setOpenErrorAlert(undefined);\n    };\n\n    const [openSuccessAlert, setOpenSuccessAlert] = React.useState<boolean>(false);\n    const [openErrorAlert, setOpenErrorAlert] = React.useState<Error | undefined>(undefined);\n\n    function onSubcollectionEntityClick(collectionPath: string, entity: Entity<S>) {\n        const entityPath = getEntityPath(entity.id, collectionPath);\n        history.push(entityPath);\n    }\n\n    function onEntitySave(collectionPath: string, id: string | undefined, values: any): Promise<void> {\n        return saveEntity(collectionPath, id, values)\n            .then((id) => {\n                setOpenSuccessAlert(true);\n\n                if (status === EntityStatus.new) {\n                    setLoading(true);\n                    setEntity(undefined);\n                    setStatus(undefined);\n                    history.replace(getEntityPath(id, collectionPath));\n                }\n                // history.goBack();\n            })\n            .catch((e) => {\n                setOpenErrorAlert(e);\n                console.error(\"Error saving entity\", collectionPath, entityId, values);\n                console.error(e);\n            });\n    }\n\n    const existingEntity = status === EntityStatus.existing;\n\n    const formBody = <React.Fragment>\n        <Box mb={3}>\n            <BreadcrumbContainer>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link key={`breadcrumb-home`} color=\"inherit\"\n                          component={ReactLink}\n                          to=\"/\">\n                        Home\n                    </Link>\n                    {breadcrumbs.map(entry =>\n                        (entry.placeHolderId && !params[entry.placeHolderId]) ?\n                            null :\n                            <Link\n                                key={`breadcrumb-${entry.entityPlaceholderPath}`}\n                                color=\"inherit\"\n                                component={ReactLink}\n                                to={buildDataPath(replacePathIdentifiers(params, entry.entityPlaceholderPath))}>\n                                {entry.placeHolderId ? params[entry.placeHolderId] : entry.view.name}\n                            </Link>)\n                        .filter(c => !!c)}\n                    <Typography\n                        color=\"textPrimary\">{existingEntity ? \"Edit\" : `Add New`}</Typography>\n                </Breadcrumbs>\n            </BreadcrumbContainer>\n        </Box>\n        <Box mb={3}>\n            <Typography variant=\"h5\">\n                {existingEntity ? \"Edit\" : `Add New`} {view.schema.name}\n            </Typography>\n        </Box>\n\n        <EntityForm\n            status={status as EntityStatus}\n            collectionPath={collectionPath}\n            schema={view.schema}\n            onEntitySave={onEntitySave}\n            entity={entity}/>\n\n        {view.subcollections &&\n        <SubCollectionsView parentCollectionPath={collectionPath}\n                            subcollections={view.subcollections}\n                            entity={entity}\n                            onEntityClick={onSubcollectionEntityClick}/>\n        }\n\n    </React.Fragment>;\n\n    return (\n        <React.Fragment>\n            {loading ?\n                <CircularProgressCenter/>\n                :\n                formBody\n            }\n\n            <Snackbar open={openSuccessAlert} autoHideDuration={3000}\n                      onClose={handleCloseSuccessAlert}>\n                <MuiAlert elevation={6} variant=\"filled\"\n                          onClose={handleCloseSuccessAlert} severity=\"success\">\n                    The item has been saved correctly\n                </MuiAlert>\n            </Snackbar>\n            <Snackbar open={!!openErrorAlert} autoHideDuration={3000}\n                      onClose={handleCloseErrorAlert}>\n                <MuiAlert elevation={6} variant=\"filled\"\n                          onClose={handleCloseErrorAlert}\n                          severity=\"error\">\n                    <Box>Error saving</Box>\n                    <Box>{openErrorAlert?.message}</Box>\n                </MuiAlert>\n            </Snackbar>\n        </React.Fragment>\n    );\n}\n","import React, { useState } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { formStyles, useStyles } from \"../styles\";\nimport { Button, Grid, Paper } from \"@material-ui/core\";\nimport * as firebase from \"firebase\";\nimport TreeView from \"@material-ui/lab/TreeView\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\n\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { uploadFile } from \"../firebase\";\n\ninterface MediaRouteProps {\n}\n\ninterface Node {\n    full_path: string;\n    name: string;\n    children: Node[],\n    ref: firebase.storage.Reference\n}\n\nfunction StorageTree() {\n\n    const classes = useStyles();\n    let storage = firebase.storage();\n\n    let initialState: Node = {\n        full_path: \"\",\n        name: \"Root\",\n        children: [],\n        ref: storage.ref()\n    };\n\n    const [treeArray, setTreeArray] = useState<Record<string, Node>>({ \"\": initialState });\n\n    const onNodeToggle = (event: React.ChangeEvent<{}>, nodeIds: string[]) => {\n\n    };\n    const onNodeToggle2 = (nodeId: string, expanded: boolean) => {\n        let reference = storage.ref(nodeId);\n        if (expanded) {\n            reference.list().then((listResult) => {\n                const newTreeArray = { ...treeArray };\n                listResult.prefixes.forEach((prefix) => {\n                    const newNode = {\n                        full_path: prefix.fullPath,\n                        children: [],\n                        ref: prefix,\n                        name: prefix.name\n                    };\n                    newTreeArray[nodeId].children.push(newNode);\n                    newTreeArray[prefix.fullPath] = newNode;\n                });\n                setTreeArray(newTreeArray);\n            });\n        } else {\n            const newTreeArray = { ...treeArray };\n            newTreeArray[nodeId].children = [];\n            setTreeArray(newTreeArray);\n        }\n    };\n\n    function getTreeItem(node: Node) {\n        return <TreeItem nodeId={node.full_path} label={node.name}>\n            {node.children.map((childNode) => getTreeItem(childNode))}\n        </TreeItem>;\n    }\n\n    return (<TreeView\n        className={classes.tree}\n        defaultCollapseIcon={<ExpandMoreIcon/>}\n        defaultExpandIcon={<ChevronRightIcon/>}\n        onNodeToggle={onNodeToggle}\n    >\n        {getTreeItem(treeArray[\"\"])}\n    </TreeView>);\n}\n\nexport function MediaRoute({ ...props }: MediaRouteProps & Partial<RouteComponentProps>) {\n    const classes = formStyles();\n\n    const [files, setFiles] = useState<File[]>([]);\n\n    function handleChange(changedFiles: File[]) {\n        setFiles(changedFiles);\n        console.log(changedFiles);\n        console.log(typeof changedFiles[0]);\n    }\n\n    function upload() {\n        uploadFile(files[0]);\n    }\n\n    return (\n        <React.Fragment>\n            <Grid container spacing={2}>\n\n                <Grid item xs={12} sm={3}>\n                    <Paper elevation={0} className={classes.paper}>\n                        <StorageTree/>\n                    </Paper>\n                </Grid>\n\n                <Grid item xs={12} sm={9}>\n                    {/*<DropzoneArea*/}\n                    {/*    dropzoneText={\"\"}*/}\n                    {/*    onChange={handleChange}*/}\n                    {/*    maxFileSize={20 * 1024 * 1024}*/}\n                    {/*    filesLimit={10}*/}\n                    {/*/>*/}\n\n                    <Button disabled={!files.length}\n                            onClick={upload}>Upload</Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n","import React, { useEffect } from \"react\";\nimport {\n    AppBar,\n    Avatar,\n    Box,\n    Button,\n    CssBaseline,\n    Divider,\n    Drawer,\n    Grid,\n    Hidden,\n    IconButton,\n    List,\n    ListItem,\n    ListItemText,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nimport \"typeface-roboto\";\n\nimport { ThemeProvider, useTheme } from \"@material-ui/core/styles\";\nimport {\n    BrowserRouter as Router,\n    Link as ReactLink,\n    Redirect,\n    Route,\n    Switch\n} from \"react-router-dom\";\n\nimport * as firebase from \"firebase\";\nimport \"firebase/auth\";\n\nimport { CircularProgressCenter } from \"./util\";\nimport { EntityCollectionView } from \"./models\";\nimport {\n    addInitialSlash,\n    buildDataPath,\n    CollectionRoute,\n    EntityFormRoute,\n    getAllPaths,\n    MediaRoute,\n    PathConfiguration,\n    removeInitialSlash\n} from \"./routes\";\nimport { useStyles } from \"./styles\";\nimport { Authenticator } from \"./authenticator\";\n\n\n/**\n * Main entry point that defines the CMS configuration\n */\ninterface CMSAppProps {\n    /**\n     * Name of the service, displayed as the main title and in the tab title\n     */\n    name: string;\n\n    /**\n     * Logo to be displayed in the drawer of the CMS\n     */\n    logo?: string;\n\n    /**\n     * List of the views in the CMS. Each view relates to a collection in the\n     * root Firestore database. Each of the navigation entries in this field\n     * generates an entry in the main menu.\n     */\n    navigation: EntityCollectionView<any>[];\n\n    /**\n     * Should the CMS include the Media view (WIP, do not use yet)\n     */\n    includeMedia?: boolean;\n\n    /**\n     * Do the users need to log in to access the CMS.\n     * You can specify an Authenticator function to discriminate which users can\n     * access the CMS or not.\n     * If not specified authentication is enabled but no user restrictions apply\n     */\n    authentication?: boolean | Authenticator;\n\n    /**\n     * If authentication is enabled, allow the user to access the content\n     * without login.\n     */\n    allowSkipLogin?: boolean;\n\n    /**\n     * Custom additional views created by the developer, added to the main\n     * navigation\n     */\n    additionalViews?: AdditionalView[];\n\n    /**\n     * Firebase configuration of the project. If you afe deploying the app to\n     * Firebase hosting, you don't need to specify this value\n     */\n    firebaseConfig?: Object;\n}\n\n/**\n * Custom additional views created by the developer, added to the main\n * navigation\n */\nexport interface AdditionalView {\n    /**\n     * CMS Path\n     */\n    path: string;\n\n    /**\n     * Name of this view\n     */\n    name: string;\n\n    /**\n     * Component to be rendered\n     */\n    view: React.ReactChild;\n}\n\n\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n\nexport const AuthContext = React.createContext<firebase.User | null>(null);\n\nexport default function CMSApp({\n                                   name,\n                                   logo,\n                                   navigation,\n                                   includeMedia,\n                                   authentication,\n                                   allowSkipLogin,\n                                   firebaseConfig,\n                                   additionalViews\n                               }: CMSAppProps) {\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const [mobileOpen, setMobileOpen] = React.useState(false);\n\n    const [\n        firebaseConfigInitialized,\n        setFirebaseConfigInitialized\n    ] = React.useState<boolean>(false);\n    const [configError, setConfigError] = React.useState<string>();\n\n    const [authLoading, setAuthLoading] = React.useState(true);\n    const [loggedUser, setLoggedUser] = React.useState<firebase.User | null>(null);\n    const [loginSkipped, setLoginSkipped] = React.useState<boolean>(false);\n    const [authProviderError, setAuthProviderError] = React.useState<any>();\n    const [notAllowedError, setNotAllowedError] = React.useState<boolean>(false);\n    const [firebaseConfigError, setFirebaseConfigError] = React.useState<boolean>(false);\n\n    const authenticationEnabled = authentication === undefined || !!authentication;\n    const skipLoginButtonEnabled = authenticationEnabled && allowSkipLogin;\n\n    const authenticator: Authenticator | undefined\n        = authentication instanceof Function ? authentication : undefined;\n\n    const onAuthStateChanged = async (user: firebase.User | null) => {\n\n        setNotAllowedError(false);\n\n        if (authenticator && user) {\n            const allowed = await authenticator(user);\n            if (allowed)\n                setLoggedUser(user);\n            else\n                setNotAllowedError(true);\n        } else {\n            setLoggedUser(user);\n        }\n\n        setAuthLoading(false);\n    };\n\n    function initFirebase(config: Object) {\n        try {\n            firebase.initializeApp(config);\n            firebase.auth().onAuthStateChanged(\n                onAuthStateChanged,\n                error => setAuthProviderError(error)\n            );\n            setFirebaseConfigError(false);\n            setFirebaseConfigInitialized(true);\n        } catch (e) {\n            console.error(e);\n            setFirebaseConfigError(true);\n        }\n    }\n\n    useEffect(() => {\n\n        if (process.env.NODE_ENV === \"production\") {\n            fetch(\"/__/firebase/init.json\")\n                .then(async response => {\n                    console.log(\"Firebase init response\", response);\n                    if (response && response.status < 300) {\n                        const config = await response.json();\n                        initFirebase(config);\n                    }\n                })\n                .catch(e =>\n                    setConfigError(\n                        \"Could not load Firebase configuration from Firebase hosting. \" +\n                        \"If the app is not deployed in Firebase hosting, you need to specify the configuration manually\" +\n                        e.toString()\n                    )\n                );\n        } else if (firebaseConfig) {\n            initFirebase(firebaseConfig);\n        } else {\n            setConfigError(\n                \"You need to deploy the app to Firebase hosting or specify a Firebase configuration object\"\n            );\n        }\n    }, []);\n\n    const handleDrawerToggle = () => setMobileOpen(!mobileOpen);\n\n    function googleSignIn() {\n        setAuthProviderError(null);\n        firebase\n            .auth()\n            .signInWithPopup(googleAuthProvider)\n            .then((_: firebase.auth.UserCredential) => {\n            })\n            .catch(error => setAuthProviderError(error));\n    }\n\n    function skipLogin() {\n        setAuthProviderError(null);\n        setLoginSkipped(true);\n    }\n\n    function onSignOut() {\n        firebase.auth().signOut();\n        setLoginSkipped(false);\n    }\n\n    function renderLoginView() {\n        return (\n            <Grid\n                container\n                spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{ minHeight: \"100vh\" }}\n            >\n                <Box className={classes.toolbar}>\n                    {logo && <img className={classes.logo} src={logo}/>}\n                </Box>\n\n                <Grid item xs={12}>\n                    <Button variant=\"contained\"\n                            color=\"primary\"\n                            onClick={googleSignIn}>\n                        Google login\n                    </Button>\n                </Grid>\n\n                {skipLoginButtonEnabled && <Grid item xs={12}>\n                    <Button onClick={skipLogin}>Skip login</Button>\n                </Grid>}\n\n                <Grid item xs={12}>\n\n                    {/* TODO: add link to https://console.firebase.google.com/u/0/project/[PROYECT_ID]/authentication/providers in order to enable google */}\n                    {/* in case the error code is auth/operation-not-allowed */}\n\n                    {notAllowedError &&\n                    <Box p={2}>It looks like you don't have access to the CMS,\n                        based\n                        on the specified Authenticator configuration</Box>}\n\n                    {/*{authProviderError && <Box>{authProviderError.code}</div>}*/}\n                    {authProviderError &&\n                    <Box p={2}>{authProviderError.message}</Box>}\n\n                </Grid>\n            </Grid>\n        );\n    }\n\n    function getRouterSwitch(shouldIncludeMedia: boolean) {\n\n        const allPaths = getAllPaths(navigation);\n\n        const firstCollectionPath = removeInitialSlash(navigation[0].relativePath);\n\n        return (\n            <Switch>\n                {allPaths\n                    .map(\n                        ({\n                             entries,\n                             entityPlaceholderPath,\n                             breadcrumbs,\n                             view\n                         }: PathConfiguration) =>\n                            entries.map(entry => (\n                                <Route\n                                    path={buildDataPath(entry.fullPath)}\n                                    key={`navigation_${entry.routeType}_${entry.placeHolderId}`}\n                                    render={props => {\n                                        if (entry.routeType === \"entity\")\n                                            return (\n                                                <EntityFormRoute\n                                                    {...props}\n                                                    view={view}\n                                                    breadcrumbs={breadcrumbs}\n                                                    entityPlaceholderPath={entityPlaceholderPath}\n                                                />\n                                            );\n                                        else if (entry.routeType === \"collection\")\n                                            return (\n                                                <CollectionRoute\n                                                    {...props}\n                                                    view={view}\n                                                    breadcrumbs={breadcrumbs}\n                                                    entityPlaceholderPath={entityPlaceholderPath}\n                                                />\n                                            );\n                                        else throw Error(\"No know routeType\");\n                                    }}\n                                />\n                            ))\n                    )\n                    .flat()}\n\n                {shouldIncludeMedia && (\n                    <Route path=\"/media\">\n                        <MediaRoute/>\n                    </Route>\n                )}\n\n                {additionalViews &&\n                additionalViews.map(additionalView => (\n                    <Route\n                        key={\"additional_view_\" + additionalView.path}\n                        path={addInitialSlash(additionalView.path)}\n                    >\n                        {additionalView.view}\n                    </Route>\n                ))}\n\n                <Redirect exact from=\"/\"\n                          to={buildDataPath(firstCollectionPath)}/>\n            </Switch>\n        );\n    }\n\n    function renderMainView() {\n        if (configError) {\n            return <Box> {configError} </Box>;\n        }\n\n        if (!firebaseConfigInitialized) {\n            return <CircularProgressCenter/>;\n        }\n\n        const shouldIncludeMedia =\n            includeMedia !== undefined && includeMedia;\n\n        const drawer = (\n            <React.Fragment>\n\n                <Box className={classes.toolbar}>\n                    {logo && <img className={classes.logo} src={logo}/>}\n                </Box>\n\n                <Divider/>\n                <List>\n                    {Object.entries(navigation).map(([key, view], index) => (\n                        <ListItem\n                            button\n                            key={`navigation_${index}_${key}`}\n                            component={ReactLink}\n                            to={buildDataPath(view.relativePath)}\n                        >\n                            <ListItemText\n                                primary={view.name}\n                                primaryTypographyProps={{ variant: \"subtitle2\" }}/>\n                        </ListItem>\n                    ))}\n\n                    {shouldIncludeMedia && (\n                        <React.Fragment>\n                            <Divider/>\n                            <ListItem button component={ReactLink} to=\"/media\">\n                                <ListItemText\n                                    primary=\"Media\"\n                                    primaryTypographyProps={{ variant: \"subtitle2\" }}/>\n                            </ListItem>\n                        </React.Fragment>\n                    )}\n\n                    {additionalViews && (\n                        <React.Fragment>\n                            <Divider/>\n                            {additionalViews.map(additionalView => (\n                                <ListItem\n                                    button\n                                    key={`additional-view-${additionalView.path}`}\n                                    component={ReactLink}\n                                    to={addInitialSlash(additionalView.path)}\n                                >\n                                    <ListItemText\n                                        primary={additionalView.name}\n                                        primaryTypographyProps={{ variant: \"subtitle2\" }}/>\n                                </ListItem>\n                            ))}\n                        </React.Fragment>\n                    )}\n                </List>\n            </React.Fragment>\n        );\n\n        return (\n            <AuthContext.Provider value={loggedUser}>\n                <Router>\n                    <Box className={classes.root}>\n                        <CssBaseline/>\n                        <AppBar position=\"fixed\" className={classes.appBar}>\n                            <Toolbar>\n                                <IconButton\n                                    color=\"inherit\"\n                                    aria-label=\"open drawer\"\n                                    edge=\"start\"\n                                    onClick={handleDrawerToggle}\n                                    className={classes.menuButton}\n                                >\n                                    <MenuIcon/>\n                                </IconButton>\n                                <Typography variant=\"h6\" noWrap>\n                                    {name}\n                                </Typography>\n                                <Box className={classes.grow}/>\n\n                                <Box p={2}>\n                                    {loggedUser && loggedUser.photoURL ?\n                                        <Avatar src={loggedUser.photoURL}/>\n                                        :\n                                        <Avatar>{loggedUser?.displayName ? loggedUser.displayName[0] : \"A\"}</Avatar>\n                                    }\n                                </Box>\n\n                                <Button variant=\"text\" color=\"inherit\"\n                                        onClick={onSignOut}>\n                                    Log Out\n                                </Button>\n\n                            </Toolbar>\n                        </AppBar>\n                        <nav className={classes.drawer}>\n                            {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                            <Hidden mdUp implementation=\"css\">\n                                <Drawer\n                                    variant=\"temporary\"\n                                    anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                                    open={mobileOpen}\n                                    onClose={handleDrawerToggle}\n                                    classes={{\n                                        paper: classes.drawerPaper\n                                    }}\n                                    ModalProps={{\n                                        keepMounted: true // Better open performance on mobile.\n                                    }}\n                                >\n                                    {drawer}\n                                </Drawer>\n                            </Hidden>\n                            <Hidden smDown implementation=\"css\">\n                                <Drawer\n                                    classes={{\n                                        paper: classes.drawerPaper\n                                    }}\n                                    variant=\"permanent\"\n                                    open\n                                >\n                                    {drawer}\n                                </Drawer>\n                            </Hidden>\n                        </nav>\n                        <main className={classes.content}>\n                            <Box className={classes.toolbar}/>\n                            {getRouterSwitch(shouldIncludeMedia)}\n                        </main>\n                    </Box>\n                </Router>\n            </AuthContext.Provider>\n        );\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                {firebaseConfigError ?\n                    <Box>\n                        It seems like the provided Firebase config is not\n                        correct\n                    </Box> :\n                    (\n                        authLoading ? (\n                            <CircularProgressCenter/>\n                        ) : (!authenticationEnabled || loggedUser || loginSkipped) ? (\n                            renderMainView()\n                        ) : (\n                            renderLoginView()\n                        )\n                    )}\n            </MuiPickersUtilsProvider>\n        </ThemeProvider>\n    );\n}\n","import { SearchClient, SearchIndex } from \"algoliasearch\";\n\n/**\n * Simple interface for implementing a text search\n */\nexport interface TextSearchDelegate {\n    /**\n     * @param query string\n     * @return array containing the Firestore ids of the search results\n     */\n    performTextSearch(query: string): Promise<readonly string[]>;\n}\n\nexport class AlgoliaTextSearchDelegate implements TextSearchDelegate {\n\n    algoliaClient: SearchClient;\n    index: SearchIndex;\n\n    constructor(algoliaClient: SearchClient, indexKey: string) {\n        this.algoliaClient = algoliaClient;\n        this.index = algoliaClient.initIndex(indexKey);\n    }\n\n    performTextSearch(query: string): Promise<readonly string[]> {\n        console.log(\"Performing Algolia query\", query);\n        return this.index\n            .search(query)\n            .then(({ hits }: any) => {\n                console.log(hits);\n                return hits.map((hit: any) => hit.objectID as string);\n            })\n            .catch((err: any) => {\n                console.log(err);\n                return [];\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport logo from \"./images/test_shop_logo.png\";\nimport algoliasearch, { SearchClient } from \"algoliasearch\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport {\n    AdditionalColumnDelegate,\n    AlgoliaTextSearchDelegate,\n    AsyncPreviewComponent,\n    Authenticator,\n    CMSApp,\n    Entity,\n    EntityCollectionView,\n    EntitySchema,\n    EnumValues\n} from \"firecms\";\n\nimport { firebaseConfig } from \"./firebase_config\";\nimport CustomLargeTextField from \"./custom_field/CustomLargeTextField\";\nimport firebase from \"firebase\";\n\nconst locales: EnumValues<string> = {\n    \"de-DE\": \"German\",\n    \"en-US\": \"English (United States)\",\n    \"es-ES\": \"Spanish (Spain)\",\n    \"es-419\": \"Spanish (South America)\"\n};\n\nconst productSchema: EntitySchema = {\n    customId: true,\n    name: \"Product\",\n    properties: {\n        name: {\n            title: \"Name\",\n            validation: { required: true },\n            dataType: \"string\",\n            includeInListView: true,\n            includeAsMapPreview: true\n        },\n        price: {\n            title: \"Price\",\n            validation: {\n                required: true,\n                requiredMessage: \"You must set a price\"\n            },\n            filterable: true,\n            dataType: \"number\",\n            includeInListView: true\n        },\n        status: {\n            title: \"Status\",\n            validation: { required: true },\n            dataType: \"string\",\n            enumValues: {\n                private: \"Private\",\n                public: \"Public\"\n            },\n            includeInListView: true\n        },\n        categories: {\n            title: \"Categories\",\n            validation: { required: true },\n            dataType: \"array\",\n            of: {\n                dataType: \"string\",\n                enumValues: {\n                    electronics: \"Electronics\",\n                    books: \"Books\",\n                    furniture: \"Furniture\",\n                    clothing: \"Clothing\",\n                    food: \"Food\"\n                }\n            },\n            includeInListView: true\n        },\n        image: {\n            title: \"Image\",\n            dataType: \"string\",\n            storageMeta: {\n                mediaType: \"image\",\n                storagePath: \"images\",\n                acceptedFiles: [\"image/*\"]\n            },\n            includeInListView: true,\n            includeAsMapPreview: true\n        },\n        tags: {\n            title: \"Tags\",\n            description: \"Example of generic array\",\n            validation: { required: true },\n            dataType: \"array\",\n            of: {\n                dataType: \"string\"\n            },\n            includeInListView: true\n        },\n        description: {\n            title: \"Description\",\n            description: \"Not mandatory but it'd be awesome if you filled this up\",\n            dataType: \"string\",\n            includeInListView: false\n        },\n        published: {\n            title: \"Published\",\n            dataType: \"boolean\",\n            includeInListView: true\n        },\n        expires_on: {\n            title: \"Expires on\",\n            dataType: \"timestamp\",\n            includeInListView: true\n        },\n        publisher: {\n            title: \"Publisher\",\n            description: \"This is an example of a map property\",\n            dataType: \"map\",\n            properties: {\n                name: {\n                    title: \"Name\",\n                    includeInListView: true,\n                    dataType: \"string\"\n                },\n                external_id: {\n                    title: \"External id\",\n                    includeInListView: true,\n                    dataType: \"string\"\n                }\n            },\n            includeInListView: true\n        },\n        available_locales: {\n            title: \"Available locales\",\n            description:\n                \"This is an example of a disabled field\",\n            dataType: \"array\",\n            disabled: true,\n            of: {\n                dataType: \"string\"\n            },\n            includeInListView: true\n        }\n    }\n};\n\n\nconst blogSchema: EntitySchema = {\n    name: \"Blog entry\",\n    properties: {\n        name: {\n            title: \"Name\",\n            validation: { required: true },\n            filterable: true,\n            dataType: \"string\",\n            includeInListView: true\n        },\n        long_text: {\n            title: \"Long text\",\n            description: \"This field is using a custom component\",\n            validation: { required: true },\n            dataType: \"string\",\n            customField: CustomLargeTextField,\n            additionalProps: {\n                rows: 5\n            },\n            includeInListView: false\n        },\n        images: {\n            title: \"Images\",\n            dataType: \"array\",\n            of: {\n                dataType: \"string\",\n                storageMeta: {\n                    mediaType: \"image\",\n                    storagePath: \"images\",\n                    acceptedFiles: [\"image/*\"]\n                }\n            },\n            includeInListView: true\n        },\n        priority: {\n            title: \"Priority\",\n            description: \"This field allows the selection of Infinity as a value\",\n            dataType: \"number\",\n            additionalProps: {\n                allowInfinity: true\n            },\n            includeInListView: false\n        },\n        content: {\n            title: \"Content\",\n            validation: { required: true },\n            dataType: \"array\",\n            of: {\n                dataType: \"string\"\n            },\n            includeInListView: false\n        },\n        status: {\n            title: \"Status\",\n            validation: { required: true },\n            dataType: \"string\",\n            filterable: true,\n            enumValues: {\n                published: \"Published\",\n                draft: \"Draft\"\n            },\n            includeInListView: true\n        },\n        products: {\n            title: \"Products\",\n            validation: { required: true },\n            dataType: \"array\",\n            of: {\n                dataType: \"reference\",\n                collectionPath: \"products\",\n                schema: productSchema\n            },\n            includeInListView: true\n        }\n    }\n};\nconst usersSchema: EntitySchema = {\n    name: \"User\",\n    properties: {\n\n        first_name: {\n            title: \"First name\",\n            dataType: \"string\",\n            includeInListView: true,\n            filterable: true\n        },\n        last_name: {\n            title: \"Last name\",\n            dataType: \"string\",\n            includeInListView: true\n        },\n        picture: {\n            title: \"Picture\",\n            dataType: \"map\",\n            properties: {\n                large: {\n                    title: \"Large\",\n                    dataType: \"string\",\n                    urlMediaType: \"image\",\n                    includeAsMapPreview: true\n                },\n                medium: {\n                    title: \"Medium\",\n                    dataType: \"string\",\n                    urlMediaType: \"image\"\n                },\n                thumbnail: {\n                    title: \"Thumbnail\",\n                    dataType: \"string\",\n                    urlMediaType: \"image\"\n                }\n            },\n            includeInListView: true\n        },\n        email: {\n            title: \"Email\",\n            dataType: \"string\",\n            includeInListView: true\n        },\n        phone: {\n            title: \"Phone\",\n            dataType: \"string\",\n            includeInListView: true\n        }\n    }\n};\n\nexport const testEntitySchema: EntitySchema = {\n    customId: true,\n    name: \"Test entity\",\n    properties: {\n        tags: {\n            title: \"Tags\",\n            includeInListView: true,\n            // validation: { required: true },\n            dataType: \"array\",\n            of: {\n                dataType: \"string\"\n            }\n        },\n        title: {\n            title: \"Title\",\n            description: \"A catching title is important\",\n            includeInListView: true,\n            // validation: { required: true },\n            dataType: \"string\"\n        },\n        description: {\n            title: \"Description\",\n            includeInListView: true,\n            // validation: { required: true },\n            dataType: \"string\"\n        },\n        search_adjacent: {\n            title: \"Search adjacent\",\n            // validation: { required: true },\n            includeInListView: true,\n            dataType: \"boolean\"\n        },\n        difficulty: {\n            title: \"Difficulty\",\n            // validation: { required: true },\n            includeInListView: true,\n            dataType: \"number\"\n        },\n        created_at: {\n            title: \"Created at\",\n            // validation: { required: true },\n            includeInListView: true,\n            dataType: \"timestamp\"\n        },\n        image: {\n            title: \"Image\",\n            dataType: \"string\",\n            includeInListView: true,\n            storageMeta: {\n                mediaType: \"image\",\n                storagePath: \"test\",\n                acceptedFiles: [\"image/*\"]\n            }\n        }\n    }\n};\n\nconst productAdditionalColumn: AdditionalColumnDelegate<typeof productSchema> = {\n    title: \"Spanish title\",\n    builder: (entity: Entity<typeof productSchema>) =>\n        <AsyncPreviewComponent builder={\n            entity.reference.collection(\"locales\")\n                .doc(\"es-ES\")\n                .get()\n                .then((snapshot: any) => snapshot.get(\"title\") as string)\n        }/>\n};\n\n\nlet client: SearchClient | undefined = undefined;\nif (process.env.REACT_APP_ALGOLIA_APP_ID && process.env.REACT_APP_ALGOLIA_SEARCH_KEY) {\n    client = algoliasearch(process.env.REACT_APP_ALGOLIA_APP_ID, process.env.REACT_APP_ALGOLIA_SEARCH_KEY);\n} else {\n    console.error(\"REACT_APP_ALGOLIA_APP_ID or REACT_APP_ALGOLIA_SEARCH_KEY env variables not specified\");\n    console.error(\"Text search not enabled\");\n}\n\nconst localeCollection =\n    {\n        name: \"Locales\",\n        relativePath: \"locales\",\n        schema: {\n            customId: locales,\n            name: \"Locale\",\n            properties: {\n                title: {\n                    title: \"Title\",\n                    validation: { required: true },\n                    dataType: \"string\",\n                    includeInListView: true\n                },\n                selectable: {\n                    title: \"Selectable\",\n                    description: \"Is this locale selectable\",\n                    dataType: \"boolean\",\n                    includeInListView: true\n                },\n                video: {\n                    title: \"Video\",\n                    dataType: \"string\",\n                    validation: { required: false },\n                    storageMeta: {\n                        mediaType: \"video\",\n                        storagePath: \"videos\",\n                        acceptedFiles: [\"video/*\"]\n                    },\n                    includeInListView: true\n                }\n            }\n        }\n    }\n;\n\nlet navigation: EntityCollectionView<any>[] = [\n    {\n        relativePath: \"products\",\n        schema: productSchema,\n        name: \"Products\",\n        textSearchDelegate: client && new AlgoliaTextSearchDelegate(\n            client,\n            \"products\"),\n        additionalColumns: [productAdditionalColumn],\n        subcollections: [localeCollection]\n\n    },\n    {\n        relativePath: \"users\",\n        schema: usersSchema,\n        name: \"Users\",\n        textSearchDelegate: client && new AlgoliaTextSearchDelegate(\n            client,\n            \"users\")\n    },\n    {\n        relativePath: \"blog\",\n        schema: blogSchema,\n        name: \"Blog\",\n        textSearchDelegate: client && new AlgoliaTextSearchDelegate(\n            client,\n            \"blog\")\n    }\n];\n\nif (process.env.NODE_ENV !== \"production\") {\n    navigation.push({\n        relativePath: \"test_entity\",\n        schema: testEntitySchema,\n        name: \"Test entity\"\n    });\n}\n\n\nconst myAuthenticator: Authenticator = (user?: firebase.User) => {\n    console.log(\"Allowing access to\", user?.email);\n    return true;\n};\n\n\nReactDOM.render(\n    <CMSApp\n        name={\"Test shop CMS\"}\n        authentication={myAuthenticator}\n        allowSkipLogin={true}\n        logo={logo}\n        navigation={navigation}\n        firebaseConfig={firebaseConfig}\n    />,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\nserviceWorker.unregister();\n","import { getIn } from \"formik\";\nimport {\n    FormControl,\n    FormHelperText,\n    Input,\n    InputLabel\n} from \"@material-ui/core\";\nimport React, { ReactElement } from \"react\";\nimport { CMSFieldProps } from \"firecms\";\n\ninterface CustomLargeTextFieldProps extends CMSFieldProps<string> {\n    rows: number\n}\n\nexport default function CustomLargeTextField({\n                                                 property,\n                                                 field,\n                                                 rows,\n                                                 form: { isSubmitting, errors, touched, setFieldValue },\n                                                 ...props\n                                             }: CustomLargeTextFieldProps)\n    : ReactElement {\n\n    const fieldError = getIn(errors, field.name);\n    const showError = getIn(touched, field.name) && !!fieldError;\n\n    const value = field.value;\n\n    return (\n        <React.Fragment>\n\n            <FormControl\n                required={property.validation?.required}\n                error={showError}\n                disabled={isSubmitting}\n                fullWidth>\n                <InputLabel>{property.title || field.name}</InputLabel>\n                <Input\n                    multiline\n                    rows={rows}\n                    defaultValue={value}\n                    onChange={(evt) => setFieldValue(\n                        field.name,\n                        evt.target.value\n                    )}\n                />\n\n                {showError && <FormHelperText\n                    id=\"component-error-text\">{fieldError}</FormHelperText>}\n\n                {property.description &&\n                <FormHelperText>{property.description}</FormHelperText>}\n\n            </FormControl>\n\n        </React.Fragment>\n    );\n\n}\n","export const firebaseConfig = {\n    apiKey: \"AIzaSyBzt-JvcXvpDrdNU7jYX3fC3v0EAHjTKEw\",\n    authDomain: \"firecms-demo-27150.firebaseapp.com\",\n    databaseURL: \"https://firecms-demo-27150.firebaseio.com\",\n    projectId: \"firecms-demo-27150\",\n    storageBucket: \"firecms-demo-27150.appspot.com\",\n    messagingSenderId: \"837544933711\",\n    appId: \"1:837544933711:web:75822ffc0840e3ae01ad3a\",\n    measurementId: \"G-8HRE8MVXZJ\"\n};\n"],"sourceRoot":""}